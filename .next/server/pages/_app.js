/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/_app";
exports.ids = ["pages/_app"];
exports.modules = {

/***/ "./apollo-client.ts":
/*!**************************!*\
  !*** ./apollo-client.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_apollo_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst client = new _apollo_client__WEBPACK_IMPORTED_MODULE_0__.ApolloClient({\n    uri: \"https://graphql-api.testnet.dandelion.link/\",\n    cache: new _apollo_client__WEBPACK_IMPORTED_MODULE_0__.InMemoryCache()\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (client);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcG9sbG8tY2xpZW50LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RDtBQUU3RCxNQUFNRSxNQUFNLEdBQUcsSUFBSUYsd0RBQVksQ0FBQztJQUM1QkcsR0FBRyxFQUFFLDZDQUE2QztJQUNsREMsS0FBSyxFQUFFLElBQUlILHlEQUFhLEVBQUU7Q0FDN0IsQ0FBQztBQUVGLGlFQUFlQyxNQUFNLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcGJsLWZyb250LWVuZC10ZW1wbGF0ZS1uZXh0anMtbWVzaC8uL2Fwb2xsby1jbGllbnQudHM/MzlkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcG9sbG9DbGllbnQsIEluTWVtb3J5Q2FjaGUgfSBmcm9tIFwiQGFwb2xsby9jbGllbnRcIjtcblxuY29uc3QgY2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudCh7XG4gICAgdXJpOiBcImh0dHBzOi8vZ3JhcGhxbC1hcGkudGVzdG5ldC5kYW5kZWxpb24ubGluay9cIixcbiAgICBjYWNoZTogbmV3IEluTWVtb3J5Q2FjaGUoKSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjbGllbnQ7Il0sIm5hbWVzIjpbIkFwb2xsb0NsaWVudCIsIkluTWVtb3J5Q2FjaGUiLCJjbGllbnQiLCJ1cmkiLCJjYWNoZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./apollo-client.ts\n");

/***/ }),

/***/ "./components/footer.js":
/*!******************************!*\
  !*** ./components/footer.js ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Footer)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @chakra-ui/react */ \"@chakra-ui/react\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _contexts_wallet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../contexts/wallet */ \"./contexts/wallet.tsx\");\n/* harmony import */ var _wallet_connectWallet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./wallet/connectWallet */ \"./components/wallet/connectWallet.tsx\");\n/* harmony import */ var querystring__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! querystring */ \"querystring\");\n/* harmony import */ var querystring__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(querystring__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_contexts_wallet__WEBPACK_IMPORTED_MODULE_4__, _wallet_connectWallet__WEBPACK_IMPORTED_MODULE_5__]);\n([_contexts_wallet__WEBPACK_IMPORTED_MODULE_4__, _wallet_connectWallet__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\nfunction Footer() {\n    const { connecting , walletNameConnected , connectWallet , walletConnected , connectedAddress  } = (0,_contexts_wallet__WEBPACK_IMPORTED_MODULE_4__[\"default\"])();\n    const { 0: footerColor , 1: setFooterColor  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"orange.200\");\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (walletConnected) {\n            setFooterColor(\"purple.200\");\n        }\n    }, [\n        walletConnected\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_3__.Flex, {\n        pos: \"fixed\",\n        bottom: \"0\",\n        direction: \"row\",\n        w: \"100%\",\n        p: \"5\",\n        bg: footerColor,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_3__.Text, {\n                children: [\n                    \"Connected to: \",\n                    walletNameConnected\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/footer.js\",\n                lineNumber: 20,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_3__.Spacer, {}, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/footer.js\",\n                lineNumber: 21,\n                columnNumber: 9\n            }, this),\n            connectedAddress,\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_3__.Spacer, {}, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/footer.js\",\n                lineNumber: 23,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_wallet_connectWallet__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {}, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/footer.js\",\n                lineNumber: 24,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/footer.js\",\n        lineNumber: 19,\n        columnNumber: 7\n    }, this);\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2Zvb3Rlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBNEM7QUFDaEI7QUFDeUI7QUFDWDtBQUNTO0FBQ1g7QUFFekIsU0FBU1MsTUFBTSxHQUFHO0lBQy9CLE1BQU0sRUFBRUMsVUFBVSxHQUFFQyxtQkFBbUIsR0FBRUMsYUFBYSxHQUFFQyxlQUFlLEdBQUVDLGdCQUFnQixHQUFFLEdBQUdSLDREQUFTLEVBQUU7SUFDekcsTUFBTSxLQUFDUyxXQUFXLE1BQUVDLGNBQWMsTUFBSWYsK0NBQVEsQ0FBQyxZQUFZLENBQUM7SUFFNURELGdEQUFTLENBQUMsSUFBTTtRQUNkLElBQUdhLGVBQWUsRUFBQztZQUNqQkcsY0FBYyxDQUFDLFlBQVksQ0FBQztTQUM3QjtLQUNGLEVBQUU7UUFBQ0gsZUFBZTtLQUFDLENBQUM7SUFFckIscUJBQ0ksOERBQUNWLGtEQUFJO1FBQUNjLEdBQUcsRUFBQyxPQUFPO1FBQUNDLE1BQU0sRUFBQyxHQUFHO1FBQUNDLFNBQVMsRUFBQyxLQUFLO1FBQUNDLENBQUMsRUFBQyxNQUFNO1FBQUNDLENBQUMsRUFBQyxHQUFHO1FBQUNDLEVBQUUsRUFBRVAsV0FBVzs7MEJBQ3pFLDhEQUFDVixrREFBSTs7b0JBQUMsZ0JBQWM7b0JBQUNNLG1CQUFtQjs7Ozs7O29CQUFROzBCQUNoRCw4REFBQ1Asb0RBQU07Ozs7b0JBQUc7WUFDVFUsZ0JBQWdCOzBCQUNqQiw4REFBQ1Ysb0RBQU07Ozs7b0JBQUc7MEJBQ1YsOERBQUNHLDZEQUFhOzs7O29CQUFHOzs7Ozs7WUFDWixDQUNWO0NBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcGJsLWZyb250LWVuZC10ZW1wbGF0ZS1uZXh0anMtbWVzaC8uL2NvbXBvbmVudHMvZm9vdGVyLmpzP2IxNTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBMaW5rIGZyb20gJ25leHQvbGluaydcbmltcG9ydCB7IEZsZXgsIFNwYWNlciwgVGV4dCB9IGZyb20gJ0BjaGFrcmEtdWkvcmVhY3QnXG5pbXBvcnQgdXNlV2FsbGV0IGZyb20gJy4uL2NvbnRleHRzL3dhbGxldCdcbmltcG9ydCBDb25uZWN0V2FsbGV0IGZyb20gJy4vd2FsbGV0L2Nvbm5lY3RXYWxsZXQnO1xuaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAncXVlcnlzdHJpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBGb290ZXIoKSB7XG4gIGNvbnN0IHsgY29ubmVjdGluZywgd2FsbGV0TmFtZUNvbm5lY3RlZCwgY29ubmVjdFdhbGxldCwgd2FsbGV0Q29ubmVjdGVkLCBjb25uZWN0ZWRBZGRyZXNzIH0gPSB1c2VXYWxsZXQoKTtcbiAgY29uc3QgW2Zvb3RlckNvbG9yLCBzZXRGb290ZXJDb2xvcl0gPSB1c2VTdGF0ZSgnb3JhbmdlLjIwMCcpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZih3YWxsZXRDb25uZWN0ZWQpe1xuICAgICAgc2V0Rm9vdGVyQ29sb3IoJ3B1cnBsZS4yMDAnKVxuICAgIH1cbiAgfSwgW3dhbGxldENvbm5lY3RlZF0pXG5cbiAgcmV0dXJuIChcbiAgICAgIDxGbGV4IHBvcz1cImZpeGVkXCIgYm90dG9tPVwiMFwiIGRpcmVjdGlvbj1cInJvd1wiIHc9XCIxMDAlXCIgcD1cIjVcIiBiZz17Zm9vdGVyQ29sb3J9PlxuICAgICAgICA8VGV4dD5Db25uZWN0ZWQgdG86IHt3YWxsZXROYW1lQ29ubmVjdGVkfTwvVGV4dD5cbiAgICAgICAgPFNwYWNlciAvPlxuICAgICAgICB7Y29ubmVjdGVkQWRkcmVzc31cbiAgICAgICAgPFNwYWNlciAvPlxuICAgICAgICA8Q29ubmVjdFdhbGxldCAvPlxuICAgICAgPC9GbGV4PlxuICApXG59XG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJMaW5rIiwiRmxleCIsIlNwYWNlciIsIlRleHQiLCJ1c2VXYWxsZXQiLCJDb25uZWN0V2FsbGV0Iiwic3RyaW5naWZ5IiwiRm9vdGVyIiwiY29ubmVjdGluZyIsIndhbGxldE5hbWVDb25uZWN0ZWQiLCJjb25uZWN0V2FsbGV0Iiwid2FsbGV0Q29ubmVjdGVkIiwiY29ubmVjdGVkQWRkcmVzcyIsImZvb3RlckNvbG9yIiwic2V0Rm9vdGVyQ29sb3IiLCJwb3MiLCJib3R0b20iLCJkaXJlY3Rpb24iLCJ3IiwicCIsImJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/footer.js\n");

/***/ }),

/***/ "./components/nav.js":
/*!***************************!*\
  !*** ./components/nav.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Nav)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @chakra-ui/react */ \"@chakra-ui/react\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nfunction Nav() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__.Flex, {\n        direction: \"row\",\n        w: \"100%\",\n        p: \"5\",\n        bg: \"gray.300\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__.Spacer, {}, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n                lineNumber: 7,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_1___default()), {\n                href: \"/\",\n                children: \"Step 1: Connect your wallet\"\n            }, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n                lineNumber: 8,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__.Spacer, {}, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n                lineNumber: 9,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_1___default()), {\n                href: \"/check-token\",\n                children: \"Step 2: Check your balance\"\n            }, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n                lineNumber: 10,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__.Spacer, {}, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n                lineNumber: 11,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_1___default()), {\n                href: \"/token-holders\",\n                children: \"Step 3: Enter sender address and amount to send\"\n            }, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n                lineNumber: 12,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__.Spacer, {}, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n                lineNumber: 13,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_1___default()), {\n                href: \"/metadata-example\",\n                children: \"Step 4: Submit transaction\"\n            }, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n                lineNumber: 14,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__.Spacer, {}, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n                lineNumber: 15,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_1___default()), {\n                href: \"/transactions\",\n                children: \"Contact\"\n            }, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n                lineNumber: 16,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_2__.Spacer, {}, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n                lineNumber: 17,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/nav.js\",\n        lineNumber: 6,\n        columnNumber: 7\n    }, this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL25hdi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBNEI7QUFDbUI7QUFFaEMsU0FBU0csR0FBRyxHQUFHO0lBQzVCLHFCQUNJLDhEQUFDRixrREFBSTtRQUFDRyxTQUFTLEVBQUMsS0FBSztRQUFDQyxDQUFDLEVBQUMsTUFBTTtRQUFDQyxDQUFDLEVBQUMsR0FBRztRQUFDQyxFQUFFLEVBQUMsVUFBVTs7MEJBQ2hELDhEQUFDTCxvREFBTTs7OztvQkFBRzswQkFDViw4REFBQ0Ysa0RBQUk7Z0JBQUNRLElBQUksRUFBQyxHQUFHOzBCQUFDLDZCQUEyQjs7Ozs7b0JBQU87MEJBQ2pELDhEQUFDTixvREFBTTs7OztvQkFBRzswQkFDViw4REFBQ0Ysa0RBQUk7Z0JBQUNRLElBQUksRUFBQyxjQUFjOzBCQUFDLDRCQUEwQjs7Ozs7b0JBQU87MEJBQzNELDhEQUFDTixvREFBTTs7OztvQkFBRzswQkFDViw4REFBQ0Ysa0RBQUk7Z0JBQUNRLElBQUksRUFBQyxnQkFBZ0I7MEJBQUMsaURBQStDOzs7OztvQkFBTzswQkFDbEYsOERBQUNOLG9EQUFNOzs7O29CQUFHOzBCQUNWLDhEQUFDRixrREFBSTtnQkFBQ1EsSUFBSSxFQUFDLG1CQUFtQjswQkFBQyw0QkFBMEI7Ozs7O29CQUFPOzBCQUNoRSw4REFBQ04sb0RBQU07Ozs7b0JBQUc7MEJBQ1YsOERBQUNGLGtEQUFJO2dCQUFDUSxJQUFJLEVBQUMsZUFBZTswQkFBQyxTQUFPOzs7OztvQkFBTzswQkFDekMsOERBQUNOLG9EQUFNOzs7O29CQUFHOzs7Ozs7WUFDTCxDQUNWO0NBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcGJsLWZyb250LWVuZC10ZW1wbGF0ZS1uZXh0anMtbWVzaC8uL2NvbXBvbmVudHMvbmF2LmpzPzUzNzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJ1xuaW1wb3J0IHsgRmxleCwgU3BhY2VyIH0gZnJvbSAnQGNoYWtyYS11aS9yZWFjdCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmF2KCkge1xuICByZXR1cm4gKFxuICAgICAgPEZsZXggZGlyZWN0aW9uPVwicm93XCIgdz1cIjEwMCVcIiBwPVwiNVwiIGJnPVwiZ3JheS4zMDBcIj5cbiAgICAgICAgPFNwYWNlciAvPlxuICAgICAgICA8TGluayBocmVmPVwiL1wiPlN0ZXAgMTogQ29ubmVjdCB5b3VyIHdhbGxldDwvTGluaz5cbiAgICAgICAgPFNwYWNlciAvPlxuICAgICAgICA8TGluayBocmVmPVwiL2NoZWNrLXRva2VuXCI+U3RlcCAyOiBDaGVjayB5b3VyIGJhbGFuY2U8L0xpbms+XG4gICAgICAgIDxTcGFjZXIgLz5cbiAgICAgICAgPExpbmsgaHJlZj1cIi90b2tlbi1ob2xkZXJzXCI+U3RlcCAzOiBFbnRlciBzZW5kZXIgYWRkcmVzcyBhbmQgYW1vdW50IHRvIHNlbmQ8L0xpbms+XG4gICAgICAgIDxTcGFjZXIgLz5cbiAgICAgICAgPExpbmsgaHJlZj1cIi9tZXRhZGF0YS1leGFtcGxlXCI+U3RlcCA0OiBTdWJtaXQgdHJhbnNhY3Rpb248L0xpbms+XG4gICAgICAgIDxTcGFjZXIgLz5cbiAgICAgICAgPExpbmsgaHJlZj1cIi90cmFuc2FjdGlvbnNcIj5Db250YWN0PC9MaW5rPlxuICAgICAgICA8U3BhY2VyIC8+XG4gICAgICA8L0ZsZXg+XG4gIClcbn0iXSwibmFtZXMiOlsiTGluayIsIkZsZXgiLCJTcGFjZXIiLCJOYXYiLCJkaXJlY3Rpb24iLCJ3IiwicCIsImJnIiwiaHJlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/nav.js\n");

/***/ }),

/***/ "./components/wallet/connectWallet.tsx":
/*!*********************************************!*\
  !*** ./components/wallet/connectWallet.tsx ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ConnectWallet)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @martifylabs/mesh */ \"./node_modules/@martifylabs/mesh/dist/mesh.esm.js\");\n/* harmony import */ var _contexts_wallet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../contexts/wallet */ \"./contexts/wallet.tsx\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @chakra-ui/react */ \"@chakra-ui/react\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__, _contexts_wallet__WEBPACK_IMPORTED_MODULE_3__]);\n([_martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__, _contexts_wallet__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\nfunction ConnectWallet() {\n    const { connecting , walletNameConnected , connectWallet , walletConnected  } = (0,_contexts_wallet__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n    const { 0: availableWallets , 1: setAvailableWallets  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        async function init() {\n            setAvailableWallets(_martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__.WalletService.getInstalledWallets());\n        }\n        init();\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: availableWallets ? availableWallets.length == 0 ? \"No wallets found\" : availableWallets.map((wallet, i)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Button, {\n                px: \"5\",\n                mx: \"5\",\n                onClick: ()=>connectWallet(wallet.name),\n                colorScheme: \"purple\",\n                children: [\n                    \"Connect with \",\n                    wallet.name\n                ]\n            }, i, true, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/wallet/connectWallet.tsx\",\n                lineNumber: 25,\n                columnNumber: 25\n            }, this)) : \"\"\n    }, void 0, false);\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3dhbGxldC9jb25uZWN0V2FsbGV0LnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUE0QztBQUVNO0FBQ0o7QUFFSjtBQUUzQixTQUFTSyxhQUFhLEdBQUc7SUFDcEMsTUFBTSxFQUFFQyxVQUFVLEdBQUVDLG1CQUFtQixHQUFFQyxhQUFhLEdBQUVDLGVBQWUsR0FBRSxHQUFHTiw0REFBUyxFQUFFO0lBQ3ZGLE1BQU0sS0FBQ08sZ0JBQWdCLE1BQUVDLG1CQUFtQixNQUFJViwrQ0FBUSxDQUF1QlcsU0FBUyxDQUFDO0lBRXpGWixnREFBUyxDQUFDLElBQU07UUFDWixlQUFlYSxJQUFJLEdBQUc7WUFDbEJGLG1CQUFtQixDQUFDVCxnRkFBaUMsRUFBRSxDQUFDLENBQUM7U0FDNUQ7UUFDRFcsSUFBSSxFQUFFLENBQUM7S0FDVixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAscUJBQ0k7a0JBQ0tILGdCQUFnQixHQUNYQSxnQkFBZ0IsQ0FBQ0ssTUFBTSxJQUFJLENBQUMsR0FDeEIsa0JBQWtCLEdBQ2xCTCxnQkFBZ0IsQ0FBQ00sR0FBRyxDQUFDLENBQUNDLE1BQU0sRUFBRUMsQ0FBQyxpQkFDN0IsOERBQUNkLG9EQUFNO2dCQUFTZSxFQUFFLEVBQUMsR0FBRztnQkFBQ0MsRUFBRSxFQUFDLEdBQUc7Z0JBQUNDLE9BQU8sRUFBRSxJQUFNYixhQUFhLENBQUNTLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDO2dCQUFFQyxXQUFXLEVBQUMsUUFBUTs7b0JBQUMsZUFDN0U7b0JBQUNOLE1BQU0sQ0FBQ0ssSUFBSTs7ZUFEaEJKLENBQUM7Ozs7b0JBRUwsQ0FDWCxHQUNKLEVBQUU7cUJBQ1QsQ0FDTDtDQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHBibC1mcm9udC1lbmQtdGVtcGxhdGUtbmV4dGpzLW1lc2gvLi9jb21wb25lbnRzL3dhbGxldC9jb25uZWN0V2FsbGV0LnRzeD8xMDE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IFdhbGxldCB9IGZyb20gJ0BtYXJ0aWZ5bGFicy9tZXNoJztcbmltcG9ydCB7IFdhbGxldFNlcnZpY2UgfSBmcm9tICdAbWFydGlmeWxhYnMvbWVzaCc7XG5pbXBvcnQgdXNlV2FsbGV0IGZyb20gJy4uLy4uL2NvbnRleHRzL3dhbGxldCc7XG5cbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ0BjaGFrcmEtdWkvcmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb25uZWN0V2FsbGV0KCkge1xuICAgIGNvbnN0IHsgY29ubmVjdGluZywgd2FsbGV0TmFtZUNvbm5lY3RlZCwgY29ubmVjdFdhbGxldCwgd2FsbGV0Q29ubmVjdGVkIH0gPSB1c2VXYWxsZXQoKTtcbiAgICBjb25zdCBbYXZhaWxhYmxlV2FsbGV0cywgc2V0QXZhaWxhYmxlV2FsbGV0c10gPSB1c2VTdGF0ZTxXYWxsZXRbXSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgICBzZXRBdmFpbGFibGVXYWxsZXRzKFdhbGxldFNlcnZpY2UuZ2V0SW5zdGFsbGVkV2FsbGV0cygpKTtcbiAgICAgICAgfVxuICAgICAgICBpbml0KCk7XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIHthdmFpbGFibGVXYWxsZXRzXG4gICAgICAgICAgICAgICAgPyBhdmFpbGFibGVXYWxsZXRzLmxlbmd0aCA9PSAwXG4gICAgICAgICAgICAgICAgICAgID8gJ05vIHdhbGxldHMgZm91bmQnXG4gICAgICAgICAgICAgICAgICAgIDogYXZhaWxhYmxlV2FsbGV0cy5tYXAoKHdhbGxldCwgaSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBrZXk9e2l9IHB4PSc1JyBteD0nNScgb25DbGljaz17KCkgPT4gY29ubmVjdFdhbGxldCh3YWxsZXQubmFtZSl9IGNvbG9yU2NoZW1lPSdwdXJwbGUnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbm5lY3Qgd2l0aCB7d2FsbGV0Lm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICA6ICcnfVxuICAgICAgICA8Lz5cbiAgICApO1xufSJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsIldhbGxldFNlcnZpY2UiLCJ1c2VXYWxsZXQiLCJCdXR0b24iLCJDb25uZWN0V2FsbGV0IiwiY29ubmVjdGluZyIsIndhbGxldE5hbWVDb25uZWN0ZWQiLCJjb25uZWN0V2FsbGV0Iiwid2FsbGV0Q29ubmVjdGVkIiwiYXZhaWxhYmxlV2FsbGV0cyIsInNldEF2YWlsYWJsZVdhbGxldHMiLCJ1bmRlZmluZWQiLCJpbml0IiwiZ2V0SW5zdGFsbGVkV2FsbGV0cyIsImxlbmd0aCIsIm1hcCIsIndhbGxldCIsImkiLCJweCIsIm14Iiwib25DbGljayIsIm5hbWUiLCJjb2xvclNjaGVtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/wallet/connectWallet.tsx\n");

/***/ }),

/***/ "./contexts/wallet.tsx":
/*!*****************************!*\
  !*** ./contexts/wallet.tsx ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WalletProvider\": () => (/* binding */ WalletProvider),\n/* harmony export */   \"default\": () => (/* binding */ useWallet)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @martifylabs/mesh */ \"./node_modules/@martifylabs/mesh/dist/mesh.esm.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__]);\n_martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst WalletContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    wallet: {},\n    connecting: false,\n    walletNameConnected: \"\",\n    walletConnected: false,\n    connectWallet: async (walletName)=>{}\n});\nconst WalletProvider = ({ children  })=>{\n    const { 0: wallet , 1: setWallet  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const { 0: walletConnected , 1: setWalletConnected  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { 0: connecting , 1: setConnecting  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { 0: walletNameConnected , 1: setWalletNameConnected  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const connectWallet = async (walletName)=>{\n        setConnecting(true);\n        const _wallet = await _martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__.WalletService.enable(walletName);\n        if (_wallet) {\n            setWallet(_wallet);\n            setWalletNameConnected(walletName);\n            setWalletConnected(true);\n        }\n        setConnecting(false);\n    };\n    const memoedValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            wallet,\n            connecting,\n            walletNameConnected,\n            walletConnected,\n            connectWallet\n        }), [\n        wallet,\n        walletConnected,\n        connecting,\n        walletNameConnected\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(WalletContext.Provider, {\n        value: memoedValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/contexts/wallet.tsx\",\n        lineNumber: 49,\n        columnNumber: 5\n    }, undefined);\n};\nfunction useWallet() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(WalletContext);\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb250ZXh0cy93YWxsZXQudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQU1lO0FBRW1DO0FBR2xELE1BQU1NLGFBQWEsaUJBQUdMLG9EQUFhLENBQUM7SUFDbENNLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLFVBQVUsRUFBRSxLQUFLO0lBQ2pCQyxtQkFBbUIsRUFBRSxFQUFFO0lBQ3ZCQyxlQUFlLEVBQUUsS0FBSztJQUN0QkMsYUFBYSxFQUFFLE9BQU9DLFVBQWtCLEdBQUssRUFBRTtDQUNoRCxDQUFDO0FBRUssTUFBTUMsY0FBYyxHQUFHLENBQUMsRUFBRUMsUUFBUSxHQUEwQixHQUFLO0lBQ3RFLE1BQU0sS0FBQ1AsTUFBTSxNQUFFUSxTQUFTLE1BQUliLCtDQUFRLENBQWdCLEVBQUUsQ0FBa0I7SUFDeEUsTUFBTSxLQUFDUSxlQUFlLE1BQUVNLGtCQUFrQixNQUFJZCwrQ0FBUSxDQUFVLEtBQUssQ0FBQztJQUN0RSxNQUFNLEtBQUNNLFVBQVUsTUFBRVMsYUFBYSxNQUFJZiwrQ0FBUSxDQUFVLEtBQUssQ0FBQztJQUM1RCxNQUFNLEtBQUNPLG1CQUFtQixNQUFFUyxzQkFBc0IsTUFBSWhCLCtDQUFRLENBQVMsRUFBRSxDQUFDO0lBRTFFLE1BQU1TLGFBQWEsR0FBRyxPQUFPQyxVQUFrQixHQUFLO1FBQ2xESyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsTUFBTUUsT0FBTyxHQUFHLE1BQU1kLG1FQUFvQixDQUFDTyxVQUFVLENBQUM7UUFDdEQsSUFBSU8sT0FBTyxFQUFFO1lBQ1hKLFNBQVMsQ0FBQ0ksT0FBTyxDQUFDLENBQUM7WUFDbkJELHNCQUFzQixDQUFDTixVQUFVLENBQUMsQ0FBQztZQUNuQ0ksa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUI7UUFDREMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RCO0lBRUQsTUFBTUksV0FBVyxHQUFHakIsOENBQU8sQ0FDekIsSUFBTSxDQUFDO1lBQ0xHLE1BQU07WUFDTkMsVUFBVTtZQUNWQyxtQkFBbUI7WUFDbkJDLGVBQWU7WUFDZkMsYUFBYTtTQUNkLENBQUMsRUFDRjtRQUFDSixNQUFNO1FBQUVHLGVBQWU7UUFBRUYsVUFBVTtRQUFFQyxtQkFBbUI7S0FBQyxDQUMzRDtJQUVELHFCQUNFLDhEQUFDSCxhQUFhLENBQUNnQixRQUFRO1FBQUNDLEtBQUssRUFBRUYsV0FBVztrQkFDdkNQLFFBQVE7Ozs7O2lCQUNjLENBQ3pCO0NBQ0gsQ0FBQztBQUVhLFNBQVNVLFNBQVMsR0FBRztJQUNsQyxPQUFPckIsaURBQVUsQ0FBQ0csYUFBYSxDQUFDLENBQUM7Q0FDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcGJsLWZyb250LWVuZC10ZW1wbGF0ZS1uZXh0anMtbWVzaC8uL2NvbnRleHRzL3dhbGxldC50c3g/MWU3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtcbiAgY3JlYXRlQ29udGV4dCxcbiAgdXNlU3RhdGUsXG4gIHVzZUNvbnRleHQsXG4gIHVzZU1lbW8sXG4gIFJlYWN0Tm9kZSxcbn0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IFdhbGxldFNlcnZpY2UgfSBmcm9tIFwiQG1hcnRpZnlsYWJzL21lc2hcIjtcblxuXG5jb25zdCBXYWxsZXRDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7XG4gIHdhbGxldDoge30gYXMgV2FsbGV0U2VydmljZSxcbiAgY29ubmVjdGluZzogZmFsc2UsXG4gIHdhbGxldE5hbWVDb25uZWN0ZWQ6ICcnLFxuICB3YWxsZXRDb25uZWN0ZWQ6IGZhbHNlLFxuICBjb25uZWN0V2FsbGV0OiBhc3luYyAod2FsbGV0TmFtZTogc3RyaW5nKSA9PiB7fSxcbn0pO1xuXG5leHBvcnQgY29uc3QgV2FsbGV0UHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9OiB7Y2hpbGRyZW46IFJlYWN0Tm9kZSB9KSA9PiB7XG4gIGNvbnN0IFt3YWxsZXQsIHNldFdhbGxldF0gPSB1c2VTdGF0ZTxXYWxsZXRTZXJ2aWNlPih7fSBhcyBXYWxsZXRTZXJ2aWNlKTtcbiAgY29uc3QgW3dhbGxldENvbm5lY3RlZCwgc2V0V2FsbGV0Q29ubmVjdGVkXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW2Nvbm5lY3RpbmcsIHNldENvbm5lY3RpbmddID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCBbd2FsbGV0TmFtZUNvbm5lY3RlZCwgc2V0V2FsbGV0TmFtZUNvbm5lY3RlZF0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcblxuICBjb25zdCBjb25uZWN0V2FsbGV0ID0gYXN5bmMgKHdhbGxldE5hbWU6IHN0cmluZykgPT4ge1xuICAgIHNldENvbm5lY3RpbmcodHJ1ZSk7XG4gICAgY29uc3QgX3dhbGxldCA9IGF3YWl0IFdhbGxldFNlcnZpY2UuZW5hYmxlKHdhbGxldE5hbWUpO1xuICAgIGlmIChfd2FsbGV0KSB7XG4gICAgICBzZXRXYWxsZXQoX3dhbGxldCk7XG4gICAgICBzZXRXYWxsZXROYW1lQ29ubmVjdGVkKHdhbGxldE5hbWUpO1xuICAgICAgc2V0V2FsbGV0Q29ubmVjdGVkKHRydWUpO1xuICAgIH1cbiAgICBzZXRDb25uZWN0aW5nKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBtZW1vZWRWYWx1ZSA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIHdhbGxldCxcbiAgICAgIGNvbm5lY3RpbmcsXG4gICAgICB3YWxsZXROYW1lQ29ubmVjdGVkLFxuICAgICAgd2FsbGV0Q29ubmVjdGVkLFxuICAgICAgY29ubmVjdFdhbGxldCxcbiAgICB9KSxcbiAgICBbd2FsbGV0LCB3YWxsZXRDb25uZWN0ZWQsIGNvbm5lY3RpbmcsIHdhbGxldE5hbWVDb25uZWN0ZWRdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8V2FsbGV0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bWVtb2VkVmFsdWV9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvV2FsbGV0Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVdhbGxldCgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoV2FsbGV0Q29udGV4dCk7XG59Il0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZVN0YXRlIiwidXNlQ29udGV4dCIsInVzZU1lbW8iLCJXYWxsZXRTZXJ2aWNlIiwiV2FsbGV0Q29udGV4dCIsIndhbGxldCIsImNvbm5lY3RpbmciLCJ3YWxsZXROYW1lQ29ubmVjdGVkIiwid2FsbGV0Q29ubmVjdGVkIiwiY29ubmVjdFdhbGxldCIsIndhbGxldE5hbWUiLCJXYWxsZXRQcm92aWRlciIsImNoaWxkcmVuIiwic2V0V2FsbGV0Iiwic2V0V2FsbGV0Q29ubmVjdGVkIiwic2V0Q29ubmVjdGluZyIsInNldFdhbGxldE5hbWVDb25uZWN0ZWQiLCJfd2FsbGV0IiwiZW5hYmxlIiwibWVtb2VkVmFsdWUiLCJQcm92aWRlciIsInZhbHVlIiwidXNlV2FsbGV0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./contexts/wallet.tsx\n");

/***/ }),

/***/ "./node_modules/next/dist/client/add-base-path.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/client/add-base-path.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.addBasePath = addBasePath;\nvar _addPathPrefix = __webpack_require__(/*! ../shared/lib/router/utils/add-path-prefix */ \"../shared/lib/router/utils/add-path-prefix\");\nvar _normalizeTrailingSlash = __webpack_require__(/*! ./normalize-trailing-slash */ \"./node_modules/next/dist/client/normalize-trailing-slash.js\");\nconst basePath =  false || \"\";\nfunction addBasePath(path, required) {\n    if (false) {}\n    return (0, _normalizeTrailingSlash).normalizePathTrailingSlash((0, _addPathPrefix).addPathPrefix(path, basePath));\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=add-base-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9hZGQtYmFzZS1wYXRoLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csS0FBSyxFQUFFLElBQUk7Q0FDZCxFQUFDLENBQUM7QUFDSEQsbUJBQW1CLEdBQUdFLFdBQVcsQ0FBQztBQUNsQyxJQUFJQyxjQUFjLEdBQUdDLG1CQUFPLENBQUMsOEZBQTRDLENBQUM7QUFDMUUsSUFBSUMsdUJBQXVCLEdBQUdELG1CQUFPLENBQUMsK0ZBQTRCLENBQUM7QUFDbkUsTUFBTUUsUUFBUSxHQUFHQyxNQUFrQyxJQUFJLEVBQUU7QUFDekQsU0FBU0wsV0FBVyxDQUFDUSxJQUFJLEVBQUVDLFFBQVEsRUFBRTtJQUNqQyxJQUFJSixLQUEwQyxFQUFFLEVBSS9DO0lBQ0QsT0FBTyxDQUFDLENBQUMsRUFBRUYsdUJBQXVCLENBQUMsQ0FBQ1EsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLEVBQUVWLGNBQWMsQ0FBQyxDQUFDVyxhQUFhLENBQUNKLElBQUksRUFBRUosUUFBUSxDQUFDLENBQUMsQ0FBQztDQUNySDtBQUVELElBQUksQ0FBQyxPQUFPTixPQUFPLENBQUNlLE9BQU8sS0FBSyxVQUFVLElBQUssT0FBT2YsT0FBTyxDQUFDZSxPQUFPLEtBQUssUUFBUSxJQUFJZixPQUFPLENBQUNlLE9BQU8sS0FBSyxJQUFJLENBQUUsSUFBSSxPQUFPZixPQUFPLENBQUNlLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLFdBQVcsRUFBRTtJQUNyS2xCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLENBQUNlLE9BQU8sRUFBRSxZQUFZLEVBQUU7UUFBRWQsS0FBSyxFQUFFLElBQUk7S0FBRSxDQUFDLENBQUM7SUFDdEVILE1BQU0sQ0FBQ21CLE1BQU0sQ0FBQ2pCLE9BQU8sQ0FBQ2UsT0FBTyxFQUFFZixPQUFPLENBQUMsQ0FBQztJQUN4Q2tCLE1BQU0sQ0FBQ2xCLE9BQU8sR0FBR0EsT0FBTyxDQUFDZSxPQUFPLENBQUM7Q0FDbEMsQ0FFRCx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcGJsLWZyb250LWVuZC10ZW1wbGF0ZS1uZXh0anMtbWVzaC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2FkZC1iYXNlLXBhdGguanM/NjEzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYWRkQmFzZVBhdGggPSBhZGRCYXNlUGF0aDtcbnZhciBfYWRkUGF0aFByZWZpeCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtcGF0aC1wcmVmaXhcIik7XG52YXIgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2ggPSByZXF1aXJlKFwiLi9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2hcIik7XG5jb25zdCBiYXNlUGF0aCA9IHByb2Nlc3MuZW52Ll9fTkVYVF9ST1VURVJfQkFTRVBBVEggfHwgJyc7XG5mdW5jdGlvbiBhZGRCYXNlUGF0aChwYXRoLCByZXF1aXJlZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfTUFOVUFMX0NMSUVOVF9CQVNFX1BBVEgpIHtcbiAgICAgICAgaWYgKCFyZXF1aXJlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICgwLCBfbm9ybWFsaXplVHJhaWxpbmdTbGFzaCkubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2goKDAsIF9hZGRQYXRoUHJlZml4KS5hZGRQYXRoUHJlZml4KHBhdGgsIGJhc2VQYXRoKSk7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZC1iYXNlLXBhdGguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYWRkQmFzZVBhdGgiLCJfYWRkUGF0aFByZWZpeCIsInJlcXVpcmUiLCJfbm9ybWFsaXplVHJhaWxpbmdTbGFzaCIsImJhc2VQYXRoIiwicHJvY2VzcyIsImVudiIsIl9fTkVYVF9ST1VURVJfQkFTRVBBVEgiLCJwYXRoIiwicmVxdWlyZWQiLCJfX05FWFRfTUFOVUFMX0NMSUVOVF9CQVNFX1BBVEgiLCJub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCIsImFkZFBhdGhQcmVmaXgiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/add-base-path.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/add-locale.js":
/*!*****************************************************!*\
  !*** ./node_modules/next/dist/client/add-locale.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.addLocale = void 0;\nvar _normalizeTrailingSlash = __webpack_require__(/*! ./normalize-trailing-slash */ \"./node_modules/next/dist/client/normalize-trailing-slash.js\");\nconst addLocale = (path, ...args)=>{\n    if (false) {}\n    return path;\n};\nexports.addLocale = addLocale;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=add-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9hZGQtbG9jYWxlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csS0FBSyxFQUFFLElBQUk7Q0FDZCxFQUFDLENBQUM7QUFDSEQsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDM0IsSUFBSUcsdUJBQXVCLEdBQUdDLG1CQUFPLENBQUMsK0ZBQTRCLENBQUM7QUFDbkUsTUFBTUYsU0FBUyxHQUFHLENBQUNHLElBQUksRUFBS0MsR0FBQUEsSUFBSSxHQUFHO0lBQy9CLElBQUlDLEtBQStCLEVBQUUsRUFFcEM7SUFDRCxPQUFPRixJQUFJLENBQUM7Q0FDZjtBQUNETCxpQkFBaUIsR0FBR0UsU0FBUyxDQUFDO0FBRTlCLElBQUksQ0FBQyxPQUFPRixPQUFPLENBQUNXLE9BQU8sS0FBSyxVQUFVLElBQUssT0FBT1gsT0FBTyxDQUFDVyxPQUFPLEtBQUssUUFBUSxJQUFJWCxPQUFPLENBQUNXLE9BQU8sS0FBSyxJQUFJLENBQUUsSUFBSSxPQUFPWCxPQUFPLENBQUNXLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLFdBQVcsRUFBRTtJQUNyS2QsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sQ0FBQ1csT0FBTyxFQUFFLFlBQVksRUFBRTtRQUFFVixLQUFLLEVBQUUsSUFBSTtLQUFFLENBQUMsQ0FBQztJQUN0RUgsTUFBTSxDQUFDZSxNQUFNLENBQUNiLE9BQU8sQ0FBQ1csT0FBTyxFQUFFWCxPQUFPLENBQUMsQ0FBQztJQUN4Q2MsTUFBTSxDQUFDZCxPQUFPLEdBQUdBLE9BQU8sQ0FBQ1csT0FBTyxDQUFDO0NBQ2xDLENBRUQsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHBibC1mcm9udC1lbmQtdGVtcGxhdGUtbmV4dGpzLW1lc2gvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9hZGQtbG9jYWxlLmpzP2UyZDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFkZExvY2FsZSA9IHZvaWQgMDtcbnZhciBfbm9ybWFsaXplVHJhaWxpbmdTbGFzaCA9IHJlcXVpcmUoXCIuL25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaFwiKTtcbmNvbnN0IGFkZExvY2FsZSA9IChwYXRoLCAuLi5hcmdzKT0+e1xuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgIHJldHVybiAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoKHJlcXVpcmUoJy4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1sb2NhbGUnKS5hZGRMb2NhbGUocGF0aCwgLi4uYXJncykpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbn07XG5leHBvcnRzLmFkZExvY2FsZSA9IGFkZExvY2FsZTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLWxvY2FsZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhZGRMb2NhbGUiLCJfbm9ybWFsaXplVHJhaWxpbmdTbGFzaCIsInJlcXVpcmUiLCJwYXRoIiwiYXJncyIsInByb2Nlc3MiLCJlbnYiLCJfX05FWFRfSTE4Tl9TVVBQT1JUIiwibm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2giLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/add-locale.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/detect-domain-locale.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/client/detect-domain-locale.js ***!
  \***************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.detectDomainLocale = void 0;\nconst detectDomainLocale = (...args)=>{\n    if (false) {}\n};\nexports.detectDomainLocale = detectDomainLocale;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=detect-domain-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXRlY3QtZG9tYWluLWxvY2FsZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLEtBQUssRUFBRSxJQUFJO0NBQ2QsRUFBQyxDQUFDO0FBQ0hELDBCQUEwQixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLE1BQU1FLGtCQUFrQixHQUFHLENBQUlDLEdBQUFBLElBQUksR0FBRztJQUNsQyxJQUFJQyxLQUErQixFQUFFLEVBRXBDO0NBQ0o7QUFDREosMEJBQTBCLEdBQUdFLGtCQUFrQixDQUFDO0FBRWhELElBQUksQ0FBQyxPQUFPRixPQUFPLENBQUNRLE9BQU8sS0FBSyxVQUFVLElBQUssT0FBT1IsT0FBTyxDQUFDUSxPQUFPLEtBQUssUUFBUSxJQUFJUixPQUFPLENBQUNRLE9BQU8sS0FBSyxJQUFJLENBQUUsSUFBSSxPQUFPUixPQUFPLENBQUNRLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLFdBQVcsRUFBRTtJQUNyS1gsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sQ0FBQ1EsT0FBTyxFQUFFLFlBQVksRUFBRTtRQUFFUCxLQUFLLEVBQUUsSUFBSTtLQUFFLENBQUMsQ0FBQztJQUN0RUgsTUFBTSxDQUFDWSxNQUFNLENBQUNWLE9BQU8sQ0FBQ1EsT0FBTyxFQUFFUixPQUFPLENBQUMsQ0FBQztJQUN4Q1csTUFBTSxDQUFDWCxPQUFPLEdBQUdBLE9BQU8sQ0FBQ1EsT0FBTyxDQUFDO0NBQ2xDLENBRUQsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHBibC1mcm9udC1lbmQtdGVtcGxhdGUtbmV4dGpzLW1lc2gvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXRlY3QtZG9tYWluLWxvY2FsZS5qcz8wM2I1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZXRlY3REb21haW5Mb2NhbGUgPSB2b2lkIDA7XG5jb25zdCBkZXRlY3REb21haW5Mb2NhbGUgPSAoLi4uYXJncyk9PntcbiAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZSgnLi4vc2hhcmVkL2xpYi9pMThuL2RldGVjdC1kb21haW4tbG9jYWxlJykuZGV0ZWN0RG9tYWluTG9jYWxlKC4uLmFyZ3MpO1xuICAgIH1cbn07XG5leHBvcnRzLmRldGVjdERvbWFpbkxvY2FsZSA9IGRldGVjdERvbWFpbkxvY2FsZTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGV0ZWN0LWRvbWFpbi1sb2NhbGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGV0ZWN0RG9tYWluTG9jYWxlIiwiYXJncyIsInByb2Nlc3MiLCJlbnYiLCJfX05FWFRfSTE4Tl9TVVBQT1JUIiwicmVxdWlyZSIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/detect-domain-locale.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/get-domain-locale.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/client/get-domain-locale.js ***!
  \************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getDomainLocale = getDomainLocale;\nconst basePath =  false || \"\";\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n    if (false) {} else {\n        return false;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=get-domain-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9nZXQtZG9tYWluLWxvY2FsZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLEtBQUssRUFBRSxJQUFJO0NBQ2QsRUFBQyxDQUFDO0FBQ0hELHVCQUF1QixHQUFHRSxlQUFlLENBQUM7QUFDMUMsTUFBTUMsUUFBUSxHQUFHQyxNQUFrQyxJQUFJLEVBQUU7QUFDekQsU0FBU0YsZUFBZSxDQUFDSyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxhQUFhLEVBQUU7SUFDM0QsSUFBSU4sS0FBK0IsRUFBRSxFQVdwQyxNQUFNO1FBQ0gsT0FBTyxLQUFLLENBQUM7S0FDaEI7Q0FDSjtBQUVELElBQUksQ0FBQyxPQUFPSixPQUFPLENBQUN1QixPQUFPLEtBQUssVUFBVSxJQUFLLE9BQU92QixPQUFPLENBQUN1QixPQUFPLEtBQUssUUFBUSxJQUFJdkIsT0FBTyxDQUFDdUIsT0FBTyxLQUFLLElBQUksQ0FBRSxJQUFJLE9BQU92QixPQUFPLENBQUN1QixPQUFPLENBQUNDLFVBQVUsS0FBSyxXQUFXLEVBQUU7SUFDcksxQixNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxDQUFDdUIsT0FBTyxFQUFFLFlBQVksRUFBRTtRQUFFdEIsS0FBSyxFQUFFLElBQUk7S0FBRSxDQUFDLENBQUM7SUFDdEVILE1BQU0sQ0FBQzJCLE1BQU0sQ0FBQ3pCLE9BQU8sQ0FBQ3VCLE9BQU8sRUFBRXZCLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDMEIsTUFBTSxDQUFDMUIsT0FBTyxHQUFHQSxPQUFPLENBQUN1QixPQUFPLENBQUM7Q0FDbEMsQ0FFRCw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcGJsLWZyb250LWVuZC10ZW1wbGF0ZS1uZXh0anMtbWVzaC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2dldC1kb21haW4tbG9jYWxlLmpzPzVjMjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldERvbWFpbkxvY2FsZSA9IGdldERvbWFpbkxvY2FsZTtcbmNvbnN0IGJhc2VQYXRoID0gcHJvY2Vzcy5lbnYuX19ORVhUX1JPVVRFUl9CQVNFUEFUSCB8fCAnJztcbmZ1bmN0aW9uIGdldERvbWFpbkxvY2FsZShwYXRoLCBsb2NhbGUsIGxvY2FsZXMsIGRvbWFpbkxvY2FsZXMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICBjb25zdCBub3JtYWxpemVMb2NhbGVQYXRoID0gcmVxdWlyZSgnLi9ub3JtYWxpemUtbG9jYWxlLXBhdGgnKS5ub3JtYWxpemVMb2NhbGVQYXRoO1xuICAgICAgICBjb25zdCBkZXRlY3REb21haW5Mb2NhbGUgPSByZXF1aXJlKCcuL2RldGVjdC1kb21haW4tbG9jYWxlJykuZGV0ZWN0RG9tYWluTG9jYWxlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBsb2NhbGUgfHwgbm9ybWFsaXplTG9jYWxlUGF0aChwYXRoLCBsb2NhbGVzKS5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgY29uc3QgZG9tYWluID0gZGV0ZWN0RG9tYWluTG9jYWxlKGRvbWFpbkxvY2FsZXMsIHVuZGVmaW5lZCwgdGFyZ2V0KTtcbiAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgY29uc3QgcHJvdG8gPSBgaHR0cCR7ZG9tYWluLmh0dHAgPyAnJyA6ICdzJ306Ly9gO1xuICAgICAgICAgICAgY29uc3QgZmluYWxMb2NhbGUgPSB0YXJnZXQgPT09IGRvbWFpbi5kZWZhdWx0TG9jYWxlID8gJycgOiBgLyR7dGFyZ2V0fWA7XG4gICAgICAgICAgICByZXR1cm4gYCR7cHJvdG99JHtkb21haW4uZG9tYWlufSR7YmFzZVBhdGh9JHtmaW5hbExvY2FsZX0ke3BhdGh9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0LWRvbWFpbi1sb2NhbGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0RG9tYWluTG9jYWxlIiwiYmFzZVBhdGgiLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX1JPVVRFUl9CQVNFUEFUSCIsInBhdGgiLCJsb2NhbGUiLCJsb2NhbGVzIiwiZG9tYWluTG9jYWxlcyIsIl9fTkVYVF9JMThOX1NVUFBPUlQiLCJub3JtYWxpemVMb2NhbGVQYXRoIiwicmVxdWlyZSIsImRldGVjdERvbWFpbkxvY2FsZSIsInRhcmdldCIsImRldGVjdGVkTG9jYWxlIiwiZG9tYWluIiwidW5kZWZpbmVkIiwicHJvdG8iLCJodHRwIiwiZmluYWxMb2NhbGUiLCJkZWZhdWx0TG9jYWxlIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/get-domain-locale.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/has-base-path.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/client/has-base-path.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hasBasePath = hasBasePath;\nvar _pathHasPrefix = __webpack_require__(/*! ../shared/lib/router/utils/path-has-prefix */ \"../shared/lib/router/utils/path-has-prefix\");\nconst basePath =  false || \"\";\nfunction hasBasePath(path) {\n    return (0, _pathHasPrefix).pathHasPrefix(path, basePath);\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=has-base-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9oYXMtYmFzZS1wYXRoLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csS0FBSyxFQUFFLElBQUk7Q0FDZCxFQUFDLENBQUM7QUFDSEQsbUJBQW1CLEdBQUdFLFdBQVcsQ0FBQztBQUNsQyxJQUFJQyxjQUFjLEdBQUdDLG1CQUFPLENBQUMsOEZBQTRDLENBQUM7QUFDMUUsTUFBTUMsUUFBUSxHQUFHQyxNQUFrQyxJQUFJLEVBQUU7QUFDekQsU0FBU0osV0FBVyxDQUFDTyxJQUFJLEVBQUU7SUFDdkIsT0FBTyxDQUFDLENBQUMsRUFBRU4sY0FBYyxDQUFDLENBQUNPLGFBQWEsQ0FBQ0QsSUFBSSxFQUFFSixRQUFRLENBQUMsQ0FBQztDQUM1RDtBQUVELElBQUksQ0FBQyxPQUFPTCxPQUFPLENBQUNXLE9BQU8sS0FBSyxVQUFVLElBQUssT0FBT1gsT0FBTyxDQUFDVyxPQUFPLEtBQUssUUFBUSxJQUFJWCxPQUFPLENBQUNXLE9BQU8sS0FBSyxJQUFJLENBQUUsSUFBSSxPQUFPWCxPQUFPLENBQUNXLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLFdBQVcsRUFBRTtJQUNyS2QsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sQ0FBQ1csT0FBTyxFQUFFLFlBQVksRUFBRTtRQUFFVixLQUFLLEVBQUUsSUFBSTtLQUFFLENBQUMsQ0FBQztJQUN0RUgsTUFBTSxDQUFDZSxNQUFNLENBQUNiLE9BQU8sQ0FBQ1csT0FBTyxFQUFFWCxPQUFPLENBQUMsQ0FBQztJQUN4Q2MsTUFBTSxDQUFDZCxPQUFPLEdBQUdBLE9BQU8sQ0FBQ1csT0FBTyxDQUFDO0NBQ2xDLENBRUQseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHBibC1mcm9udC1lbmQtdGVtcGxhdGUtbmV4dGpzLW1lc2gvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9oYXMtYmFzZS1wYXRoLmpzPzVhNDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmhhc0Jhc2VQYXRoID0gaGFzQmFzZVBhdGg7XG52YXIgX3BhdGhIYXNQcmVmaXggPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcGF0aC1oYXMtcHJlZml4XCIpO1xuY29uc3QgYmFzZVBhdGggPSBwcm9jZXNzLmVudi5fX05FWFRfUk9VVEVSX0JBU0VQQVRIIHx8ICcnO1xuZnVuY3Rpb24gaGFzQmFzZVBhdGgocGF0aCkge1xuICAgIHJldHVybiAoMCwgX3BhdGhIYXNQcmVmaXgpLnBhdGhIYXNQcmVmaXgocGF0aCwgYmFzZVBhdGgpO1xufVxuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXMtYmFzZS1wYXRoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImhhc0Jhc2VQYXRoIiwiX3BhdGhIYXNQcmVmaXgiLCJyZXF1aXJlIiwiYmFzZVBhdGgiLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX1JPVVRFUl9CQVNFUEFUSCIsInBhdGgiLCJwYXRoSGFzUHJlZml4IiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/has-base-path.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/head-manager.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/head-manager.js ***!
  \*******************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = initHeadManager;\nexports.isEqualNode = isEqualNode;\nexports.DOMAttributeNames = void 0;\nfunction initHeadManager() {\n    return {\n        mountedInstances: new Set(),\n        updateHead: (head)=>{\n            const tags = {};\n            head.forEach((h)=>{\n                if (// it won't be inlined. In this case revert to the original behavior\n                h.type === \"link\" && h.props[\"data-optimized-fonts\"]) {\n                    if (document.querySelector(`style[data-href=\"${h.props[\"data-href\"]}\"]`)) {\n                        return;\n                    } else {\n                        h.props.href = h.props[\"data-href\"];\n                        h.props[\"data-href\"] = undefined;\n                    }\n                }\n                const components = tags[h.type] || [];\n                components.push(h);\n                tags[h.type] = components;\n            });\n            const titleComponent = tags.title ? tags.title[0] : null;\n            let title = \"\";\n            if (titleComponent) {\n                const { children  } = titleComponent.props;\n                title = typeof children === \"string\" ? children : Array.isArray(children) ? children.join(\"\") : \"\";\n            }\n            if (title !== document.title) document.title = title;\n            [\n                \"meta\",\n                \"base\",\n                \"link\",\n                \"style\",\n                \"script\"\n            ].forEach((type)=>{\n                updateElements(type, tags[type] || []);\n            });\n        }\n    };\n}\nconst DOMAttributeNames = {\n    acceptCharset: \"accept-charset\",\n    className: \"class\",\n    htmlFor: \"for\",\n    httpEquiv: \"http-equiv\",\n    noModule: \"noModule\"\n};\nexports.DOMAttributeNames = DOMAttributeNames;\nfunction reactElementToDOM({ type , props  }) {\n    const el = document.createElement(type);\n    for(const p in props){\n        if (!props.hasOwnProperty(p)) continue;\n        if (p === \"children\" || p === \"dangerouslySetInnerHTML\") continue;\n        // we don't render undefined props to the DOM\n        if (props[p] === undefined) continue;\n        const attr = DOMAttributeNames[p] || p.toLowerCase();\n        if (type === \"script\" && (attr === \"async\" || attr === \"defer\" || attr === \"noModule\")) {\n            el[attr] = !!props[p];\n        } else {\n            el.setAttribute(attr, props[p]);\n        }\n    }\n    const { children , dangerouslySetInnerHTML  } = props;\n    if (dangerouslySetInnerHTML) {\n        el.innerHTML = dangerouslySetInnerHTML.__html || \"\";\n    } else if (children) {\n        el.textContent = typeof children === \"string\" ? children : Array.isArray(children) ? children.join(\"\") : \"\";\n    }\n    return el;\n}\nfunction isEqualNode(oldTag, newTag) {\n    if (oldTag instanceof HTMLElement && newTag instanceof HTMLElement) {\n        const nonce = newTag.getAttribute(\"nonce\");\n        // Only strip the nonce if `oldTag` has had it stripped. An element's nonce attribute will not\n        // be stripped if there is no content security policy response header that includes a nonce.\n        if (nonce && !oldTag.getAttribute(\"nonce\")) {\n            const cloneTag = newTag.cloneNode(true);\n            cloneTag.setAttribute(\"nonce\", \"\");\n            cloneTag.nonce = nonce;\n            return nonce === oldTag.nonce && oldTag.isEqualNode(cloneTag);\n        }\n    }\n    return oldTag.isEqualNode(newTag);\n}\nfunction updateElements(type, components) {\n    const headEl = document.getElementsByTagName(\"head\")[0];\n    const headCountEl = headEl.querySelector(\"meta[name=next-head-count]\");\n    if (true) {\n        if (!headCountEl) {\n            console.error(\"Warning: next-head-count is missing. https://nextjs.org/docs/messages/next-head-count-missing\");\n            return;\n        }\n    }\n    const headCount = Number(headCountEl.content);\n    const oldTags = [];\n    for(let i = 0, j = headCountEl.previousElementSibling; i < headCount; i++, j = (j == null ? void 0 : j.previousElementSibling) || null){\n        var ref;\n        if ((j == null ? void 0 : (ref = j.tagName) == null ? void 0 : ref.toLowerCase()) === type) {\n            oldTags.push(j);\n        }\n    }\n    const newTags = components.map(reactElementToDOM).filter((newTag)=>{\n        for(let k = 0, len = oldTags.length; k < len; k++){\n            const oldTag = oldTags[k];\n            if (isEqualNode(oldTag, newTag)) {\n                oldTags.splice(k, 1);\n                return false;\n            }\n        }\n        return true;\n    });\n    oldTags.forEach((t)=>{\n        var ref;\n        return (ref = t.parentNode) == null ? void 0 : ref.removeChild(t);\n    });\n    newTags.forEach((t)=>headEl.insertBefore(t, headCountEl));\n    headCountEl.content = (headCount - oldTags.length + newTags.length).toString();\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=head-manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9oZWFkLW1hbmFnZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxLQUFLLEVBQUUsSUFBSTtDQUNkLEVBQUMsQ0FBQztBQUNIRCxrQkFBZSxHQUFHRyxlQUFlLENBQUM7QUFDbENILG1CQUFtQixHQUFHSSxXQUFXLENBQUM7QUFDbENKLHlCQUF5QixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ25DLFNBQVNHLGVBQWUsR0FBRztJQUN2QixPQUFPO1FBQ0hHLGdCQUFnQixFQUFFLElBQUlDLEdBQUcsRUFBRTtRQUMzQkMsVUFBVSxFQUFFLENBQUNDLElBQUksR0FBRztZQUNoQixNQUFNQyxJQUFJLEdBQUcsRUFBRTtZQUNmRCxJQUFJLENBQUNFLE9BQU8sQ0FBQyxDQUFDQyxDQUFDLEdBQUc7Z0JBQ2QsSUFDQSxvRUFBb0U7Z0JBQ3BFQSxDQUFDLENBQUNDLElBQUksS0FBSyxNQUFNLElBQUlELENBQUMsQ0FBQ0UsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEVBQUU7b0JBQ2xELElBQUlDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLENBQUMsaUJBQWlCLEVBQUVKLENBQUMsQ0FBQ0UsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7d0JBQ3RFLE9BQU87cUJBQ1YsTUFBTTt3QkFDSEYsQ0FBQyxDQUFDRSxLQUFLLENBQUNHLElBQUksR0FBR0wsQ0FBQyxDQUFDRSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7d0JBQ3BDRixDQUFDLENBQUNFLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBR0ksU0FBUyxDQUFDO3FCQUNwQztpQkFDSjtnQkFDRCxNQUFNQyxVQUFVLEdBQUdULElBQUksQ0FBQ0UsQ0FBQyxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNyQ00sVUFBVSxDQUFDQyxJQUFJLENBQUNSLENBQUMsQ0FBQyxDQUFDO2dCQUNuQkYsSUFBSSxDQUFDRSxDQUFDLENBQUNDLElBQUksQ0FBQyxHQUFHTSxVQUFVLENBQUM7YUFDN0IsQ0FBQyxDQUFDO1lBQ0gsTUFBTUUsY0FBYyxHQUFHWCxJQUFJLENBQUNZLEtBQUssR0FBR1osSUFBSSxDQUFDWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSTtZQUN4RCxJQUFJQSxLQUFLLEdBQUcsRUFBRTtZQUNkLElBQUlELGNBQWMsRUFBRTtnQkFDaEIsTUFBTSxFQUFFRSxRQUFRLEdBQUcsR0FBR0YsY0FBYyxDQUFDUCxLQUFLO2dCQUMxQ1EsS0FBSyxHQUFHLE9BQU9DLFFBQVEsS0FBSyxRQUFRLEdBQUdBLFFBQVEsR0FBR0MsS0FBSyxDQUFDQyxPQUFPLENBQUNGLFFBQVEsQ0FBQyxHQUFHQSxRQUFRLENBQUNHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7YUFDdEc7WUFDRCxJQUFJSixLQUFLLEtBQUtQLFFBQVEsQ0FBQ08sS0FBSyxFQUFFUCxRQUFRLENBQUNPLEtBQUssR0FBR0EsS0FBSyxDQUFDO1lBQ3JEO2dCQUNJLE1BQU07Z0JBQ04sTUFBTTtnQkFDTixNQUFNO2dCQUNOLE9BQU87Z0JBQ1AsUUFBUTthQUNYLENBQUNYLE9BQU8sQ0FBQyxDQUFDRSxJQUFJLEdBQUc7Z0JBQ2RjLGNBQWMsQ0FBQ2QsSUFBSSxFQUFFSCxJQUFJLENBQUNHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQzFDLENBQUMsQ0FBQztTQUNOO0tBQ0osQ0FBQztDQUNMO0FBQ0QsTUFBTVIsaUJBQWlCLEdBQUc7SUFDdEJ1QixhQUFhLEVBQUUsZ0JBQWdCO0lBQy9CQyxTQUFTLEVBQUUsT0FBTztJQUNsQkMsT0FBTyxFQUFFLEtBQUs7SUFDZEMsU0FBUyxFQUFFLFlBQVk7SUFDdkJDLFFBQVEsRUFBRSxVQUFVO0NBQ3ZCO0FBQ0RoQyx5QkFBeUIsR0FBR0ssaUJBQWlCLENBQUM7QUFDOUMsU0FBUzRCLGlCQUFpQixDQUFDLEVBQUVwQixJQUFJLEdBQUdDLEtBQUssR0FBRyxFQUFFO0lBQzFDLE1BQU1vQixFQUFFLEdBQUduQixRQUFRLENBQUNvQixhQUFhLENBQUN0QixJQUFJLENBQUM7SUFDdkMsSUFBSSxNQUFNdUIsQ0FBQyxJQUFJdEIsS0FBSyxDQUFDO1FBQ2pCLElBQUksQ0FBQ0EsS0FBSyxDQUFDdUIsY0FBYyxDQUFDRCxDQUFDLENBQUMsRUFBRSxTQUFTO1FBQ3ZDLElBQUlBLENBQUMsS0FBSyxVQUFVLElBQUlBLENBQUMsS0FBSyx5QkFBeUIsRUFBRSxTQUFTO1FBQ2xFLDZDQUE2QztRQUM3QyxJQUFJdEIsS0FBSyxDQUFDc0IsQ0FBQyxDQUFDLEtBQUtsQixTQUFTLEVBQUUsU0FBUztRQUNyQyxNQUFNb0IsSUFBSSxHQUFHakMsaUJBQWlCLENBQUMrQixDQUFDLENBQUMsSUFBSUEsQ0FBQyxDQUFDRyxXQUFXLEVBQUU7UUFDcEQsSUFBSTFCLElBQUksS0FBSyxRQUFRLElBQUksQ0FBQ3lCLElBQUksS0FBSyxPQUFPLElBQUlBLElBQUksS0FBSyxPQUFPLElBQUlBLElBQUksS0FBSyxVQUFVLENBQUMsRUFBRTtZQUNwRkosRUFBRSxDQUFDSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUN4QixLQUFLLENBQUNzQixDQUFDLENBQUMsQ0FBQztTQUN6QixNQUFNO1lBQ0hGLEVBQUUsQ0FBQ00sWUFBWSxDQUFDRixJQUFJLEVBQUV4QixLQUFLLENBQUNzQixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25DO0tBQ0o7SUFDRCxNQUFNLEVBQUViLFFBQVEsR0FBR2tCLHVCQUF1QixHQUFHLEdBQUczQixLQUFLO0lBQ3JELElBQUkyQix1QkFBdUIsRUFBRTtRQUN6QlAsRUFBRSxDQUFDUSxTQUFTLEdBQUdELHVCQUF1QixDQUFDRSxNQUFNLElBQUksRUFBRSxDQUFDO0tBQ3ZELE1BQU0sSUFBSXBCLFFBQVEsRUFBRTtRQUNqQlcsRUFBRSxDQUFDVSxXQUFXLEdBQUcsT0FBT3JCLFFBQVEsS0FBSyxRQUFRLEdBQUdBLFFBQVEsR0FBR0MsS0FBSyxDQUFDQyxPQUFPLENBQUNGLFFBQVEsQ0FBQyxHQUFHQSxRQUFRLENBQUNHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDL0c7SUFDRCxPQUFPUSxFQUFFLENBQUM7Q0FDYjtBQUNELFNBQVM5QixXQUFXLENBQUN5QyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtJQUNqQyxJQUFJRCxNQUFNLFlBQVlFLFdBQVcsSUFBSUQsTUFBTSxZQUFZQyxXQUFXLEVBQUU7UUFDaEUsTUFBTUMsS0FBSyxHQUFHRixNQUFNLENBQUNHLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFDMUMsOEZBQThGO1FBQzlGLDRGQUE0RjtRQUM1RixJQUFJRCxLQUFLLElBQUksQ0FBQ0gsTUFBTSxDQUFDSSxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDeEMsTUFBTUMsUUFBUSxHQUFHSixNQUFNLENBQUNLLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDdkNELFFBQVEsQ0FBQ1YsWUFBWSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNuQ1UsUUFBUSxDQUFDRixLQUFLLEdBQUdBLEtBQUssQ0FBQztZQUN2QixPQUFPQSxLQUFLLEtBQUtILE1BQU0sQ0FBQ0csS0FBSyxJQUFJSCxNQUFNLENBQUN6QyxXQUFXLENBQUM4QyxRQUFRLENBQUMsQ0FBQztTQUNqRTtLQUNKO0lBQ0QsT0FBT0wsTUFBTSxDQUFDekMsV0FBVyxDQUFDMEMsTUFBTSxDQUFDLENBQUM7Q0FDckM7QUFDRCxTQUFTbkIsY0FBYyxDQUFDZCxJQUFJLEVBQUVNLFVBQVUsRUFBRTtJQUN0QyxNQUFNaUMsTUFBTSxHQUFHckMsUUFBUSxDQUFDc0Msb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU1DLFdBQVcsR0FBR0YsTUFBTSxDQUFDcEMsYUFBYSxDQUFDLDRCQUE0QixDQUFDO0lBQ3RFLElBQUl1QyxJQUFxQyxFQUFFO1FBQ3ZDLElBQUksQ0FBQ0QsV0FBVyxFQUFFO1lBQ2RFLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLCtGQUErRixDQUFDLENBQUM7WUFDL0csT0FBTztTQUNWO0tBQ0o7SUFDRCxNQUFNQyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0wsV0FBVyxDQUFDTSxPQUFPLENBQUM7SUFDN0MsTUFBTUMsT0FBTyxHQUFHLEVBQUU7SUFDbEIsSUFBSSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxDQUFDLEdBQUdULFdBQVcsQ0FBQ1Usc0JBQXNCLEVBQUVGLENBQUMsR0FBR0osU0FBUyxFQUFFSSxDQUFDLEVBQUUsRUFBRUMsQ0FBQyxHQUFHLENBQUNBLENBQUMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUdBLENBQUMsQ0FBQ0Msc0JBQXNCLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDbkksSUFBSUMsR0FBRztRQUNQLElBQUksQ0FBQ0YsQ0FBQyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDRSxHQUFHLEdBQUdGLENBQUMsQ0FBQ0csT0FBTyxDQUFDLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHRCxHQUFHLENBQUMxQixXQUFXLEVBQUUsQ0FBQyxLQUFLMUIsSUFBSSxFQUFFO1lBQ3hGZ0QsT0FBTyxDQUFDekMsSUFBSSxDQUFDMkMsQ0FBQyxDQUFDLENBQUM7U0FDbkI7S0FDSjtJQUNELE1BQU1JLE9BQU8sR0FBR2hELFVBQVUsQ0FBQ2lELEdBQUcsQ0FBQ25DLGlCQUFpQixDQUFDLENBQUNvQyxNQUFNLENBQUMsQ0FBQ3ZCLE1BQU0sR0FBRztRQUMvRCxJQUFJLElBQUl3QixDQUFDLEdBQUcsQ0FBQyxFQUFFQyxHQUFHLEdBQUdWLE9BQU8sQ0FBQ1csTUFBTSxFQUFFRixDQUFDLEdBQUdDLEdBQUcsRUFBRUQsQ0FBQyxFQUFFLENBQUM7WUFDOUMsTUFBTXpCLE1BQU0sR0FBR2dCLE9BQU8sQ0FBQ1MsQ0FBQyxDQUFDO1lBQ3pCLElBQUlsRSxXQUFXLENBQUN5QyxNQUFNLEVBQUVDLE1BQU0sQ0FBQyxFQUFFO2dCQUM3QmUsT0FBTyxDQUFDWSxNQUFNLENBQUNILENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDckIsT0FBTyxLQUFLLENBQUM7YUFDaEI7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDO0tBQ2YsQ0FBQztJQUNGVCxPQUFPLENBQUNsRCxPQUFPLENBQUMsQ0FBQytELENBQUMsR0FBRztRQUNqQixJQUFJVCxHQUFHO1FBQ1AsT0FBTyxDQUFDQSxHQUFHLEdBQUdTLENBQUMsQ0FBQ0MsVUFBVSxDQUFDLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHVixHQUFHLENBQUNXLFdBQVcsQ0FBQ0YsQ0FBQyxDQUFDLENBQUM7S0FDckUsQ0FBQyxDQUFDO0lBQ0hQLE9BQU8sQ0FBQ3hELE9BQU8sQ0FBQyxDQUFDK0QsQ0FBQyxHQUFHdEIsTUFBTSxDQUFDeUIsWUFBWSxDQUFDSCxDQUFDLEVBQUVwQixXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzFEQSxXQUFXLENBQUNNLE9BQU8sR0FBRyxDQUFDRixTQUFTLEdBQUdHLE9BQU8sQ0FBQ1csTUFBTSxHQUFHTCxPQUFPLENBQUNLLE1BQU0sQ0FBQyxDQUFDTSxRQUFRLEVBQUUsQ0FBQztDQUNsRjtBQUVELElBQUksQ0FBQyxPQUFPOUUsT0FBTyxDQUFDRSxPQUFPLEtBQUssVUFBVSxJQUFLLE9BQU9GLE9BQU8sQ0FBQ0UsT0FBTyxLQUFLLFFBQVEsSUFBSUYsT0FBTyxDQUFDRSxPQUFPLEtBQUssSUFBSSxDQUFFLElBQUksT0FBT0YsT0FBTyxDQUFDRSxPQUFPLENBQUM2RSxVQUFVLEtBQUssV0FBVyxFQUFFO0lBQ3JLakYsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sQ0FBQ0UsT0FBTyxFQUFFLFlBQVksRUFBRTtRQUFFRCxLQUFLLEVBQUUsSUFBSTtLQUFFLENBQUMsQ0FBQztJQUN0RUgsTUFBTSxDQUFDa0YsTUFBTSxDQUFDaEYsT0FBTyxDQUFDRSxPQUFPLEVBQUVGLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDaUYsTUFBTSxDQUFDakYsT0FBTyxHQUFHQSxPQUFPLENBQUNFLE9BQU8sQ0FBQztDQUNsQyxDQUVELHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BwYmwtZnJvbnQtZW5kLXRlbXBsYXRlLW5leHRqcy1tZXNoLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvaGVhZC1tYW5hZ2VyLmpzP2NhNGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpbml0SGVhZE1hbmFnZXI7XG5leHBvcnRzLmlzRXF1YWxOb2RlID0gaXNFcXVhbE5vZGU7XG5leHBvcnRzLkRPTUF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwO1xuZnVuY3Rpb24gaW5pdEhlYWRNYW5hZ2VyKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1vdW50ZWRJbnN0YW5jZXM6IG5ldyBTZXQoKSxcbiAgICAgICAgdXBkYXRlSGVhZDogKGhlYWQpPT57XG4gICAgICAgICAgICBjb25zdCB0YWdzID0ge307XG4gICAgICAgICAgICBoZWFkLmZvckVhY2goKGgpPT57XG4gICAgICAgICAgICAgICAgaWYgKC8vIElmIHRoZSBmb250IHRhZyBpcyBsb2FkZWQgb25seSBvbiBjbGllbnQgbmF2aWdhdGlvblxuICAgICAgICAgICAgICAgIC8vIGl0IHdvbid0IGJlIGlubGluZWQuIEluIHRoaXMgY2FzZSByZXZlcnQgdG8gdGhlIG9yaWdpbmFsIGJlaGF2aW9yXG4gICAgICAgICAgICAgICAgaC50eXBlID09PSAnbGluaycgJiYgaC5wcm9wc1snZGF0YS1vcHRpbWl6ZWQtZm9udHMnXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihgc3R5bGVbZGF0YS1ocmVmPVwiJHtoLnByb3BzWydkYXRhLWhyZWYnXX1cIl1gKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaC5wcm9wcy5ocmVmID0gaC5wcm9wc1snZGF0YS1ocmVmJ107XG4gICAgICAgICAgICAgICAgICAgICAgICBoLnByb3BzWydkYXRhLWhyZWYnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnRzID0gdGFnc1toLnR5cGVdIHx8IFtdO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHMucHVzaChoKTtcbiAgICAgICAgICAgICAgICB0YWdzW2gudHlwZV0gPSBjb21wb25lbnRzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCB0aXRsZUNvbXBvbmVudCA9IHRhZ3MudGl0bGUgPyB0YWdzLnRpdGxlWzBdIDogbnVsbDtcbiAgICAgICAgICAgIGxldCB0aXRsZSA9ICcnO1xuICAgICAgICAgICAgaWYgKHRpdGxlQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBjaGlsZHJlbiAgfSA9IHRpdGxlQ29tcG9uZW50LnByb3BzO1xuICAgICAgICAgICAgICAgIHRpdGxlID0gdHlwZW9mIGNoaWxkcmVuID09PSAnc3RyaW5nJyA/IGNoaWxkcmVuIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbi5qb2luKCcnKSA6ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpdGxlICE9PSBkb2N1bWVudC50aXRsZSkgZG9jdW1lbnQudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnbWV0YScsXG4gICAgICAgICAgICAgICAgJ2Jhc2UnLFxuICAgICAgICAgICAgICAgICdsaW5rJyxcbiAgICAgICAgICAgICAgICAnc3R5bGUnLFxuICAgICAgICAgICAgICAgICdzY3JpcHQnXG4gICAgICAgICAgICBdLmZvckVhY2goKHR5cGUpPT57XG4gICAgICAgICAgICAgICAgdXBkYXRlRWxlbWVudHModHlwZSwgdGFnc1t0eXBlXSB8fCBbXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5jb25zdCBET01BdHRyaWJ1dGVOYW1lcyA9IHtcbiAgICBhY2NlcHRDaGFyc2V0OiAnYWNjZXB0LWNoYXJzZXQnLFxuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgICBodG1sRm9yOiAnZm9yJyxcbiAgICBodHRwRXF1aXY6ICdodHRwLWVxdWl2JyxcbiAgICBub01vZHVsZTogJ25vTW9kdWxlJ1xufTtcbmV4cG9ydHMuRE9NQXR0cmlidXRlTmFtZXMgPSBET01BdHRyaWJ1dGVOYW1lcztcbmZ1bmN0aW9uIHJlYWN0RWxlbWVudFRvRE9NKHsgdHlwZSAsIHByb3BzICB9KSB7XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgIGZvcihjb25zdCBwIGluIHByb3BzKXtcbiAgICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eShwKSkgY29udGludWU7XG4gICAgICAgIGlmIChwID09PSAnY2hpbGRyZW4nIHx8IHAgPT09ICdkYW5nZXJvdXNseVNldElubmVySFRNTCcpIGNvbnRpbnVlO1xuICAgICAgICAvLyB3ZSBkb24ndCByZW5kZXIgdW5kZWZpbmVkIHByb3BzIHRvIHRoZSBET01cbiAgICAgICAgaWYgKHByb3BzW3BdID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBhdHRyID0gRE9NQXR0cmlidXRlTmFtZXNbcF0gfHwgcC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3NjcmlwdCcgJiYgKGF0dHIgPT09ICdhc3luYycgfHwgYXR0ciA9PT0gJ2RlZmVyJyB8fCBhdHRyID09PSAnbm9Nb2R1bGUnKSkge1xuICAgICAgICAgICAgZWxbYXR0cl0gPSAhIXByb3BzW3BdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGF0dHIsIHByb3BzW3BdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB7IGNoaWxkcmVuICwgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIH0gPSBwcm9wcztcbiAgICBpZiAoZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpIHtcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sIHx8ICcnO1xuICAgIH0gZWxzZSBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSB0eXBlb2YgY2hpbGRyZW4gPT09ICdzdHJpbmcnID8gY2hpbGRyZW4gOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuLmpvaW4oJycpIDogJyc7XG4gICAgfVxuICAgIHJldHVybiBlbDtcbn1cbmZ1bmN0aW9uIGlzRXF1YWxOb2RlKG9sZFRhZywgbmV3VGFnKSB7XG4gICAgaWYgKG9sZFRhZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIG5ld1RhZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG5vbmNlID0gbmV3VGFnLmdldEF0dHJpYnV0ZSgnbm9uY2UnKTtcbiAgICAgICAgLy8gT25seSBzdHJpcCB0aGUgbm9uY2UgaWYgYG9sZFRhZ2AgaGFzIGhhZCBpdCBzdHJpcHBlZC4gQW4gZWxlbWVudCdzIG5vbmNlIGF0dHJpYnV0ZSB3aWxsIG5vdFxuICAgICAgICAvLyBiZSBzdHJpcHBlZCBpZiB0aGVyZSBpcyBubyBjb250ZW50IHNlY3VyaXR5IHBvbGljeSByZXNwb25zZSBoZWFkZXIgdGhhdCBpbmNsdWRlcyBhIG5vbmNlLlxuICAgICAgICBpZiAobm9uY2UgJiYgIW9sZFRhZy5nZXRBdHRyaWJ1dGUoJ25vbmNlJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsb25lVGFnID0gbmV3VGFnLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgIGNsb25lVGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCAnJyk7XG4gICAgICAgICAgICBjbG9uZVRhZy5ub25jZSA9IG5vbmNlO1xuICAgICAgICAgICAgcmV0dXJuIG5vbmNlID09PSBvbGRUYWcubm9uY2UgJiYgb2xkVGFnLmlzRXF1YWxOb2RlKGNsb25lVGFnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2xkVGFnLmlzRXF1YWxOb2RlKG5ld1RhZyk7XG59XG5mdW5jdGlvbiB1cGRhdGVFbGVtZW50cyh0eXBlLCBjb21wb25lbnRzKSB7XG4gICAgY29uc3QgaGVhZEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICBjb25zdCBoZWFkQ291bnRFbCA9IGhlYWRFbC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9bmV4dC1oZWFkLWNvdW50XScpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghaGVhZENvdW50RWwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1dhcm5pbmc6IG5leHQtaGVhZC1jb3VudCBpcyBtaXNzaW5nLiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9uZXh0LWhlYWQtY291bnQtbWlzc2luZycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGhlYWRDb3VudCA9IE51bWJlcihoZWFkQ291bnRFbC5jb250ZW50KTtcbiAgICBjb25zdCBvbGRUYWdzID0gW107XG4gICAgZm9yKGxldCBpID0gMCwgaiA9IGhlYWRDb3VudEVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IGkgPCBoZWFkQ291bnQ7IGkrKywgaiA9IChqID09IG51bGwgPyB2b2lkIDAgOiBqLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHx8IG51bGwpe1xuICAgICAgICB2YXIgcmVmO1xuICAgICAgICBpZiAoKGogPT0gbnVsbCA/IHZvaWQgMCA6IChyZWYgPSBqLnRhZ05hbWUpID09IG51bGwgPyB2b2lkIDAgOiByZWYudG9Mb3dlckNhc2UoKSkgPT09IHR5cGUpIHtcbiAgICAgICAgICAgIG9sZFRhZ3MucHVzaChqKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBuZXdUYWdzID0gY29tcG9uZW50cy5tYXAocmVhY3RFbGVtZW50VG9ET00pLmZpbHRlcigobmV3VGFnKT0+e1xuICAgICAgICBmb3IobGV0IGsgPSAwLCBsZW4gPSBvbGRUYWdzLmxlbmd0aDsgayA8IGxlbjsgaysrKXtcbiAgICAgICAgICAgIGNvbnN0IG9sZFRhZyA9IG9sZFRhZ3Nba107XG4gICAgICAgICAgICBpZiAoaXNFcXVhbE5vZGUob2xkVGFnLCBuZXdUYWcpKSB7XG4gICAgICAgICAgICAgICAgb2xkVGFncy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIG9sZFRhZ3MuZm9yRWFjaCgodCk9PntcbiAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgcmV0dXJuIChyZWYgPSB0LnBhcmVudE5vZGUpID09IG51bGwgPyB2b2lkIDAgOiByZWYucmVtb3ZlQ2hpbGQodCk7XG4gICAgfSk7XG4gICAgbmV3VGFncy5mb3JFYWNoKCh0KT0+aGVhZEVsLmluc2VydEJlZm9yZSh0LCBoZWFkQ291bnRFbCkpO1xuICAgIGhlYWRDb3VudEVsLmNvbnRlbnQgPSAoaGVhZENvdW50IC0gb2xkVGFncy5sZW5ndGggKyBuZXdUYWdzLmxlbmd0aCkudG9TdHJpbmcoKTtcbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVhZC1tYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJpbml0SGVhZE1hbmFnZXIiLCJpc0VxdWFsTm9kZSIsIkRPTUF0dHJpYnV0ZU5hbWVzIiwibW91bnRlZEluc3RhbmNlcyIsIlNldCIsInVwZGF0ZUhlYWQiLCJoZWFkIiwidGFncyIsImZvckVhY2giLCJoIiwidHlwZSIsInByb3BzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaHJlZiIsInVuZGVmaW5lZCIsImNvbXBvbmVudHMiLCJwdXNoIiwidGl0bGVDb21wb25lbnQiLCJ0aXRsZSIsImNoaWxkcmVuIiwiQXJyYXkiLCJpc0FycmF5Iiwiam9pbiIsInVwZGF0ZUVsZW1lbnRzIiwiYWNjZXB0Q2hhcnNldCIsImNsYXNzTmFtZSIsImh0bWxGb3IiLCJodHRwRXF1aXYiLCJub01vZHVsZSIsInJlYWN0RWxlbWVudFRvRE9NIiwiZWwiLCJjcmVhdGVFbGVtZW50IiwicCIsImhhc093blByb3BlcnR5IiwiYXR0ciIsInRvTG93ZXJDYXNlIiwic2V0QXR0cmlidXRlIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJpbm5lckhUTUwiLCJfX2h0bWwiLCJ0ZXh0Q29udGVudCIsIm9sZFRhZyIsIm5ld1RhZyIsIkhUTUxFbGVtZW50Iiwibm9uY2UiLCJnZXRBdHRyaWJ1dGUiLCJjbG9uZVRhZyIsImNsb25lTm9kZSIsImhlYWRFbCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaGVhZENvdW50RWwiLCJwcm9jZXNzIiwiY29uc29sZSIsImVycm9yIiwiaGVhZENvdW50IiwiTnVtYmVyIiwiY29udGVudCIsIm9sZFRhZ3MiLCJpIiwiaiIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJyZWYiLCJ0YWdOYW1lIiwibmV3VGFncyIsIm1hcCIsImZpbHRlciIsImsiLCJsZW4iLCJsZW5ndGgiLCJzcGxpY2UiLCJ0IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwidG9TdHJpbmciLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/head-manager.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\nvar _router = __webpack_require__(/*! ../shared/lib/router/router */ \"./node_modules/next/dist/shared/lib/router/router.js\");\nvar _addLocale = __webpack_require__(/*! ./add-locale */ \"./node_modules/next/dist/client/add-locale.js\");\nvar _routerContext = __webpack_require__(/*! ../shared/lib/router-context */ \"../shared/lib/router-context\");\nvar _appRouterContext = __webpack_require__(/*! ../shared/lib/app-router-context */ \"../shared/lib/app-router-context\");\nvar _useIntersection = __webpack_require__(/*! ./use-intersection */ \"./node_modules/next/dist/client/use-intersection.js\");\nvar _getDomainLocale = __webpack_require__(/*! ./get-domain-locale */ \"./node_modules/next/dist/client/get-domain-locale.js\");\nvar _addBasePath = __webpack_require__(/*! ./add-base-path */ \"./node_modules/next/dist/client/add-base-path.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n// @ts-ignore useTransition exist\nconst hasUseTransition = typeof _react.default.useTransition !== \"undefined\";\nconst prefetched = {};\nfunction prefetch(router, href, as, options) {\n    if (true) return;\n    if (!(0, _router).isLocalURL(href)) return;\n    // Prefetch the JSON page if asked (only in the client)\n    // We need to handle a prefetch error here since we may be\n    // loading with priority which can reject but we don't\n    // want to force navigation since this is only a prefetch\n    router.prefetch(href, as, options).catch((err)=>{\n        if (true) {\n            // rethrow to show invalid URL errors\n            throw err;\n        }\n    });\n    const curLocale = options && typeof options.locale !== \"undefined\" ? options.locale : router && router.locale;\n    // Join on an invalid URI character\n    prefetched[href + \"%\" + as + (curLocale ? \"%\" + curLocale : \"\")] = true;\n}\nfunction isModifiedEvent(event) {\n    const { target  } = event.currentTarget;\n    return target && target !== \"_self\" || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || event.nativeEvent && event.nativeEvent.which === 2;\n}\nfunction linkClicked(e, router, href, as, replace, soft, shallow, scroll, locale, startTransition) {\n    const { nodeName  } = e.currentTarget;\n    // anchors inside an svg have a lowercase nodeName\n    const isAnchorNodeName = nodeName.toUpperCase() === \"A\";\n    if (isAnchorNodeName && (isModifiedEvent(e) || !(0, _router).isLocalURL(href))) {\n        // ignore click for browser’s default behavior\n        return;\n    }\n    e.preventDefault();\n    const navigate = ()=>{\n        // If the router is an AppRouterInstance, then it'll have `softPush` and\n        // `softReplace`.\n        if (\"softPush\" in router && \"softReplace\" in router) {\n            // If we're doing a soft navigation, use the soft variants of\n            // replace/push.\n            const method = soft ? replace ? \"softReplace\" : \"softPush\" : replace ? \"replace\" : \"push\";\n            router[method](href);\n        } else {\n            router[replace ? \"replace\" : \"push\"](href, as, {\n                shallow,\n                locale,\n                scroll\n            });\n        }\n    };\n    if (startTransition) {\n        startTransition(navigate);\n    } else {\n        navigate();\n    }\n}\nconst Link = /*#__PURE__*/ _react.default.forwardRef(function LinkComponent(props, forwardedRef) {\n    if (true) {\n        function createPropError(args) {\n            return new Error(`Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` + ( false ? 0 : \"\"));\n        }\n        // TypeScript trick for type-guarding:\n        const requiredPropsGuard = {\n            href: true\n        };\n        const requiredProps = Object.keys(requiredPropsGuard);\n        requiredProps.forEach((key)=>{\n            if (key === \"href\") {\n                if (props[key] == null || typeof props[key] !== \"string\" && typeof props[key] !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: props[key] === null ? \"null\" : typeof props[key]\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // TypeScript trick for type-guarding:\n        const optionalPropsGuard = {\n            as: true,\n            replace: true,\n            soft: true,\n            scroll: true,\n            shallow: true,\n            passHref: true,\n            prefetch: true,\n            locale: true,\n            onClick: true,\n            onMouseEnter: true,\n            legacyBehavior: true\n        };\n        const optionalProps = Object.keys(optionalPropsGuard);\n        optionalProps.forEach((key)=>{\n            const valType = typeof props[key];\n            if (key === \"as\") {\n                if (props[key] && valType !== \"string\" && valType !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"locale\") {\n                if (props[key] && valType !== \"string\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"onClick\" || key === \"onMouseEnter\") {\n                if (props[key] && valType !== \"function\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`function`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"replace\" || key === \"soft\" || key === \"scroll\" || key === \"shallow\" || key === \"passHref\" || key === \"prefetch\" || key === \"legacyBehavior\") {\n                if (props[key] != null && valType !== \"boolean\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`boolean`\",\n                        actual: valType\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const hasWarned = _react.default.useRef(false);\n        if (props.prefetch && !hasWarned.current) {\n            hasWarned.current = true;\n            console.warn(\"Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated\");\n        }\n    }\n    let children;\n    const { href: hrefProp , as: asProp , children: childrenProp , prefetch: prefetchProp , passHref , replace , soft , shallow , scroll , locale , onClick , onMouseEnter , legacyBehavior =Boolean(false) !== true  } = props, restProps = _objectWithoutPropertiesLoose(props, [\n        \"href\",\n        \"as\",\n        \"children\",\n        \"prefetch\",\n        \"passHref\",\n        \"replace\",\n        \"soft\",\n        \"shallow\",\n        \"scroll\",\n        \"locale\",\n        \"onClick\",\n        \"onMouseEnter\",\n        \"legacyBehavior\"\n    ]);\n    children = childrenProp;\n    if (legacyBehavior && (typeof children === \"string\" || typeof children === \"number\")) {\n        children = /*#__PURE__*/ _react.default.createElement(\"a\", null, children);\n    }\n    const p = prefetchProp !== false;\n    const [, /* isPending */ startTransition] = hasUseTransition ? // @ts-ignore useTransition exists\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    _react.default.useTransition() : [];\n    let router = _react.default.useContext(_routerContext.RouterContext);\n    // TODO-APP: type error. Remove `as any`\n    const appRouter = _react.default.useContext(_appRouterContext.AppRouterContext);\n    if (appRouter) {\n        router = appRouter;\n    }\n    const { href , as  } = _react.default.useMemo(()=>{\n        const [resolvedHref, resolvedAs] = (0, _router).resolveHref(router, hrefProp, true);\n        return {\n            href: resolvedHref,\n            as: asProp ? (0, _router).resolveHref(router, asProp) : resolvedAs || resolvedHref\n        };\n    }, [\n        router,\n        hrefProp,\n        asProp\n    ]);\n    const previousHref = _react.default.useRef(href);\n    const previousAs = _react.default.useRef(as);\n    // This will return the first child, if multiple are provided it will throw an error\n    let child;\n    if (legacyBehavior) {\n        if (true) {\n            if (onClick) {\n                console.warn(`\"onClick\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link`);\n            }\n            if (onMouseEnter) {\n                console.warn(`\"onMouseEnter\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link`);\n            }\n            try {\n                child = _react.default.Children.only(children);\n            } catch (err) {\n                if (!children) {\n                    throw new Error(`No children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but one child is required https://nextjs.org/docs/messages/link-no-children`);\n                }\n                throw new Error(`Multiple children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` + ( false ? 0 : \"\"));\n            }\n        } else {}\n    }\n    const childRef = legacyBehavior ? child && typeof child === \"object\" && child.ref : forwardedRef;\n    const [setIntersectionRef, isVisible, resetVisible] = (0, _useIntersection).useIntersection({\n        rootMargin: \"200px\"\n    });\n    const setRef = _react.default.useCallback((el)=>{\n        // Before the link getting observed, check if visible state need to be reset\n        if (previousAs.current !== as || previousHref.current !== href) {\n            resetVisible();\n            previousAs.current = as;\n            previousHref.current = href;\n        }\n        setIntersectionRef(el);\n        if (childRef) {\n            if (typeof childRef === \"function\") childRef(el);\n            else if (typeof childRef === \"object\") {\n                childRef.current = el;\n            }\n        }\n    }, [\n        as,\n        childRef,\n        href,\n        resetVisible,\n        setIntersectionRef\n    ]);\n    _react.default.useEffect(()=>{\n        const shouldPrefetch = isVisible && p && (0, _router).isLocalURL(href);\n        const curLocale = typeof locale !== \"undefined\" ? locale : router && router.locale;\n        const isPrefetched = prefetched[href + \"%\" + as + (curLocale ? \"%\" + curLocale : \"\")];\n        if (shouldPrefetch && !isPrefetched) {\n            prefetch(router, href, as, {\n                locale: curLocale\n            });\n        }\n    }, [\n        as,\n        href,\n        isVisible,\n        locale,\n        p,\n        router\n    ]);\n    const childProps = {\n        ref: setRef,\n        onClick: (e)=>{\n            if (true) {\n                if (!e) {\n                    throw new Error(`Component rendered inside next/link has to pass click event to \"onClick\" prop.`);\n                }\n            }\n            if (!legacyBehavior && typeof onClick === \"function\") {\n                onClick(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onClick === \"function\") {\n                child.props.onClick(e);\n            }\n            if (!e.defaultPrevented) {\n                linkClicked(e, router, href, as, replace, soft, shallow, scroll, locale, appRouter ? startTransition : undefined);\n            }\n        },\n        onMouseEnter: (e)=>{\n            if (!legacyBehavior && typeof onMouseEnter === \"function\") {\n                onMouseEnter(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onMouseEnter === \"function\") {\n                child.props.onMouseEnter(e);\n            }\n            if ((0, _router).isLocalURL(href)) {\n                prefetch(router, href, as, {\n                    priority: true\n                });\n            }\n        }\n    };\n    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n    // defined, we specify the current 'href', so that repetition is not needed by the user\n    if (!legacyBehavior || passHref || child.type === \"a\" && !(\"href\" in child.props)) {\n        const curLocale = typeof locale !== \"undefined\" ? locale : router && router.locale;\n        // we only render domain locales if we are currently on a domain locale\n        // so that locale links are still visitable in development/preview envs\n        const localeDomain = router && router.isLocaleDomain && (0, _getDomainLocale).getDomainLocale(as, curLocale, router.locales, router.domainLocales);\n        childProps.href = localeDomain || (0, _addBasePath).addBasePath((0, _addLocale).addLocale(as, curLocale, router && router.defaultLocale));\n    }\n    return legacyBehavior ? /*#__PURE__*/ _react.default.cloneElement(child, childProps) : /*#__PURE__*/ _react.default.createElement(\"a\", Object.assign({}, restProps, childProps), children);\n});\nvar _default = Link;\nexports[\"default\"] = _default;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=link.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/link.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.normalizePathTrailingSlash = void 0;\nvar _removeTrailingSlash = __webpack_require__(/*! ../shared/lib/router/utils/remove-trailing-slash */ \"./utils/remove-trailing-slash\");\nvar _parsePath = __webpack_require__(/*! ../shared/lib/router/utils/parse-path */ \"./utils/parse-path\");\nconst normalizePathTrailingSlash = (path)=>{\n    if (!path.startsWith(\"/\")) {\n        return path;\n    }\n    const { pathname , query , hash  } = (0, _parsePath).parsePath(path);\n    if (false) {}\n    return `${(0, _removeTrailingSlash).removeTrailingSlash(pathname)}${query}${hash}`;\n};\nexports.normalizePathTrailingSlash = normalizePathTrailingSlash;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=normalize-trailing-slash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxLQUFLLEVBQUUsSUFBSTtDQUNkLEVBQUMsQ0FBQztBQUNIRCxrQ0FBa0MsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUM1QyxJQUFJRyxvQkFBb0IsR0FBR0MsbUJBQU8sQ0FBQyx1RkFBa0QsQ0FBQztBQUN0RixJQUFJQyxVQUFVLEdBQUdELG1CQUFPLENBQUMsaUVBQXVDLENBQUM7QUFDakUsTUFBTUYsMEJBQTBCLEdBQUcsQ0FBQ0ksSUFBSSxHQUFHO0lBQ3ZDLElBQUksQ0FBQ0EsSUFBSSxDQUFDQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdkIsT0FBT0QsSUFBSSxDQUFDO0tBQ2Y7SUFDRCxNQUFNLEVBQUVFLFFBQVEsR0FBR0MsS0FBSyxHQUFHQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRUwsVUFBVSxDQUFDLENBQUNNLFNBQVMsQ0FBQ0wsSUFBSSxDQUFDO0lBQ3BFLElBQUlNLEtBQWlDLEVBQUUsRUFRdEM7SUFDRCxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRVQsb0JBQW9CLENBQUMsQ0FBQ2EsbUJBQW1CLENBQUNSLFFBQVEsQ0FBQyxDQUFDLEVBQUVDLEtBQUssQ0FBQyxFQUFFQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQ3RGO0FBQ0RWLGtDQUFrQyxHQUFHRSwwQkFBMEIsQ0FBQztBQUVoRSxJQUFJLENBQUMsT0FBT0YsT0FBTyxDQUFDa0IsT0FBTyxLQUFLLFVBQVUsSUFBSyxPQUFPbEIsT0FBTyxDQUFDa0IsT0FBTyxLQUFLLFFBQVEsSUFBSWxCLE9BQU8sQ0FBQ2tCLE9BQU8sS0FBSyxJQUFJLENBQUUsSUFBSSxPQUFPbEIsT0FBTyxDQUFDa0IsT0FBTyxDQUFDQyxVQUFVLEtBQUssV0FBVyxFQUFFO0lBQ3JLckIsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sQ0FBQ2tCLE9BQU8sRUFBRSxZQUFZLEVBQUU7UUFBRWpCLEtBQUssRUFBRSxJQUFJO0tBQUUsQ0FBQyxDQUFDO0lBQ3RFSCxNQUFNLENBQUNzQixNQUFNLENBQUNwQixPQUFPLENBQUNrQixPQUFPLEVBQUVsQixPQUFPLENBQUMsQ0FBQztJQUN4Q3FCLE1BQU0sQ0FBQ3JCLE9BQU8sR0FBR0EsT0FBTyxDQUFDa0IsT0FBTyxDQUFDO0NBQ2xDLENBRUQsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHBibC1mcm9udC1lbmQtdGVtcGxhdGUtbmV4dGpzLW1lc2gvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanM/NGMyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG52YXIgX3JlbW92ZVRyYWlsaW5nU2xhc2ggPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcmVtb3ZlLXRyYWlsaW5nLXNsYXNoXCIpO1xudmFyIF9wYXJzZVBhdGggPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcGFyc2UtcGF0aFwiKTtcbmNvbnN0IG5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoID0gKHBhdGgpPT57XG4gICAgaWYgKCFwYXRoLnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgY29uc3QgeyBwYXRobmFtZSAsIHF1ZXJ5ICwgaGFzaCAgfSA9ICgwLCBfcGFyc2VQYXRoKS5wYXJzZVBhdGgocGF0aCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9UUkFJTElOR19TTEFTSCkge1xuICAgICAgICBpZiAoL1xcLlteL10rXFwvPyQvLnRlc3QocGF0aG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7KDAsIF9yZW1vdmVUcmFpbGluZ1NsYXNoKS5yZW1vdmVUcmFpbGluZ1NsYXNoKHBhdGhuYW1lKX0ke3F1ZXJ5fSR7aGFzaH1gO1xuICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lLmVuZHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHtwYXRobmFtZX0ke3F1ZXJ5fSR7aGFzaH1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGAke3BhdGhuYW1lfS8ke3F1ZXJ5fSR7aGFzaH1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBgJHsoMCwgX3JlbW92ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVRyYWlsaW5nU2xhc2gocGF0aG5hbWUpfSR7cXVlcnl9JHtoYXNofWA7XG59O1xuZXhwb3J0cy5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCA9IG5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoO1xuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2giLCJfcmVtb3ZlVHJhaWxpbmdTbGFzaCIsInJlcXVpcmUiLCJfcGFyc2VQYXRoIiwicGF0aCIsInN0YXJ0c1dpdGgiLCJwYXRobmFtZSIsInF1ZXJ5IiwiaGFzaCIsInBhcnNlUGF0aCIsInByb2Nlc3MiLCJlbnYiLCJfX05FWFRfVFJBSUxJTkdfU0xBU0giLCJ0ZXN0IiwicmVtb3ZlVHJhaWxpbmdTbGFzaCIsImVuZHNXaXRoIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/normalize-trailing-slash.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/remove-base-path.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/remove-base-path.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.removeBasePath = removeBasePath;\nvar _hasBasePath = __webpack_require__(/*! ./has-base-path */ \"./node_modules/next/dist/client/has-base-path.js\");\nconst basePath =  false || \"\";\nfunction removeBasePath(path) {\n    if (false) {}\n    path = path.slice(basePath.length);\n    if (!path.startsWith(\"/\")) path = `/${path}`;\n    return path;\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=remove-base-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yZW1vdmUtYmFzZS1wYXRoLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csS0FBSyxFQUFFLElBQUk7Q0FDZCxFQUFDLENBQUM7QUFDSEQsc0JBQXNCLEdBQUdFLGNBQWMsQ0FBQztBQUN4QyxJQUFJQyxZQUFZLEdBQUdDLG1CQUFPLENBQUMseUVBQWlCLENBQUM7QUFDN0MsTUFBTUMsUUFBUSxHQUFHQyxNQUFrQyxJQUFJLEVBQUU7QUFDekQsU0FBU0osY0FBYyxDQUFDTyxJQUFJLEVBQUU7SUFDMUIsSUFBSUgsS0FBMEMsRUFBRSxFQUkvQztJQUNERyxJQUFJLEdBQUdBLElBQUksQ0FBQ0csS0FBSyxDQUFDUCxRQUFRLENBQUNRLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLElBQUksQ0FBQ0osSUFBSSxDQUFDSyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUVMLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRUEsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM3QyxPQUFPQSxJQUFJLENBQUM7Q0FDZjtBQUVELElBQUksQ0FBQyxPQUFPVCxPQUFPLENBQUNlLE9BQU8sS0FBSyxVQUFVLElBQUssT0FBT2YsT0FBTyxDQUFDZSxPQUFPLEtBQUssUUFBUSxJQUFJZixPQUFPLENBQUNlLE9BQU8sS0FBSyxJQUFJLENBQUUsSUFBSSxPQUFPZixPQUFPLENBQUNlLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLFdBQVcsRUFBRTtJQUNyS2xCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLENBQUNlLE9BQU8sRUFBRSxZQUFZLEVBQUU7UUFBRWQsS0FBSyxFQUFFLElBQUk7S0FBRSxDQUFDLENBQUM7SUFDdEVILE1BQU0sQ0FBQ21CLE1BQU0sQ0FBQ2pCLE9BQU8sQ0FBQ2UsT0FBTyxFQUFFZixPQUFPLENBQUMsQ0FBQztJQUN4Q2tCLE1BQU0sQ0FBQ2xCLE9BQU8sR0FBR0EsT0FBTyxDQUFDZSxPQUFPLENBQUM7Q0FDbEMsQ0FFRCw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcGJsLWZyb250LWVuZC10ZW1wbGF0ZS1uZXh0anMtbWVzaC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlbW92ZS1iYXNlLXBhdGguanM/YjRmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucmVtb3ZlQmFzZVBhdGggPSByZW1vdmVCYXNlUGF0aDtcbnZhciBfaGFzQmFzZVBhdGggPSByZXF1aXJlKFwiLi9oYXMtYmFzZS1wYXRoXCIpO1xuY29uc3QgYmFzZVBhdGggPSBwcm9jZXNzLmVudi5fX05FWFRfUk9VVEVSX0JBU0VQQVRIIHx8ICcnO1xuZnVuY3Rpb24gcmVtb3ZlQmFzZVBhdGgocGF0aCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfTUFOVUFMX0NMSUVOVF9CQVNFX1BBVEgpIHtcbiAgICAgICAgaWYgKCEoMCwgX2hhc0Jhc2VQYXRoKS5oYXNCYXNlUGF0aChwYXRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoYmFzZVBhdGgubGVuZ3RoKTtcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aCgnLycpKSBwYXRoID0gYC8ke3BhdGh9YDtcbiAgICByZXR1cm4gcGF0aDtcbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlLWJhc2UtcGF0aC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZW1vdmVCYXNlUGF0aCIsIl9oYXNCYXNlUGF0aCIsInJlcXVpcmUiLCJiYXNlUGF0aCIsInByb2Nlc3MiLCJlbnYiLCJfX05FWFRfUk9VVEVSX0JBU0VQQVRIIiwicGF0aCIsIl9fTkVYVF9NQU5VQUxfQ0xJRU5UX0JBU0VfUEFUSCIsImhhc0Jhc2VQYXRoIiwic2xpY2UiLCJsZW5ndGgiLCJzdGFydHNXaXRoIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/remove-base-path.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/remove-locale.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/client/remove-locale.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.removeLocale = removeLocale;\nvar _parsePath = __webpack_require__(/*! ../shared/lib/router/utils/parse-path */ \"./utils/parse-path\");\nfunction removeLocale(path, locale) {\n    if (false) {}\n    return path;\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=remove-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yZW1vdmUtbG9jYWxlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csS0FBSyxFQUFFLElBQUk7Q0FDZCxFQUFDLENBQUM7QUFDSEQsb0JBQW9CLEdBQUdFLFlBQVksQ0FBQztBQUNwQyxJQUFJQyxVQUFVLEdBQUdDLG1CQUFPLENBQUMsaUVBQXVDLENBQUM7QUFDakUsU0FBU0YsWUFBWSxDQUFDRyxJQUFJLEVBQUVDLE1BQU0sRUFBRTtJQUNoQyxJQUFJQyxLQUErQixFQUFFLEVBS3BDO0lBQ0QsT0FBT0YsSUFBSSxDQUFDO0NBQ2Y7QUFFRCxJQUFJLENBQUMsT0FBT0wsT0FBTyxDQUFDa0IsT0FBTyxLQUFLLFVBQVUsSUFBSyxPQUFPbEIsT0FBTyxDQUFDa0IsT0FBTyxLQUFLLFFBQVEsSUFBSWxCLE9BQU8sQ0FBQ2tCLE9BQU8sS0FBSyxJQUFJLENBQUUsSUFBSSxPQUFPbEIsT0FBTyxDQUFDa0IsT0FBTyxDQUFDQyxVQUFVLEtBQUssV0FBVyxFQUFFO0lBQ3JLckIsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sQ0FBQ2tCLE9BQU8sRUFBRSxZQUFZLEVBQUU7UUFBRWpCLEtBQUssRUFBRSxJQUFJO0tBQUUsQ0FBQyxDQUFDO0lBQ3RFSCxNQUFNLENBQUNzQixNQUFNLENBQUNwQixPQUFPLENBQUNrQixPQUFPLEVBQUVsQixPQUFPLENBQUMsQ0FBQztJQUN4Q3FCLE1BQU0sQ0FBQ3JCLE9BQU8sR0FBR0EsT0FBTyxDQUFDa0IsT0FBTyxDQUFDO0NBQ2xDLENBRUQseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHBibC1mcm9udC1lbmQtdGVtcGxhdGUtbmV4dGpzLW1lc2gvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yZW1vdmUtbG9jYWxlLmpzPzQ3NTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnJlbW92ZUxvY2FsZSA9IHJlbW92ZUxvY2FsZTtcbnZhciBfcGFyc2VQYXRoID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3BhcnNlLXBhdGhcIik7XG5mdW5jdGlvbiByZW1vdmVMb2NhbGUocGF0aCwgbG9jYWxlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgY29uc3QgeyBwYXRobmFtZSAgfSA9ICgwLCBfcGFyc2VQYXRoKS5wYXJzZVBhdGgocGF0aCk7XG4gICAgICAgIGNvbnN0IHBhdGhMb3dlciA9IHBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGxvY2FsZUxvd2VyID0gbG9jYWxlID09IG51bGwgPyB2b2lkIDAgOiBsb2NhbGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZSAmJiAocGF0aExvd2VyLnN0YXJ0c1dpdGgoYC8ke2xvY2FsZUxvd2VyfS9gKSB8fCBwYXRoTG93ZXIgPT09IGAvJHtsb2NhbGVMb3dlcn1gKSA/IGAke3BhdGhuYW1lLmxlbmd0aCA9PT0gbG9jYWxlLmxlbmd0aCArIDEgPyBgL2AgOiBgYH0ke3BhdGguc2xpY2UobG9jYWxlLmxlbmd0aCArIDEpfWAgOiBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlLWxvY2FsZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZW1vdmVMb2NhbGUiLCJfcGFyc2VQYXRoIiwicmVxdWlyZSIsInBhdGgiLCJsb2NhbGUiLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX0kxOE5fU1VQUE9SVCIsInBhdGhuYW1lIiwicGFyc2VQYXRoIiwicGF0aExvd2VyIiwidG9Mb3dlckNhc2UiLCJsb2NhbGVMb3dlciIsInN0YXJ0c1dpdGgiLCJsZW5ndGgiLCJzbGljZSIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/remove-locale.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.cancelIdleCallback = exports.requestIdleCallback = void 0;\nconst requestIdleCallback = typeof self !== \"undefined\" && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function(cb) {\n    let start = Date.now();\n    return setTimeout(function() {\n        cb({\n            didTimeout: false,\n            timeRemaining: function() {\n                return Math.max(0, 50 - (Date.now() - start));\n            }\n        });\n    }, 1);\n};\nexports.requestIdleCallback = requestIdleCallback;\nconst cancelIdleCallback = typeof self !== \"undefined\" && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function(id) {\n    return clearTimeout(id);\n};\nexports.cancelIdleCallback = cancelIdleCallback;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=request-idle-callback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxLQUFLLEVBQUUsSUFBSTtDQUNkLEVBQUMsQ0FBQztBQUNIRCwwQkFBMEIsR0FBR0EsMkJBQTJCLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDbEUsTUFBTUcsbUJBQW1CLEdBQUcsT0FBT0MsSUFBSSxLQUFLLFdBQVcsSUFBSUEsSUFBSSxDQUFDRCxtQkFBbUIsSUFBSUMsSUFBSSxDQUFDRCxtQkFBbUIsQ0FBQ0UsSUFBSSxDQUFDQyxNQUFNLENBQUMsSUFBSSxTQUFTQyxFQUFFLEVBQUU7SUFDekksSUFBSUMsS0FBSyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsRUFBRTtJQUN0QixPQUFPQyxVQUFVLENBQUMsV0FBVztRQUN6QkosRUFBRSxDQUFDO1lBQ0NLLFVBQVUsRUFBRSxLQUFLO1lBQ2pCQyxhQUFhLEVBQUUsV0FBVztnQkFDdEIsT0FBT0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDTixJQUFJLENBQUNDLEdBQUcsRUFBRSxHQUFHRixLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ2pEO1NBQ0osQ0FBQyxDQUFDO0tBQ04sRUFBRSxDQUFDLENBQUMsQ0FBQztDQUNUO0FBQ0RSLDJCQUEyQixHQUFHRyxtQkFBbUIsQ0FBQztBQUNsRCxNQUFNRCxrQkFBa0IsR0FBRyxPQUFPRSxJQUFJLEtBQUssV0FBVyxJQUFJQSxJQUFJLENBQUNGLGtCQUFrQixJQUFJRSxJQUFJLENBQUNGLGtCQUFrQixDQUFDRyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxJQUFJLFNBQVNVLEVBQUUsRUFBRTtJQUN0SSxPQUFPQyxZQUFZLENBQUNELEVBQUUsQ0FBQyxDQUFDO0NBQzNCO0FBQ0RoQiwwQkFBMEIsR0FBR0Usa0JBQWtCLENBQUM7QUFFaEQsSUFBSSxDQUFDLE9BQU9GLE9BQU8sQ0FBQ2tCLE9BQU8sS0FBSyxVQUFVLElBQUssT0FBT2xCLE9BQU8sQ0FBQ2tCLE9BQU8sS0FBSyxRQUFRLElBQUlsQixPQUFPLENBQUNrQixPQUFPLEtBQUssSUFBSSxDQUFFLElBQUksT0FBT2xCLE9BQU8sQ0FBQ2tCLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLFdBQVcsRUFBRTtJQUNyS3JCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLENBQUNrQixPQUFPLEVBQUUsWUFBWSxFQUFFO1FBQUVqQixLQUFLLEVBQUUsSUFBSTtLQUFFLENBQUMsQ0FBQztJQUN0RUgsTUFBTSxDQUFDc0IsTUFBTSxDQUFDcEIsT0FBTyxDQUFDa0IsT0FBTyxFQUFFbEIsT0FBTyxDQUFDLENBQUM7SUFDeENxQixNQUFNLENBQUNyQixPQUFPLEdBQUdBLE9BQU8sQ0FBQ2tCLE9BQU8sQ0FBQztDQUNsQyxDQUVELGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL3BwYmwtZnJvbnQtZW5kLXRlbXBsYXRlLW5leHRqcy1tZXNoLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvcmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzPzFlMjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNhbmNlbElkbGVDYWxsYmFjayA9IGV4cG9ydHMucmVxdWVzdElkbGVDYWxsYmFjayA9IHZvaWQgMDtcbmNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICYmIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjay5iaW5kKHdpbmRvdykgfHwgZnVuY3Rpb24oY2IpIHtcbiAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBjYih7XG4gICAgICAgICAgICBkaWRUaW1lb3V0OiBmYWxzZSxcbiAgICAgICAgICAgIHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSwgMSk7XG59O1xuZXhwb3J0cy5yZXF1ZXN0SWRsZUNhbGxiYWNrID0gcmVxdWVzdElkbGVDYWxsYmFjaztcbmNvbnN0IGNhbmNlbElkbGVDYWxsYmFjayA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLmNhbmNlbElkbGVDYWxsYmFjayAmJiBzZWxmLmNhbmNlbElkbGVDYWxsYmFjay5iaW5kKHdpbmRvdykgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKTtcbn07XG5leHBvcnRzLmNhbmNlbElkbGVDYWxsYmFjayA9IGNhbmNlbElkbGVDYWxsYmFjaztcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNhbmNlbElkbGVDYWxsYmFjayIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJzZWxmIiwiYmluZCIsIndpbmRvdyIsImNiIiwic3RhcnQiLCJEYXRlIiwibm93Iiwic2V0VGltZW91dCIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwiTWF0aCIsIm1heCIsImlkIiwiY2xlYXJUaW1lb3V0IiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/request-idle-callback.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/route-loader.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/route-loader.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.markAssetError = markAssetError;\nexports.isAssetError = isAssetError;\nexports.getClientBuildManifest = getClientBuildManifest;\nexports.createRouteLoader = createRouteLoader;\nvar _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/utils/get-asset-path-from-route */ \"../shared/lib/router/utils/get-asset-path-from-route\"));\nvar _trustedTypes = __webpack_require__(/*! ./trusted-types */ \"./node_modules/next/dist/client/trusted-types.js\");\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n// 3.8s was arbitrarily chosen as it's what https://web.dev/interactive\n// considers as \"Good\" time-to-interactive. We must assume something went\n// wrong beyond this point, and then fall-back to a full page transition to\n// show the user something of value.\nconst MS_MAX_IDLE_DELAY = 3800;\nfunction withFuture(key, map, generator) {\n    let entry = map.get(key);\n    if (entry) {\n        if (\"future\" in entry) {\n            return entry.future;\n        }\n        return Promise.resolve(entry);\n    }\n    let resolver;\n    const prom = new Promise((resolve)=>{\n        resolver = resolve;\n    });\n    map.set(key, entry = {\n        resolve: resolver,\n        future: prom\n    });\n    return generator ? generator() // eslint-disable-next-line no-sequences\n    .then((value)=>(resolver(value), value)).catch((err)=>{\n        map.delete(key);\n        throw err;\n    }) : prom;\n}\nfunction hasPrefetch(link) {\n    try {\n        link = document.createElement(\"link\");\n        return(// with relList.support\n        (!!window.MSInputMethodContext && !!document.documentMode) || link.relList.supports(\"prefetch\"));\n    } catch (e) {\n        return false;\n    }\n}\nconst canPrefetch = hasPrefetch();\nfunction prefetchViaDom(href, as, link) {\n    return new Promise((res, rej)=>{\n        const selector = `\n      link[rel=\"prefetch\"][href^=\"${href}\"],\n      link[rel=\"preload\"][href^=\"${href}\"],\n      script[src^=\"${href}\"]`;\n        if (document.querySelector(selector)) {\n            return res();\n        }\n        link = document.createElement(\"link\");\n        // The order of property assignment here is intentional:\n        if (as) link.as = as;\n        link.rel = `prefetch`;\n        link.crossOrigin = undefined;\n        link.onload = res;\n        link.onerror = rej;\n        // `href` should always be last:\n        link.href = href;\n        document.head.appendChild(link);\n    });\n}\nconst ASSET_LOAD_ERROR = Symbol(\"ASSET_LOAD_ERROR\");\nfunction markAssetError(err) {\n    return Object.defineProperty(err, ASSET_LOAD_ERROR, {});\n}\nfunction isAssetError(err) {\n    return err && ASSET_LOAD_ERROR in err;\n}\nfunction appendScript(src, script) {\n    return new Promise((resolve, reject)=>{\n        script = document.createElement(\"script\");\n        // The order of property assignment here is intentional.\n        // 1. Setup success/failure hooks in case the browser synchronously\n        //    executes when `src` is set.\n        script.onload = resolve;\n        script.onerror = ()=>reject(markAssetError(new Error(`Failed to load script: ${src}`)));\n        // 2. Configure the cross-origin attribute before setting `src` in case the\n        //    browser begins to fetch.\n        script.crossOrigin = undefined;\n        // 3. Finally, set the source and inject into the DOM in case the child\n        //    must be appended for fetching to start.\n        script.src = src;\n        document.body.appendChild(script);\n    });\n}\n// We wait for pages to be built in dev before we start the route transition\n// timeout to prevent an un-necessary hard navigation in development.\nlet devBuildPromise;\n// Resolve a promise that times out after given amount of milliseconds.\nfunction resolvePromiseWithTimeout(p, ms, err) {\n    return new Promise((resolve, reject)=>{\n        let cancelled = false;\n        p.then((r)=>{\n            // Resolved, cancel the timeout\n            cancelled = true;\n            resolve(r);\n        }).catch(reject);\n        // We wrap these checks separately for better dead-code elimination in\n        // production bundles.\n        if (true) {\n            (devBuildPromise || Promise.resolve()).then(()=>{\n                (0, _requestIdleCallback).requestIdleCallback(()=>setTimeout(()=>{\n                        if (!cancelled) {\n                            reject(err);\n                        }\n                    }, ms));\n            });\n        }\n        if (false) {}\n    });\n}\nfunction getClientBuildManifest() {\n    if (self.__BUILD_MANIFEST) {\n        return Promise.resolve(self.__BUILD_MANIFEST);\n    }\n    const onBuildManifest = new Promise((resolve)=>{\n        // Mandatory because this is not concurrent safe:\n        const cb = self.__BUILD_MANIFEST_CB;\n        self.__BUILD_MANIFEST_CB = ()=>{\n            resolve(self.__BUILD_MANIFEST);\n            cb && cb();\n        };\n    });\n    return resolvePromiseWithTimeout(onBuildManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error(\"Failed to load client build manifest\")));\n}\nfunction getFilesForRoute(assetPrefix, route) {\n    if (true) {\n        const scriptUrl = assetPrefix + \"/_next/static/chunks/pages\" + encodeURI((0, _getAssetPathFromRoute).default(route, \".js\"));\n        return Promise.resolve({\n            scripts: [\n                (0, _trustedTypes).__unsafeCreateTrustedScriptURL(scriptUrl)\n            ],\n            // Styles are handled by `style-loader` in development:\n            css: []\n        });\n    }\n    return getClientBuildManifest().then((manifest)=>{\n        if (!(route in manifest)) {\n            throw markAssetError(new Error(`Failed to lookup route: ${route}`));\n        }\n        const allFiles = manifest[route].map((entry)=>assetPrefix + \"/_next/\" + encodeURI(entry));\n        return {\n            scripts: allFiles.filter((v)=>v.endsWith(\".js\")).map((v)=>(0, _trustedTypes).__unsafeCreateTrustedScriptURL(v)),\n            css: allFiles.filter((v)=>v.endsWith(\".css\"))\n        };\n    });\n}\nfunction createRouteLoader(assetPrefix) {\n    const entrypoints = new Map();\n    const loadedScripts = new Map();\n    const styleSheets = new Map();\n    const routes = new Map();\n    function maybeExecuteScript(src) {\n        // With HMR we might need to \"reload\" scripts when they are\n        // disposed and readded. Executing scripts twice has no functional\n        // differences\n        if (false) {} else {\n            return appendScript(src);\n        }\n    }\n    function fetchStyleSheet(href) {\n        let prom = styleSheets.get(href);\n        if (prom) {\n            return prom;\n        }\n        styleSheets.set(href, prom = fetch(href).then((res)=>{\n            if (!res.ok) {\n                throw new Error(`Failed to load stylesheet: ${href}`);\n            }\n            return res.text().then((text)=>({\n                    href: href,\n                    content: text\n                }));\n        }).catch((err)=>{\n            throw markAssetError(err);\n        }));\n        return prom;\n    }\n    return {\n        whenEntrypoint (route) {\n            return withFuture(route, entrypoints);\n        },\n        onEntrypoint (route, execute) {\n            (execute ? Promise.resolve().then(()=>execute()).then((exports1)=>({\n                    component: exports1 && exports1.default || exports1,\n                    exports: exports1\n                }), (err)=>({\n                    error: err\n                })) : Promise.resolve(undefined)).then((input)=>{\n                const old = entrypoints.get(route);\n                if (old && \"resolve\" in old) {\n                    if (input) {\n                        entrypoints.set(route, input);\n                        old.resolve(input);\n                    }\n                } else {\n                    if (input) {\n                        entrypoints.set(route, input);\n                    } else {\n                        entrypoints.delete(route);\n                    }\n                    // when this entrypoint has been resolved before\n                    // the route is outdated and we want to invalidate\n                    // this cache entry\n                    routes.delete(route);\n                }\n            });\n        },\n        loadRoute (route, prefetch) {\n            return withFuture(route, routes, ()=>{\n                let devBuildPromiseResolve;\n                if (true) {\n                    devBuildPromise = new Promise((resolve)=>{\n                        devBuildPromiseResolve = resolve;\n                    });\n                }\n                return resolvePromiseWithTimeout(getFilesForRoute(assetPrefix, route).then(({ scripts , css  })=>{\n                    return Promise.all([\n                        entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)),\n                        Promise.all(css.map(fetchStyleSheet)), \n                    ]);\n                }).then((res)=>{\n                    return this.whenEntrypoint(route).then((entrypoint)=>({\n                            entrypoint,\n                            styles: res[1]\n                        }));\n                }), MS_MAX_IDLE_DELAY, markAssetError(new Error(`Route did not complete loading: ${route}`))).then(({ entrypoint , styles  })=>{\n                    const res = Object.assign({\n                        styles: styles\n                    }, entrypoint);\n                    return \"error\" in entrypoint ? entrypoint : res;\n                }).catch((err)=>{\n                    if (prefetch) {\n                        // we don't want to cache errors during prefetch\n                        throw err;\n                    }\n                    return {\n                        error: err\n                    };\n                }).finally(()=>{\n                    return devBuildPromiseResolve == null ? void 0 : devBuildPromiseResolve();\n                });\n            });\n        },\n        prefetch (route) {\n            // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118\n            // License: Apache 2.0\n            let cn;\n            if (cn = navigator.connection) {\n                // Don't prefetch if using 2G or if Save-Data is enabled.\n                if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();\n            }\n            return getFilesForRoute(assetPrefix, route).then((output)=>Promise.all(canPrefetch ? output.scripts.map((script)=>prefetchViaDom(script.toString(), \"script\")) : [])).then(()=>{\n                (0, _requestIdleCallback).requestIdleCallback(()=>this.loadRoute(route, true).catch(()=>{}));\n            }).catch(()=>{});\n        }\n    };\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=route-loader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/route-loader.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/script.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/script.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.handleClientScriptLoad = handleClientScriptLoad;\nexports.initScriptLoader = initScriptLoader;\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _headManagerContext = __webpack_require__(/*! ../shared/lib/head-manager-context */ \"../shared/lib/head-manager-context\");\nvar _headManager = __webpack_require__(/*! ./head-manager */ \"./node_modules/next/dist/client/head-manager.js\");\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\");\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nconst ScriptCache = new Map();\nconst LoadCache = new Set();\nconst ignoreProps = [\n    \"onLoad\",\n    \"dangerouslySetInnerHTML\",\n    \"children\",\n    \"onError\",\n    \"strategy\", \n];\nconst loadScript = (props)=>{\n    const { src , id , onLoad =()=>{} , dangerouslySetInnerHTML , children =\"\" , strategy =\"afterInteractive\" , onError ,  } = props;\n    const cacheKey = id || src;\n    // Script has already loaded\n    if (cacheKey && LoadCache.has(cacheKey)) {\n        return;\n    }\n    // Contents of this script are already loading/loaded\n    if (ScriptCache.has(src)) {\n        LoadCache.add(cacheKey);\n        // Execute onLoad since the script loading has begun\n        ScriptCache.get(src).then(onLoad, onError);\n        return;\n    }\n    const el = document.createElement(\"script\");\n    const loadPromise = new Promise((resolve, reject)=>{\n        el.addEventListener(\"load\", function(e) {\n            resolve();\n            if (onLoad) {\n                onLoad.call(this, e);\n            }\n        });\n        el.addEventListener(\"error\", function(e) {\n            reject(e);\n        });\n    }).catch(function(e) {\n        if (onError) {\n            onError(e);\n        }\n    });\n    if (src) {\n        ScriptCache.set(src, loadPromise);\n    }\n    LoadCache.add(cacheKey);\n    if (dangerouslySetInnerHTML) {\n        el.innerHTML = dangerouslySetInnerHTML.__html || \"\";\n    } else if (children) {\n        el.textContent = typeof children === \"string\" ? children : Array.isArray(children) ? children.join(\"\") : \"\";\n    } else if (src) {\n        el.src = src;\n    }\n    for (const [k, value] of Object.entries(props)){\n        if (value === undefined || ignoreProps.includes(k)) {\n            continue;\n        }\n        const attr = _headManager.DOMAttributeNames[k] || k.toLowerCase();\n        el.setAttribute(attr, value);\n    }\n    if (strategy === \"worker\") {\n        el.setAttribute(\"type\", \"text/partytown\");\n    }\n    el.setAttribute(\"data-nscript\", strategy);\n    document.body.appendChild(el);\n};\nfunction handleClientScriptLoad(props) {\n    const { strategy =\"afterInteractive\"  } = props;\n    if (strategy === \"lazyOnload\") {\n        window.addEventListener(\"load\", ()=>{\n            (0, _requestIdleCallback).requestIdleCallback(()=>loadScript(props));\n        });\n    } else {\n        loadScript(props);\n    }\n}\nfunction loadLazyScript(props) {\n    if (document.readyState === \"complete\") {\n        (0, _requestIdleCallback).requestIdleCallback(()=>loadScript(props));\n    } else {\n        window.addEventListener(\"load\", ()=>{\n            (0, _requestIdleCallback).requestIdleCallback(()=>loadScript(props));\n        });\n    }\n}\nfunction addBeforeInteractiveToCache() {\n    const scripts = [\n        ...document.querySelectorAll('[data-nscript=\"beforeInteractive\"]'),\n        ...document.querySelectorAll('[data-nscript=\"beforePageRender\"]'), \n    ];\n    scripts.forEach((script)=>{\n        const cacheKey = script.id || script.getAttribute(\"src\");\n        LoadCache.add(cacheKey);\n    });\n}\nfunction initScriptLoader(scriptLoaderItems) {\n    scriptLoaderItems.forEach(handleClientScriptLoad);\n    addBeforeInteractiveToCache();\n}\nfunction Script(props) {\n    const { src =\"\" , onLoad =()=>{} , strategy =\"afterInteractive\" , onError  } = props, restProps = _objectWithoutPropertiesLoose(props, [\n        \"src\",\n        \"onLoad\",\n        \"strategy\",\n        \"onError\"\n    ]);\n    // Context is available only during SSR\n    const { updateScripts , scripts , getIsSsr  } = (0, _react).useContext(_headManagerContext.HeadManagerContext);\n    (0, _react).useEffect(()=>{\n        if (strategy === \"afterInteractive\") {\n            loadScript(props);\n        } else if (strategy === \"lazyOnload\") {\n            loadLazyScript(props);\n        }\n    }, [\n        props,\n        strategy\n    ]);\n    if (strategy === \"beforeInteractive\" || strategy === \"worker\") {\n        if (updateScripts) {\n            scripts[strategy] = (scripts[strategy] || []).concat([\n                _extends({\n                    src,\n                    onLoad,\n                    onError\n                }, restProps), \n            ]);\n            updateScripts(scripts);\n        } else if (getIsSsr && getIsSsr()) {\n            // Script has already loaded during SSR\n            LoadCache.add(restProps.id || src);\n        } else if (getIsSsr && !getIsSsr()) {\n            loadScript(props);\n        }\n    }\n    return null;\n}\nvar _default = Script;\nexports[\"default\"] = _default;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=script.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9zY3JpcHQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxLQUFLLEVBQUUsSUFBSTtDQUNkLEVBQUMsQ0FBQztBQUNIRCw4QkFBOEIsR0FBR0Usc0JBQXNCLENBQUM7QUFDeERGLHdCQUF3QixHQUFHRyxnQkFBZ0IsQ0FBQztBQUM1Q0gsa0JBQWUsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN6QixJQUFJSyxNQUFNLEdBQUdDLHVCQUF1QixDQUFDQyxtQkFBTyxDQUFDLG9CQUFPLENBQUMsQ0FBQztBQUN0RCxJQUFJQyxtQkFBbUIsR0FBR0QsbUJBQU8sQ0FBQyw4RUFBb0MsQ0FBQztBQUN2RSxJQUFJRSxZQUFZLEdBQUdGLG1CQUFPLENBQUMsdUVBQWdCLENBQUM7QUFDNUMsSUFBSUcsb0JBQW9CLEdBQUdILG1CQUFPLENBQUMseUZBQXlCLENBQUM7QUFDN0QsU0FBU0ksUUFBUSxHQUFHO0lBQ2hCQSxRQUFRLEdBQUdiLE1BQU0sQ0FBQ2MsTUFBTSxJQUFJLFNBQVNDLE1BQU0sRUFBRTtRQUN6QyxJQUFJLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFNLEVBQUVGLENBQUMsRUFBRSxDQUFDO1lBQ3JDLElBQUlHLE1BQU0sR0FBR0YsU0FBUyxDQUFDRCxDQUFDLENBQUM7WUFDekIsSUFBSSxJQUFJSSxHQUFHLElBQUlELE1BQU0sQ0FBQztnQkFDbEIsSUFBSW5CLE1BQU0sQ0FBQ3FCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLE1BQU0sRUFBRUMsR0FBRyxDQUFDLEVBQUU7b0JBQ25ETCxNQUFNLENBQUNLLEdBQUcsQ0FBQyxHQUFHRCxNQUFNLENBQUNDLEdBQUcsQ0FBQyxDQUFDO2lCQUM3QjthQUNKO1NBQ0o7UUFDRCxPQUFPTCxNQUFNLENBQUM7S0FDakIsQ0FBQztJQUNGLE9BQU9GLFFBQVEsQ0FBQ1csS0FBSyxDQUFDLElBQUksRUFBRVAsU0FBUyxDQUFDLENBQUM7Q0FDMUM7QUFDRCxTQUFTUSx3QkFBd0IsR0FBRztJQUNoQyxJQUFJLE9BQU9DLE9BQU8sS0FBSyxVQUFVLEVBQUUsT0FBTyxJQUFJLENBQUM7SUFDL0MsSUFBSUMsS0FBSyxHQUFHLElBQUlELE9BQU8sRUFBRTtJQUN6QkQsd0JBQXdCLEdBQUcsV0FBVztRQUNsQyxPQUFPRSxLQUFLLENBQUM7S0FDaEIsQ0FBQztJQUNGLE9BQU9BLEtBQUssQ0FBQztDQUNoQjtBQUNELFNBQVNuQix1QkFBdUIsQ0FBQ29CLEdBQUcsRUFBRTtJQUNsQyxJQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBVSxFQUFFO1FBQ3ZCLE9BQU9ELEdBQUcsQ0FBQztLQUNkO0lBQ0QsSUFBSUEsR0FBRyxLQUFLLElBQUksSUFBSSxPQUFPQSxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU9BLEdBQUcsS0FBSyxVQUFVLEVBQUU7UUFDdEUsT0FBTztZQUNIdEIsT0FBTyxFQUFFc0IsR0FBRztTQUNmLENBQUM7S0FDTDtJQUNELElBQUlELEtBQUssR0FBR0Ysd0JBQXdCLEVBQUU7SUFDdEMsSUFBSUUsS0FBSyxJQUFJQSxLQUFLLENBQUNHLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDLEVBQUU7UUFDekIsT0FBT0QsS0FBSyxDQUFDSSxHQUFHLENBQUNILEdBQUcsQ0FBQyxDQUFDO0tBQ3pCO0lBQ0QsSUFBSUksTUFBTSxHQUFHLEVBQUU7SUFDZixJQUFJQyxxQkFBcUIsR0FBR2pDLE1BQU0sQ0FBQ0MsY0FBYyxJQUFJRCxNQUFNLENBQUNrQyx3QkFBd0I7SUFDcEYsSUFBSSxJQUFJZCxHQUFHLElBQUlRLEdBQUcsQ0FBQztRQUNmLElBQUk1QixNQUFNLENBQUNxQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSyxHQUFHLEVBQUVSLEdBQUcsQ0FBQyxFQUFFO1lBQ2hELElBQUllLElBQUksR0FBR0YscUJBQXFCLEdBQUdqQyxNQUFNLENBQUNrQyx3QkFBd0IsQ0FBQ04sR0FBRyxFQUFFUixHQUFHLENBQUMsR0FBRyxJQUFJO1lBQ25GLElBQUllLElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUNKLEdBQUcsSUFBSUksSUFBSSxDQUFDQyxHQUFHLENBQUMsRUFBRTtnQkFDaENwQyxNQUFNLENBQUNDLGNBQWMsQ0FBQytCLE1BQU0sRUFBRVosR0FBRyxFQUFFZSxJQUFJLENBQUMsQ0FBQzthQUM1QyxNQUFNO2dCQUNISCxNQUFNLENBQUNaLEdBQUcsQ0FBQyxHQUFHUSxHQUFHLENBQUNSLEdBQUcsQ0FBQyxDQUFDO2FBQzFCO1NBQ0o7S0FDSjtJQUNEWSxNQUFNLENBQUMxQixPQUFPLEdBQUdzQixHQUFHLENBQUM7SUFDckIsSUFBSUQsS0FBSyxFQUFFO1FBQ1BBLEtBQUssQ0FBQ1MsR0FBRyxDQUFDUixHQUFHLEVBQUVJLE1BQU0sQ0FBQyxDQUFDO0tBQzFCO0lBQ0QsT0FBT0EsTUFBTSxDQUFDO0NBQ2pCO0FBQ0QsU0FBU0ssNkJBQTZCLENBQUNsQixNQUFNLEVBQUVtQixRQUFRLEVBQUU7SUFDckQsSUFBSW5CLE1BQU0sSUFBSSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7SUFDOUIsSUFBSUosTUFBTSxHQUFHLEVBQUU7SUFDZixJQUFJd0IsVUFBVSxHQUFHdkMsTUFBTSxDQUFDd0MsSUFBSSxDQUFDckIsTUFBTSxDQUFDO0lBQ3BDLElBQUlDLEdBQUcsRUFBRUosQ0FBQztJQUNWLElBQUlBLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR3VCLFVBQVUsQ0FBQ3JCLE1BQU0sRUFBRUYsQ0FBQyxFQUFFLENBQUM7UUFDbENJLEdBQUcsR0FBR21CLFVBQVUsQ0FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUlzQixRQUFRLENBQUNHLE9BQU8sQ0FBQ3JCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTO1FBQ3pDTCxNQUFNLENBQUNLLEdBQUcsQ0FBQyxHQUFHRCxNQUFNLENBQUNDLEdBQUcsQ0FBQyxDQUFDO0tBQzdCO0lBQ0QsT0FBT0wsTUFBTSxDQUFDO0NBQ2pCO0FBQ0QsTUFBTTJCLFdBQVcsR0FBRyxJQUFJQyxHQUFHLEVBQUU7QUFDN0IsTUFBTUMsU0FBUyxHQUFHLElBQUlDLEdBQUcsRUFBRTtBQUMzQixNQUFNQyxXQUFXLEdBQUc7SUFDaEIsUUFBUTtJQUNSLHlCQUF5QjtJQUN6QixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7Q0FDYjtBQUNELE1BQU1DLFVBQVUsR0FBRyxDQUFDQyxLQUFLLEdBQUc7SUFDeEIsTUFBTSxFQUFFQyxHQUFHLEdBQUdDLEVBQUUsR0FBR0MsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHQyx1QkFBdUIsR0FBR0MsUUFBUSxFQUFFLEVBQUUsR0FBR0MsUUFBUSxFQUFFLGtCQUFrQixHQUFHQyxPQUFPLEtBQUssR0FBR1AsS0FBSztJQUNoSSxNQUFNUSxRQUFRLEdBQUdOLEVBQUUsSUFBSUQsR0FBRztJQUMxQiw0QkFBNEI7SUFDNUIsSUFBSU8sUUFBUSxJQUFJWixTQUFTLENBQUNkLEdBQUcsQ0FBQzBCLFFBQVEsQ0FBQyxFQUFFO1FBQ3JDLE9BQU87S0FDVjtJQUNELHFEQUFxRDtJQUNyRCxJQUFJZCxXQUFXLENBQUNaLEdBQUcsQ0FBQ21CLEdBQUcsQ0FBQyxFQUFFO1FBQ3RCTCxTQUFTLENBQUNhLEdBQUcsQ0FBQ0QsUUFBUSxDQUFDLENBQUM7UUFDeEIsb0RBQW9EO1FBQ3BEZCxXQUFXLENBQUNYLEdBQUcsQ0FBQ2tCLEdBQUcsQ0FBQyxDQUFDUyxJQUFJLENBQUNQLE1BQU0sRUFBRUksT0FBTyxDQUFDLENBQUM7UUFDM0MsT0FBTztLQUNWO0lBQ0QsTUFBTUksRUFBRSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDM0MsTUFBTUMsV0FBVyxHQUFHLElBQUlDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sR0FBRztRQUMvQ04sRUFBRSxDQUFDTyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsU0FBU0MsQ0FBQyxFQUFFO1lBQ3BDSCxPQUFPLEVBQUUsQ0FBQztZQUNWLElBQUliLE1BQU0sRUFBRTtnQkFDUkEsTUFBTSxDQUFDNUIsSUFBSSxDQUFDLElBQUksRUFBRTRDLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO1NBQ0osQ0FBQyxDQUFDO1FBQ0hSLEVBQUUsQ0FBQ08sZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFNBQVNDLENBQUMsRUFBRTtZQUNyQ0YsTUFBTSxDQUFDRSxDQUFDLENBQUMsQ0FBQztTQUNiLENBQUMsQ0FBQztLQUNOLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLFNBQVNELENBQUMsRUFBRTtRQUNqQixJQUFJWixPQUFPLEVBQUU7WUFDVEEsT0FBTyxDQUFDWSxDQUFDLENBQUMsQ0FBQztTQUNkO0tBQ0osQ0FBQztJQUNGLElBQUlsQixHQUFHLEVBQUU7UUFDTFAsV0FBVyxDQUFDTixHQUFHLENBQUNhLEdBQUcsRUFBRWEsV0FBVyxDQUFDLENBQUM7S0FDckM7SUFDRGxCLFNBQVMsQ0FBQ2EsR0FBRyxDQUFDRCxRQUFRLENBQUMsQ0FBQztJQUN4QixJQUFJSix1QkFBdUIsRUFBRTtRQUN6Qk8sRUFBRSxDQUFDVSxTQUFTLEdBQUdqQix1QkFBdUIsQ0FBQ2tCLE1BQU0sSUFBSSxFQUFFLENBQUM7S0FDdkQsTUFBTSxJQUFJakIsUUFBUSxFQUFFO1FBQ2pCTSxFQUFFLENBQUNZLFdBQVcsR0FBRyxPQUFPbEIsUUFBUSxLQUFLLFFBQVEsR0FBR0EsUUFBUSxHQUFHbUIsS0FBSyxDQUFDQyxPQUFPLENBQUNwQixRQUFRLENBQUMsR0FBR0EsUUFBUSxDQUFDcUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUMvRyxNQUFNLElBQUl6QixHQUFHLEVBQUU7UUFDWlUsRUFBRSxDQUFDVixHQUFHLEdBQUdBLEdBQUcsQ0FBQztLQUNoQjtJQUNELEtBQUssTUFBTSxDQUFDMEIsQ0FBQyxFQUFFeEUsS0FBSyxDQUFDLElBQUlILE1BQU0sQ0FBQzRFLE9BQU8sQ0FBQzVCLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUk3QyxLQUFLLEtBQUswRSxTQUFTLElBQUkvQixXQUFXLENBQUNnQyxRQUFRLENBQUNILENBQUMsQ0FBQyxFQUFFO1lBQ2hELFNBQVM7U0FDWjtRQUNELE1BQU1JLElBQUksR0FBR3BFLFlBQVksQ0FBQ3FFLGlCQUFpQixDQUFDTCxDQUFDLENBQUMsSUFBSUEsQ0FBQyxDQUFDTSxXQUFXLEVBQUU7UUFDakV0QixFQUFFLENBQUN1QixZQUFZLENBQUNILElBQUksRUFBRTVFLEtBQUssQ0FBQyxDQUFDO0tBQ2hDO0lBQ0QsSUFBSW1ELFFBQVEsS0FBSyxRQUFRLEVBQUU7UUFDdkJLLEVBQUUsQ0FBQ3VCLFlBQVksQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztLQUM3QztJQUNEdkIsRUFBRSxDQUFDdUIsWUFBWSxDQUFDLGNBQWMsRUFBRTVCLFFBQVEsQ0FBQyxDQUFDO0lBQzFDTSxRQUFRLENBQUN1QixJQUFJLENBQUNDLFdBQVcsQ0FBQ3pCLEVBQUUsQ0FBQyxDQUFDO0NBQ2pDO0FBQ0QsU0FBU3ZELHNCQUFzQixDQUFDNEMsS0FBSyxFQUFFO0lBQ25DLE1BQU0sRUFBRU0sUUFBUSxFQUFFLGtCQUFrQixHQUFHLEdBQUdOLEtBQUs7SUFDL0MsSUFBSU0sUUFBUSxLQUFLLFlBQVksRUFBRTtRQUMzQitCLE1BQU0sQ0FBQ25CLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxJQUFJO1lBQ2hDLENBQUMsQ0FBQyxFQUFFdEQsb0JBQW9CLENBQUMsQ0FBQzBFLG1CQUFtQixDQUFDLElBQUl2QyxVQUFVLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDeEUsQ0FBQyxDQUFDO0tBQ04sTUFBTTtRQUNIRCxVQUFVLENBQUNDLEtBQUssQ0FBQyxDQUFDO0tBQ3JCO0NBQ0o7QUFDRCxTQUFTdUMsY0FBYyxDQUFDdkMsS0FBSyxFQUFFO0lBQzNCLElBQUlZLFFBQVEsQ0FBQzRCLFVBQVUsS0FBSyxVQUFVLEVBQUU7UUFDcEMsQ0FBQyxDQUFDLEVBQUU1RSxvQkFBb0IsQ0FBQyxDQUFDMEUsbUJBQW1CLENBQUMsSUFBSXZDLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUN4RSxNQUFNO1FBQ0hxQyxNQUFNLENBQUNuQixnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSTtZQUNoQyxDQUFDLENBQUMsRUFBRXRELG9CQUFvQixDQUFDLENBQUMwRSxtQkFBbUIsQ0FBQyxJQUFJdkMsVUFBVSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3hFLENBQUMsQ0FBQztLQUNOO0NBQ0o7QUFDRCxTQUFTeUMsMkJBQTJCLEdBQUc7SUFDbkMsTUFBTUMsT0FBTyxHQUFHO1dBQ1Q5QixRQUFRLENBQUMrQixnQkFBZ0IsQ0FBQyxvQ0FBb0MsQ0FBQztXQUMvRC9CLFFBQVEsQ0FBQytCLGdCQUFnQixDQUFDLG1DQUFtQyxDQUFDO0tBQ3BFO0lBQ0RELE9BQU8sQ0FBQ0UsT0FBTyxDQUFDLENBQUNDLE1BQU0sR0FBRztRQUN0QixNQUFNckMsUUFBUSxHQUFHcUMsTUFBTSxDQUFDM0MsRUFBRSxJQUFJMkMsTUFBTSxDQUFDQyxZQUFZLENBQUMsS0FBSyxDQUFDO1FBQ3hEbEQsU0FBUyxDQUFDYSxHQUFHLENBQUNELFFBQVEsQ0FBQyxDQUFDO0tBQzNCLENBQUMsQ0FBQztDQUNOO0FBQ0QsU0FBU25ELGdCQUFnQixDQUFDMEYsaUJBQWlCLEVBQUU7SUFDekNBLGlCQUFpQixDQUFDSCxPQUFPLENBQUN4RixzQkFBc0IsQ0FBQyxDQUFDO0lBQ2xEcUYsMkJBQTJCLEVBQUUsQ0FBQztDQUNqQztBQUNELFNBQVNPLE1BQU0sQ0FBQ2hELEtBQUssRUFBRTtJQUNuQixNQUFNLEVBQUVDLEdBQUcsRUFBRSxFQUFFLEdBQUdFLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBR0csUUFBUSxFQUFFLGtCQUFrQixHQUFHQyxPQUFPLEdBQUcsR0FBR1AsS0FBSyxFQUFFaUQsU0FBUyxHQUFHNUQsNkJBQTZCLENBQUNXLEtBQUssRUFBRTtRQUNuSSxLQUFLO1FBQ0wsUUFBUTtRQUNSLFVBQVU7UUFDVixTQUFTO0tBQ1osQ0FBQztJQUNGLHVDQUF1QztJQUN2QyxNQUFNLEVBQUVrRCxhQUFhLEdBQUdSLE9BQU8sR0FBR1MsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUU1RixNQUFNLENBQUMsQ0FBQzZGLFVBQVUsQ0FBQzFGLG1CQUFtQixDQUFDMkYsa0JBQWtCLENBQUM7SUFDOUcsQ0FBQyxDQUFDLEVBQUU5RixNQUFNLENBQUMsQ0FBQytGLFNBQVMsQ0FBQyxJQUFJO1FBQ3RCLElBQUloRCxRQUFRLEtBQUssa0JBQWtCLEVBQUU7WUFDakNQLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7U0FDckIsTUFBTSxJQUFJTSxRQUFRLEtBQUssWUFBWSxFQUFFO1lBQ2xDaUMsY0FBYyxDQUFDdkMsS0FBSyxDQUFDLENBQUM7U0FDekI7S0FDSixFQUFFO1FBQ0NBLEtBQUs7UUFDTE0sUUFBUTtLQUNYLENBQUMsQ0FBQztJQUNILElBQUlBLFFBQVEsS0FBSyxtQkFBbUIsSUFBSUEsUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUMzRCxJQUFJNEMsYUFBYSxFQUFFO1lBQ2ZSLE9BQU8sQ0FBQ3BDLFFBQVEsQ0FBQyxHQUFHLENBQUNvQyxPQUFPLENBQUNwQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQ2lELE1BQU0sQ0FBQztnQkFDakQxRixRQUFRLENBQUM7b0JBQ0xvQyxHQUFHO29CQUNIRSxNQUFNO29CQUNOSSxPQUFPO2lCQUNWLEVBQUUwQyxTQUFTLENBQUM7YUFDaEIsQ0FBQyxDQUFDO1lBQ0hDLGFBQWEsQ0FBQ1IsT0FBTyxDQUFDLENBQUM7U0FDMUIsTUFBTSxJQUFJUyxRQUFRLElBQUlBLFFBQVEsRUFBRSxFQUFFO1lBQy9CLHVDQUF1QztZQUN2Q3ZELFNBQVMsQ0FBQ2EsR0FBRyxDQUFDd0MsU0FBUyxDQUFDL0MsRUFBRSxJQUFJRCxHQUFHLENBQUMsQ0FBQztTQUN0QyxNQUFNLElBQUlrRCxRQUFRLElBQUksQ0FBQ0EsUUFBUSxFQUFFLEVBQUU7WUFDaENwRCxVQUFVLENBQUNDLEtBQUssQ0FBQyxDQUFDO1NBQ3JCO0tBQ0o7SUFDRCxPQUFPLElBQUksQ0FBQztDQUNmO0FBQ0QsSUFBSXdELFFBQVEsR0FBR1IsTUFBTTtBQUNyQjlGLGtCQUFlLEdBQUdzRyxRQUFRLENBQUM7QUFFM0IsSUFBSSxDQUFDLE9BQU90RyxPQUFPLENBQUNJLE9BQU8sS0FBSyxVQUFVLElBQUssT0FBT0osT0FBTyxDQUFDSSxPQUFPLEtBQUssUUFBUSxJQUFJSixPQUFPLENBQUNJLE9BQU8sS0FBSyxJQUFJLENBQUUsSUFBSSxPQUFPSixPQUFPLENBQUNJLE9BQU8sQ0FBQ3VCLFVBQVUsS0FBSyxXQUFXLEVBQUU7SUFDcks3QixNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxDQUFDSSxPQUFPLEVBQUUsWUFBWSxFQUFFO1FBQUVILEtBQUssRUFBRSxJQUFJO0tBQUUsQ0FBQyxDQUFDO0lBQ3RFSCxNQUFNLENBQUNjLE1BQU0sQ0FBQ1osT0FBTyxDQUFDSSxPQUFPLEVBQUVKLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDdUcsTUFBTSxDQUFDdkcsT0FBTyxHQUFHQSxPQUFPLENBQUNJLE9BQU8sQ0FBQztDQUNsQyxDQUVELGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BwYmwtZnJvbnQtZW5kLXRlbXBsYXRlLW5leHRqcy1tZXNoLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvc2NyaXB0LmpzP2JkNmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmhhbmRsZUNsaWVudFNjcmlwdExvYWQgPSBoYW5kbGVDbGllbnRTY3JpcHRMb2FkO1xuZXhwb3J0cy5pbml0U2NyaXB0TG9hZGVyID0gaW5pdFNjcmlwdExvYWRlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9oZWFkTWFuYWdlckNvbnRleHQgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9oZWFkLW1hbmFnZXItY29udGV4dFwiKTtcbnZhciBfaGVhZE1hbmFnZXIgPSByZXF1aXJlKFwiLi9oZWFkLW1hbmFnZXJcIik7XG52YXIgX3JlcXVlc3RJZGxlQ2FsbGJhY2sgPSByZXF1aXJlKFwiLi9yZXF1ZXN0LWlkbGUtY2FsbGJhY2tcIik7XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgIGZvcih2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvcih2YXIga2V5IGluIHNvdXJjZSl7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkge1xuICAgIGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuICAgIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgfTtcbiAgICByZXR1cm4gY2FjaGU7XG59XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHtcbiAgICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IG9ialxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTtcbiAgICBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICAgIH1cbiAgICB2YXIgbmV3T2JqID0ge307XG4gICAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIGZvcih2YXIga2V5IGluIG9iail7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG5ld09iai5kZWZhdWx0ID0gb2JqO1xuICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZS5zZXQob2JqLCBuZXdPYmopO1xuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqO1xufVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICAgIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICAgIHZhciB0YXJnZXQgPSB7fTtcbiAgICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgdmFyIGtleSwgaTtcbiAgICBmb3IoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmNvbnN0IFNjcmlwdENhY2hlID0gbmV3IE1hcCgpO1xuY29uc3QgTG9hZENhY2hlID0gbmV3IFNldCgpO1xuY29uc3QgaWdub3JlUHJvcHMgPSBbXG4gICAgJ29uTG9hZCcsXG4gICAgJ2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MJyxcbiAgICAnY2hpbGRyZW4nLFxuICAgICdvbkVycm9yJyxcbiAgICAnc3RyYXRlZ3knLCBcbl07XG5jb25zdCBsb2FkU2NyaXB0ID0gKHByb3BzKT0+e1xuICAgIGNvbnN0IHsgc3JjICwgaWQgLCBvbkxvYWQgPSgpPT57fSAsIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICwgY2hpbGRyZW4gPScnICwgc3RyYXRlZ3kgPSdhZnRlckludGVyYWN0aXZlJyAsIG9uRXJyb3IgLCAgfSA9IHByb3BzO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gaWQgfHwgc3JjO1xuICAgIC8vIFNjcmlwdCBoYXMgYWxyZWFkeSBsb2FkZWRcbiAgICBpZiAoY2FjaGVLZXkgJiYgTG9hZENhY2hlLmhhcyhjYWNoZUtleSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDb250ZW50cyBvZiB0aGlzIHNjcmlwdCBhcmUgYWxyZWFkeSBsb2FkaW5nL2xvYWRlZFxuICAgIGlmIChTY3JpcHRDYWNoZS5oYXMoc3JjKSkge1xuICAgICAgICBMb2FkQ2FjaGUuYWRkKGNhY2hlS2V5KTtcbiAgICAgICAgLy8gRXhlY3V0ZSBvbkxvYWQgc2luY2UgdGhlIHNjcmlwdCBsb2FkaW5nIGhhcyBiZWd1blxuICAgICAgICBTY3JpcHRDYWNoZS5nZXQoc3JjKS50aGVuKG9uTG9hZCwgb25FcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBjb25zdCBsb2FkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICBpZiAob25Mb2FkKSB7XG4gICAgICAgICAgICAgICAgb25Mb2FkLmNhbGwodGhpcywgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgICAgb25FcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzcmMpIHtcbiAgICAgICAgU2NyaXB0Q2FjaGUuc2V0KHNyYywgbG9hZFByb21pc2UpO1xuICAgIH1cbiAgICBMb2FkQ2FjaGUuYWRkKGNhY2hlS2V5KTtcbiAgICBpZiAoZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpIHtcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sIHx8ICcnO1xuICAgIH0gZWxzZSBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSB0eXBlb2YgY2hpbGRyZW4gPT09ICdzdHJpbmcnID8gY2hpbGRyZW4gOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuLmpvaW4oJycpIDogJyc7XG4gICAgfSBlbHNlIGlmIChzcmMpIHtcbiAgICAgICAgZWwuc3JjID0gc3JjO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IFtrLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMpKXtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgaWdub3JlUHJvcHMuaW5jbHVkZXMoaykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF0dHIgPSBfaGVhZE1hbmFnZXIuRE9NQXR0cmlidXRlTmFtZXNba10gfHwgay50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAoc3RyYXRlZ3kgPT09ICd3b3JrZXInKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L3BhcnR5dG93bicpO1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbnNjcmlwdCcsIHN0cmF0ZWd5KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTtcbn07XG5mdW5jdGlvbiBoYW5kbGVDbGllbnRTY3JpcHRMb2FkKHByb3BzKSB7XG4gICAgY29uc3QgeyBzdHJhdGVneSA9J2FmdGVySW50ZXJhY3RpdmUnICB9ID0gcHJvcHM7XG4gICAgaWYgKHN0cmF0ZWd5ID09PSAnbGF6eU9ubG9hZCcpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKT0+e1xuICAgICAgICAgICAgKDAsIF9yZXF1ZXN0SWRsZUNhbGxiYWNrKS5yZXF1ZXN0SWRsZUNhbGxiYWNrKCgpPT5sb2FkU2NyaXB0KHByb3BzKSk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRTY3JpcHQocHJvcHMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxvYWRMYXp5U2NyaXB0KHByb3BzKSB7XG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgKDAsIF9yZXF1ZXN0SWRsZUNhbGxiYWNrKS5yZXF1ZXN0SWRsZUNhbGxiYWNrKCgpPT5sb2FkU2NyaXB0KHByb3BzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKT0+e1xuICAgICAgICAgICAgKDAsIF9yZXF1ZXN0SWRsZUNhbGxiYWNrKS5yZXF1ZXN0SWRsZUNhbGxiYWNrKCgpPT5sb2FkU2NyaXB0KHByb3BzKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZEJlZm9yZUludGVyYWN0aXZlVG9DYWNoZSgpIHtcbiAgICBjb25zdCBzY3JpcHRzID0gW1xuICAgICAgICAuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1uc2NyaXB0PVwiYmVmb3JlSW50ZXJhY3RpdmVcIl0nKSxcbiAgICAgICAgLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtbnNjcmlwdD1cImJlZm9yZVBhZ2VSZW5kZXJcIl0nKSwgXG4gICAgXTtcbiAgICBzY3JpcHRzLmZvckVhY2goKHNjcmlwdCk9PntcbiAgICAgICAgY29uc3QgY2FjaGVLZXkgPSBzY3JpcHQuaWQgfHwgc2NyaXB0LmdldEF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgICAgIExvYWRDYWNoZS5hZGQoY2FjaGVLZXkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaW5pdFNjcmlwdExvYWRlcihzY3JpcHRMb2FkZXJJdGVtcykge1xuICAgIHNjcmlwdExvYWRlckl0ZW1zLmZvckVhY2goaGFuZGxlQ2xpZW50U2NyaXB0TG9hZCk7XG4gICAgYWRkQmVmb3JlSW50ZXJhY3RpdmVUb0NhY2hlKCk7XG59XG5mdW5jdGlvbiBTY3JpcHQocHJvcHMpIHtcbiAgICBjb25zdCB7IHNyYyA9JycgLCBvbkxvYWQgPSgpPT57fSAsIHN0cmF0ZWd5ID0nYWZ0ZXJJbnRlcmFjdGl2ZScgLCBvbkVycm9yICB9ID0gcHJvcHMsIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXG4gICAgICAgIFwic3JjXCIsXG4gICAgICAgIFwib25Mb2FkXCIsXG4gICAgICAgIFwic3RyYXRlZ3lcIixcbiAgICAgICAgXCJvbkVycm9yXCJcbiAgICBdKTtcbiAgICAvLyBDb250ZXh0IGlzIGF2YWlsYWJsZSBvbmx5IGR1cmluZyBTU1JcbiAgICBjb25zdCB7IHVwZGF0ZVNjcmlwdHMgLCBzY3JpcHRzICwgZ2V0SXNTc3IgIH0gPSAoMCwgX3JlYWN0KS51c2VDb250ZXh0KF9oZWFkTWFuYWdlckNvbnRleHQuSGVhZE1hbmFnZXJDb250ZXh0KTtcbiAgICAoMCwgX3JlYWN0KS51c2VFZmZlY3QoKCk9PntcbiAgICAgICAgaWYgKHN0cmF0ZWd5ID09PSAnYWZ0ZXJJbnRlcmFjdGl2ZScpIHtcbiAgICAgICAgICAgIGxvYWRTY3JpcHQocHJvcHMpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmF0ZWd5ID09PSAnbGF6eU9ubG9hZCcpIHtcbiAgICAgICAgICAgIGxvYWRMYXp5U2NyaXB0KHByb3BzKTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHN0cmF0ZWd5XG4gICAgXSk7XG4gICAgaWYgKHN0cmF0ZWd5ID09PSAnYmVmb3JlSW50ZXJhY3RpdmUnIHx8IHN0cmF0ZWd5ID09PSAnd29ya2VyJykge1xuICAgICAgICBpZiAodXBkYXRlU2NyaXB0cykge1xuICAgICAgICAgICAgc2NyaXB0c1tzdHJhdGVneV0gPSAoc2NyaXB0c1tzdHJhdGVneV0gfHwgW10pLmNvbmNhdChbXG4gICAgICAgICAgICAgICAgX2V4dGVuZHMoe1xuICAgICAgICAgICAgICAgICAgICBzcmMsXG4gICAgICAgICAgICAgICAgICAgIG9uTG9hZCxcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvclxuICAgICAgICAgICAgICAgIH0sIHJlc3RQcm9wcyksIFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB1cGRhdGVTY3JpcHRzKHNjcmlwdHMpO1xuICAgICAgICB9IGVsc2UgaWYgKGdldElzU3NyICYmIGdldElzU3NyKCkpIHtcbiAgICAgICAgICAgIC8vIFNjcmlwdCBoYXMgYWxyZWFkeSBsb2FkZWQgZHVyaW5nIFNTUlxuICAgICAgICAgICAgTG9hZENhY2hlLmFkZChyZXN0UHJvcHMuaWQgfHwgc3JjKTtcbiAgICAgICAgfSBlbHNlIGlmIChnZXRJc1NzciAmJiAhZ2V0SXNTc3IoKSkge1xuICAgICAgICAgICAgbG9hZFNjcmlwdChwcm9wcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG52YXIgX2RlZmF1bHQgPSBTY3JpcHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NyaXB0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImhhbmRsZUNsaWVudFNjcmlwdExvYWQiLCJpbml0U2NyaXB0TG9hZGVyIiwiZGVmYXVsdCIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9oZWFkTWFuYWdlckNvbnRleHQiLCJfaGVhZE1hbmFnZXIiLCJfcmVxdWVzdElkbGVDYWxsYmFjayIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwib2JqIiwiX19lc01vZHVsZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlc2MiLCJzZXQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImtleXMiLCJpbmRleE9mIiwiU2NyaXB0Q2FjaGUiLCJNYXAiLCJMb2FkQ2FjaGUiLCJTZXQiLCJpZ25vcmVQcm9wcyIsImxvYWRTY3JpcHQiLCJwcm9wcyIsInNyYyIsImlkIiwib25Mb2FkIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsInN0cmF0ZWd5Iiwib25FcnJvciIsImNhY2hlS2V5IiwiYWRkIiwidGhlbiIsImVsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwibG9hZFByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiY2F0Y2giLCJpbm5lckhUTUwiLCJfX2h0bWwiLCJ0ZXh0Q29udGVudCIsIkFycmF5IiwiaXNBcnJheSIsImpvaW4iLCJrIiwiZW50cmllcyIsInVuZGVmaW5lZCIsImluY2x1ZGVzIiwiYXR0ciIsIkRPTUF0dHJpYnV0ZU5hbWVzIiwidG9Mb3dlckNhc2UiLCJzZXRBdHRyaWJ1dGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJ3aW5kb3ciLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwibG9hZExhenlTY3JpcHQiLCJyZWFkeVN0YXRlIiwiYWRkQmVmb3JlSW50ZXJhY3RpdmVUb0NhY2hlIiwic2NyaXB0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwic2NyaXB0IiwiZ2V0QXR0cmlidXRlIiwic2NyaXB0TG9hZGVySXRlbXMiLCJTY3JpcHQiLCJyZXN0UHJvcHMiLCJ1cGRhdGVTY3JpcHRzIiwiZ2V0SXNTc3IiLCJ1c2VDb250ZXh0IiwiSGVhZE1hbmFnZXJDb250ZXh0IiwidXNlRWZmZWN0IiwiY29uY2F0IiwiX2RlZmF1bHQiLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/script.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/trusted-types.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/client/trusted-types.js ***!
  \********************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.__unsafeCreateTrustedScriptURL = __unsafeCreateTrustedScriptURL;\n/**\n * Stores the Trusted Types Policy. Starts as undefined and can be set to null\n * if Trusted Types is not supported in the browser.\n */ let policy;\n/**\n * Getter for the Trusted Types Policy. If it is undefined, it is instantiated\n * here or set to null if Trusted Types is not supported in the browser.\n */ function getPolicy() {\n    if (typeof policy === \"undefined\" && \"undefined\" !== \"undefined\") { var ref; }\n    return policy;\n}\nfunction __unsafeCreateTrustedScriptURL(url) {\n    var ref;\n    return ((ref = getPolicy()) == null ? void 0 : ref.createScriptURL(url)) || url;\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=trusted-types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC90cnVzdGVkLXR5cGVzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csS0FBSyxFQUFFLElBQUk7Q0FDZCxFQUFDLENBQUM7QUFDSEQsc0NBQXNDLEdBQUdFLDhCQUE4QixDQUFDO0FBQ3hFOzs7R0FHRyxDQUFDLElBQUlDLE1BQU07QUFDZDs7O0dBR0csQ0FBQyxTQUFTQyxTQUFTLEdBQUc7SUFDckIsSUFBSSxPQUFPRCxNQUFNLEtBQUssV0FBVyxJQUFJLFdBQWEsS0FBSyxXQUFXLEVBQUUsWUFPbkU7SUFDRCxPQUFPQSxNQUFNLENBQUM7Q0FDakI7QUFDRCxTQUFTRCw4QkFBOEIsQ0FBQ1csR0FBRyxFQUFFO0lBQ3pDLElBQUlSLEdBQUc7SUFDUCxPQUFPLENBQUMsQ0FBQ0EsR0FBRyxHQUFHRCxTQUFTLEVBQUUsQ0FBQyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR0MsR0FBRyxDQUFDTyxlQUFlLENBQUNDLEdBQUcsQ0FBQyxDQUFDLElBQUlBLEdBQUcsQ0FBQztDQUNuRjtBQUVELElBQUksQ0FBQyxPQUFPYixPQUFPLENBQUNjLE9BQU8sS0FBSyxVQUFVLElBQUssT0FBT2QsT0FBTyxDQUFDYyxPQUFPLEtBQUssUUFBUSxJQUFJZCxPQUFPLENBQUNjLE9BQU8sS0FBSyxJQUFJLENBQUUsSUFBSSxPQUFPZCxPQUFPLENBQUNjLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLFdBQVcsRUFBRTtJQUNyS2pCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLENBQUNjLE9BQU8sRUFBRSxZQUFZLEVBQUU7UUFBRWIsS0FBSyxFQUFFLElBQUk7S0FBRSxDQUFDLENBQUM7SUFDdEVILE1BQU0sQ0FBQ2tCLE1BQU0sQ0FBQ2hCLE9BQU8sQ0FBQ2MsT0FBTyxFQUFFZCxPQUFPLENBQUMsQ0FBQztJQUN4Q2lCLE1BQU0sQ0FBQ2pCLE9BQU8sR0FBR0EsT0FBTyxDQUFDYyxPQUFPLENBQUM7Q0FDbEMsQ0FFRCx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcGJsLWZyb250LWVuZC10ZW1wbGF0ZS1uZXh0anMtbWVzaC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3RydXN0ZWQtdHlwZXMuanM/YTQxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuX191bnNhZmVDcmVhdGVUcnVzdGVkU2NyaXB0VVJMID0gX191bnNhZmVDcmVhdGVUcnVzdGVkU2NyaXB0VVJMO1xuLyoqXG4gKiBTdG9yZXMgdGhlIFRydXN0ZWQgVHlwZXMgUG9saWN5LiBTdGFydHMgYXMgdW5kZWZpbmVkIGFuZCBjYW4gYmUgc2V0IHRvIG51bGxcbiAqIGlmIFRydXN0ZWQgVHlwZXMgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGUgYnJvd3Nlci5cbiAqLyBsZXQgcG9saWN5O1xuLyoqXG4gKiBHZXR0ZXIgZm9yIHRoZSBUcnVzdGVkIFR5cGVzIFBvbGljeS4gSWYgaXQgaXMgdW5kZWZpbmVkLCBpdCBpcyBpbnN0YW50aWF0ZWRcbiAqIGhlcmUgb3Igc2V0IHRvIG51bGwgaWYgVHJ1c3RlZCBUeXBlcyBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyLlxuICovIGZ1bmN0aW9uIGdldFBvbGljeSgpIHtcbiAgICBpZiAodHlwZW9mIHBvbGljeSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgcG9saWN5ID0gKChyZWYgPSB3aW5kb3cudHJ1c3RlZFR5cGVzKSA9PSBudWxsID8gdm9pZCAwIDogcmVmLmNyZWF0ZVBvbGljeSgnbmV4dGpzJywge1xuICAgICAgICAgICAgY3JlYXRlSFRNTDogKGlucHV0KT0+aW5wdXQsXG4gICAgICAgICAgICBjcmVhdGVTY3JpcHQ6IChpbnB1dCk9PmlucHV0LFxuICAgICAgICAgICAgY3JlYXRlU2NyaXB0VVJMOiAoaW5wdXQpPT5pbnB1dFxuICAgICAgICB9KSkgfHwgbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHBvbGljeTtcbn1cbmZ1bmN0aW9uIF9fdW5zYWZlQ3JlYXRlVHJ1c3RlZFNjcmlwdFVSTCh1cmwpIHtcbiAgICB2YXIgcmVmO1xuICAgIHJldHVybiAoKHJlZiA9IGdldFBvbGljeSgpKSA9PSBudWxsID8gdm9pZCAwIDogcmVmLmNyZWF0ZVNjcmlwdFVSTCh1cmwpKSB8fCB1cmw7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRydXN0ZWQtdHlwZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX191bnNhZmVDcmVhdGVUcnVzdGVkU2NyaXB0VVJMIiwicG9saWN5IiwiZ2V0UG9saWN5IiwicmVmIiwid2luZG93IiwidHJ1c3RlZFR5cGVzIiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsImlucHV0IiwiY3JlYXRlU2NyaXB0IiwiY3JlYXRlU2NyaXB0VVJMIiwidXJsIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/trusted-types.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/use-intersection.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/use-intersection.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useIntersection = useIntersection;\nvar _react = __webpack_require__(/*! react */ \"react\");\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\");\nconst hasIntersectionObserver = typeof IntersectionObserver === \"function\";\nfunction useIntersection({ rootRef , rootMargin , disabled  }) {\n    const isDisabled = disabled || !hasIntersectionObserver;\n    const unobserve = (0, _react).useRef();\n    const [visible, setVisible] = (0, _react).useState(false);\n    const [element, setElement] = (0, _react).useState(null);\n    (0, _react).useEffect(()=>{\n        if (hasIntersectionObserver) {\n            if (unobserve.current) {\n                unobserve.current();\n                unobserve.current = undefined;\n            }\n            if (isDisabled || visible) return;\n            if (element && element.tagName) {\n                unobserve.current = observe(element, (isVisible)=>isVisible && setVisible(isVisible), {\n                    root: rootRef == null ? void 0 : rootRef.current,\n                    rootMargin\n                });\n            }\n            return ()=>{\n                unobserve.current == null ? void 0 : unobserve.current();\n                unobserve.current = undefined;\n            };\n        } else {\n            if (!visible) {\n                const idleCallback = (0, _requestIdleCallback).requestIdleCallback(()=>setVisible(true));\n                return ()=>(0, _requestIdleCallback).cancelIdleCallback(idleCallback);\n            }\n        }\n    }, [\n        element,\n        isDisabled,\n        rootMargin,\n        rootRef,\n        visible\n    ]);\n    const resetVisible = (0, _react).useCallback(()=>{\n        setVisible(false);\n    }, []);\n    return [\n        setElement,\n        visible,\n        resetVisible\n    ];\n}\nfunction observe(element, callback, options) {\n    const { id , observer , elements  } = createObserver(options);\n    elements.set(element, callback);\n    observer.observe(element);\n    return function unobserve() {\n        elements.delete(element);\n        observer.unobserve(element);\n        // Destroy observer when there's nothing left to watch:\n        if (elements.size === 0) {\n            observer.disconnect();\n            observers.delete(id);\n            const index = idList.findIndex((obj)=>obj.root === id.root && obj.margin === id.margin);\n            if (index > -1) {\n                idList.splice(index, 1);\n            }\n        }\n    };\n}\nconst observers = new Map();\nconst idList = [];\nfunction createObserver(options) {\n    const id = {\n        root: options.root || null,\n        margin: options.rootMargin || \"\"\n    };\n    const existing = idList.find((obj)=>obj.root === id.root && obj.margin === id.margin);\n    let instance;\n    if (existing) {\n        instance = observers.get(existing);\n        if (instance) {\n            return instance;\n        }\n    }\n    const elements = new Map();\n    const observer = new IntersectionObserver((entries)=>{\n        entries.forEach((entry)=>{\n            const callback = elements.get(entry.target);\n            const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n            if (callback && isVisible) {\n                callback(isVisible);\n            }\n        });\n    }, options);\n    instance = {\n        id,\n        observer,\n        elements\n    };\n    idList.push(id);\n    observers.set(id, instance);\n    return instance;\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=use-intersection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/use-intersection.js\n");

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/router.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/router.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports.createKey = createKey;\nexports[\"default\"] = void 0;\nvar _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ \"./node_modules/next/dist/client/normalize-trailing-slash.js\");\nvar _removeTrailingSlash = __webpack_require__(/*! ./utils/remove-trailing-slash */ \"./utils/remove-trailing-slash\");\nvar _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ \"./node_modules/next/dist/client/route-loader.js\");\nvar _script = __webpack_require__(/*! ../../../client/script */ \"./node_modules/next/dist/client/script.js\");\nvar _isError = _interopRequireWildcard(__webpack_require__(/*! ../../../lib/is-error */ \"./node_modules/next/dist/lib/is-error.js\"));\nvar _denormalizePagePath = __webpack_require__(/*! ../page-path/denormalize-page-path */ \"../page-path/denormalize-page-path\");\nvar _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"../i18n/normalize-locale-path\");\nvar _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ \"../mitt\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"../utils\");\nvar _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"./utils/is-dynamic\");\nvar _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ \"./utils/parse-relative-url\");\nvar _querystring = __webpack_require__(/*! ./utils/querystring */ \"./utils/querystring\");\nvar _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ \"./utils/resolve-rewrites\"));\nvar _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ \"./utils/route-matcher\");\nvar _routeRegex = __webpack_require__(/*! ./utils/route-regex */ \"./utils/route-regex\");\nvar _formatUrl = __webpack_require__(/*! ./utils/format-url */ \"./utils/format-url\");\nvar _detectDomainLocale = __webpack_require__(/*! ../../../client/detect-domain-locale */ \"./node_modules/next/dist/client/detect-domain-locale.js\");\nvar _parsePath = __webpack_require__(/*! ./utils/parse-path */ \"./utils/parse-path\");\nvar _addLocale = __webpack_require__(/*! ../../../client/add-locale */ \"./node_modules/next/dist/client/add-locale.js\");\nvar _removeLocale = __webpack_require__(/*! ../../../client/remove-locale */ \"./node_modules/next/dist/client/remove-locale.js\");\nvar _removeBasePath = __webpack_require__(/*! ../../../client/remove-base-path */ \"./node_modules/next/dist/client/remove-base-path.js\");\nvar _addBasePath = __webpack_require__(/*! ../../../client/add-base-path */ \"./node_modules/next/dist/client/add-base-path.js\");\nvar _hasBasePath = __webpack_require__(/*! ../../../client/has-base-path */ \"./node_modules/next/dist/client/has-base-path.js\");\nvar _getNextPathnameInfo = __webpack_require__(/*! ./utils/get-next-pathname-info */ \"./utils/get-next-pathname-info\");\nvar _formatNextPathnameInfo = __webpack_require__(/*! ./utils/format-next-pathname-info */ \"./utils/format-next-pathname-info\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self1 = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self1, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction buildCancellationError() {\n    return Object.assign(new Error(\"Route Cancelled\"), {\n        cancelled: true\n    });\n}\nfunction isLocalURL(url) {\n    // prevent a hydration mismatch on href for url with anchor refs\n    if (!(0, _utils).isAbsoluteUrl(url)) return true;\n    try {\n        // absolute urls can be local if they are on the same origin\n        const locationOrigin = (0, _utils).getLocationOrigin();\n        const resolved = new URL(url, locationOrigin);\n        return resolved.origin === locationOrigin && (0, _hasBasePath).hasBasePath(resolved.pathname);\n    } catch (_) {\n        return false;\n    }\n}\nfunction interpolateAs(route, asPathname, query) {\n    let interpolatedRoute = \"\";\n    const dynamicRegex = (0, _routeRegex).getRouteRegex(route);\n    const dynamicGroups = dynamicRegex.groups;\n    const dynamicMatches = (asPathname !== route ? (0, _routeMatcher).getRouteMatcher(dynamicRegex)(asPathname) : \"\") || // TODO: should this take priority; also need to change in the router.\n    query;\n    interpolatedRoute = route;\n    const params = Object.keys(dynamicGroups);\n    if (!params.every((param)=>{\n        let value = dynamicMatches[param] || \"\";\n        const { repeat , optional  } = dynamicGroups[param];\n        // support single-level catch-all\n        // TODO: more robust handling for user-error (passing `/`)\n        let replaced = `[${repeat ? \"...\" : \"\"}${param}]`;\n        if (optional) {\n            replaced = `${!value ? \"/\" : \"\"}[${replaced}]`;\n        }\n        if (repeat && !Array.isArray(value)) value = [\n            value\n        ];\n        return (optional || param in dynamicMatches) && (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map(// path delimiter escaped since they are being inserted\n        // into the URL and we expect URL encoded segments\n        // when parsing dynamic route params\n        (segment)=>encodeURIComponent(segment)).join(\"/\") : encodeURIComponent(value)) || \"/\");\n    })) {\n        interpolatedRoute = \"\" // did not satisfy all requirements\n        ;\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n    }\n    return {\n        params,\n        result: interpolatedRoute\n    };\n}\nfunction omit(object, keys) {\n    const omitted = {};\n    Object.keys(object).forEach((key)=>{\n        if (!keys.includes(key)) {\n            omitted[key] = object[key];\n        }\n    });\n    return omitted;\n}\nfunction resolveHref(router, href, resolveAs) {\n    // we use a dummy base url for relative urls\n    let base;\n    let urlAsString = typeof href === \"string\" ? href : (0, _formatUrl).formatWithValidation(href);\n    // repeated slashes and backslashes in the URL are considered\n    // invalid and will never match a Next.js page/file\n    const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//);\n    const urlAsStringNoProto = urlProtoMatch ? urlAsString.slice(urlProtoMatch[0].length) : urlAsString;\n    const urlParts = urlAsStringNoProto.split(\"?\");\n    if ((urlParts[0] || \"\").match(/(\\/\\/|\\\\)/)) {\n        console.error(`Invalid href passed to next/router: ${urlAsString}, repeated forward-slashes (//) or backslashes \\\\ are not valid in the href`);\n        const normalizedUrl = (0, _utils).normalizeRepeatedSlashes(urlAsStringNoProto);\n        urlAsString = (urlProtoMatch ? urlProtoMatch[0] : \"\") + normalizedUrl;\n    }\n    // Return because it cannot be routed by the Next.js router\n    if (!isLocalURL(urlAsString)) {\n        return resolveAs ? [\n            urlAsString\n        ] : urlAsString;\n    }\n    try {\n        base = new URL(urlAsString.startsWith(\"#\") ? router.asPath : router.pathname, \"http://n\");\n    } catch (_) {\n        // fallback to / for invalid asPath values e.g. //\n        base = new URL(\"/\", \"http://n\");\n    }\n    try {\n        const finalUrl = new URL(urlAsString, base);\n        finalUrl.pathname = (0, _normalizeTrailingSlash).normalizePathTrailingSlash(finalUrl.pathname);\n        let interpolatedAs = \"\";\n        if ((0, _isDynamic).isDynamicRoute(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n            const query = (0, _querystring).searchParamsToUrlQuery(finalUrl.searchParams);\n            const { result , params  } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);\n            if (result) {\n                interpolatedAs = (0, _formatUrl).formatWithValidation({\n                    pathname: result,\n                    hash: finalUrl.hash,\n                    query: omit(query, params)\n                });\n            }\n        }\n        // if the origin didn't change, it means we received a relative href\n        const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n        return resolveAs ? [\n            resolvedHref,\n            interpolatedAs || resolvedHref\n        ] : resolvedHref;\n    } catch (_1) {\n        return resolveAs ? [\n            urlAsString\n        ] : urlAsString;\n    }\n}\nfunction stripOrigin(url) {\n    const origin = (0, _utils).getLocationOrigin();\n    return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\nfunction prepareUrlAs(router, url, as) {\n    // If url and as provided as an object representation,\n    // we'll format them into the string version here.\n    let [resolvedHref, resolvedAs] = resolveHref(router, url, true);\n    const origin = (0, _utils).getLocationOrigin();\n    const hrefHadOrigin = resolvedHref.startsWith(origin);\n    const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n    resolvedHref = stripOrigin(resolvedHref);\n    resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n    const preparedUrl = hrefHadOrigin ? resolvedHref : (0, _addBasePath).addBasePath(resolvedHref);\n    const preparedAs = as ? stripOrigin(resolveHref(router, as)) : resolvedAs || resolvedHref;\n    return {\n        url: preparedUrl,\n        as: asHadOrigin ? preparedAs : (0, _addBasePath).addBasePath(preparedAs)\n    };\n}\nfunction resolveDynamicRoute(pathname, pages) {\n    const cleanPathname = (0, _removeTrailingSlash).removeTrailingSlash((0, _denormalizePagePath).denormalizePagePath(pathname));\n    if (cleanPathname === \"/404\" || cleanPathname === \"/_error\") {\n        return pathname;\n    }\n    // handle resolving href for dynamic routes\n    if (!pages.includes(cleanPathname)) {\n        // eslint-disable-next-line array-callback-return\n        pages.some((page)=>{\n            if ((0, _isDynamic).isDynamicRoute(page) && (0, _routeRegex).getRouteRegex(page).re.test(cleanPathname)) {\n                pathname = page;\n                return true;\n            }\n        });\n    }\n    return (0, _removeTrailingSlash).removeTrailingSlash(pathname);\n}\nconst manualScrollRestoration =  false && 0;\nconst SSG_DATA_NOT_FOUND = Symbol(\"SSG_DATA_NOT_FOUND\");\nfunction fetchRetry(url, attempts, options) {\n    return fetch(url, {\n        // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n        // Cookies may also be required for `getServerSideProps`.\n        //\n        // > `fetch` won’t send cookies, unless you set the credentials init\n        // > option.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n        //\n        // > For maximum browser compatibility when it comes to sending &\n        // > receiving cookies, always supply the `credentials: 'same-origin'`\n        // > option instead of relying on the default.\n        // https://github.com/github/fetch#caveats\n        credentials: \"same-origin\",\n        method: options.method || \"GET\",\n        headers: Object.assign({}, options.headers, {\n            \"x-nextjs-data\": \"1\"\n        })\n    }).then((response)=>{\n        return !response.ok && attempts > 1 && response.status >= 500 ? fetchRetry(url, attempts - 1, options) : response;\n    });\n}\nconst backgroundCache = {};\nfunction fetchNextData({ dataHref , inflightCache , isPrefetch , hasMiddleware , isServerRender , parseJSON , persistCache , isBackground , unstable_skipClientCache  }) {\n    const { href: cacheKey  } = new URL(dataHref, window.location.href);\n    var ref1;\n    const getData = (params)=>{\n        return fetchRetry(dataHref, isServerRender ? 3 : 1, {\n            headers: isPrefetch ? {\n                purpose: \"prefetch\"\n            } : {},\n            method: (ref1 = params == null ? void 0 : params.method) != null ? ref1 : \"GET\"\n        }).then((response)=>{\n            if (response.ok && (params == null ? void 0 : params.method) === \"HEAD\") {\n                return {\n                    dataHref,\n                    response,\n                    text: \"\",\n                    json: {}\n                };\n            }\n            return response.text().then((text)=>{\n                if (!response.ok) {\n                    /**\n             * When the data response is a redirect because of a middleware\n             * we do not consider it an error. The headers must bring the\n             * mapped location.\n             * TODO: Change the status code in the handler.\n             */ if (hasMiddleware && [\n                        301,\n                        302,\n                        307,\n                        308\n                    ].includes(response.status)) {\n                        return {\n                            dataHref,\n                            response,\n                            text,\n                            json: {}\n                        };\n                    }\n                    if (response.status === 404) {\n                        var ref;\n                        if ((ref = tryToParseAsJSON(text)) == null ? void 0 : ref.notFound) {\n                            return {\n                                dataHref,\n                                json: {\n                                    notFound: SSG_DATA_NOT_FOUND\n                                },\n                                response,\n                                text\n                            };\n                        }\n                        /**\n               * If there is a 404 that is not for SSG we used to fail but if\n               * there is a middleware we must respond with an empty object.\n               * For now we will return the data when there is a middleware.\n               * TODO: Update the server to success on these requests.\n               */ if (hasMiddleware) {\n                            return {\n                                dataHref,\n                                response,\n                                text,\n                                json: {}\n                            };\n                        }\n                    }\n                    const error = new Error(`Failed to load static props`);\n                    /**\n             * We should only trigger a server-side transition if this was\n             * caused on a client-side transition. Otherwise, we'd get into\n             * an infinite loop.\n             */ if (!isServerRender) {\n                        (0, _routeLoader).markAssetError(error);\n                    }\n                    throw error;\n                }\n                return {\n                    dataHref,\n                    json: parseJSON ? tryToParseAsJSON(text) : {},\n                    response,\n                    text\n                };\n            });\n        }).then((data)=>{\n            if (!persistCache || \"development\" !== \"production\" || 0) {\n                delete inflightCache[cacheKey];\n            }\n            return data;\n        }).catch((err)=>{\n            delete inflightCache[cacheKey];\n            throw err;\n        });\n    };\n    // when skipping client cache we wait to update\n    // inflight cache until successful data response\n    // this allows racing click event with fetching newer data\n    // without blocking navigation when stale data is available\n    if (unstable_skipClientCache && persistCache) {\n        return getData({}).then((data)=>{\n            inflightCache[cacheKey] = Promise.resolve(data);\n            return data;\n        });\n    }\n    if (inflightCache[cacheKey] !== undefined) {\n        return inflightCache[cacheKey];\n    }\n    return inflightCache[cacheKey] = getData(isBackground ? {\n        method: \"HEAD\"\n    } : {});\n}\nfunction tryToParseAsJSON(text) {\n    try {\n        return JSON.parse(text);\n    } catch (error) {\n        return {};\n    }\n}\nfunction createKey() {\n    return Math.random().toString(36).slice(2, 10);\n}\nfunction handleHardNavigation({ url , router  }) {\n    // ensure we don't trigger a hard navigation to the same\n    // URL as this can end up with an infinite refresh\n    if (url === (0, _addBasePath).addBasePath((0, _addLocale).addLocale(router.asPath, router.locale))) {\n        throw new Error(`Invariant: attempted to hard navigate to the same URL ${url} ${location.href}`);\n    }\n    window.location.href = url;\n}\nconst getCancelledHandler = ({ route , router  })=>{\n    let cancelled = false;\n    const cancel = router.clc = ()=>{\n        cancelled = true;\n    };\n    const handleCancelled = ()=>{\n        if (cancelled) {\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\n            error.cancelled = true;\n            throw error;\n        }\n        if (cancel === router.clc) {\n            router.clc = null;\n        }\n    };\n    return handleCancelled;\n};\nclass Router {\n    reload() {\n        window.location.reload();\n    }\n    /**\n   * Go back in history\n   */ back() {\n        window.history.back();\n    }\n    /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */ push(url, as, options = {}) {\n        if (false) {}\n        ({ url , as  } = prepareUrlAs(this, url, as));\n        return this.change(\"pushState\", url, as, options);\n    }\n    /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */ replace(url, as, options = {}) {\n        ({ url , as  } = prepareUrlAs(this, url, as));\n        return this.change(\"replaceState\", url, as, options);\n    }\n    change(method, url, as, options, forcedScroll) {\n        var _this = this;\n        return _asyncToGenerator(function*() {\n            if (!isLocalURL(url)) {\n                handleHardNavigation({\n                    url,\n                    router: _this\n                });\n                return false;\n            }\n            // WARNING: `_h` is an internal option for handing Next.js client-side\n            // hydration. Your app should _never_ use this property. It may change at\n            // any time without notice.\n            const isQueryUpdating = options._h;\n            const shouldResolveHref = isQueryUpdating || options._shouldResolveHref || (0, _parsePath).parsePath(url).pathname === (0, _parsePath).parsePath(as).pathname;\n            const nextState = _extends({}, _this.state);\n            // for static pages with query params in the URL we delay\n            // marking the router ready until after the query is updated\n            // or a navigation has occurred\n            _this.isReady = true;\n            const isSsr = _this.isSsr;\n            if (!isQueryUpdating) {\n                _this.isSsr = false;\n            }\n            // if a route transition is already in progress before\n            // the query updating is triggered ignore query updating\n            if (isQueryUpdating && _this.clc) {\n                return false;\n            }\n            const prevLocale = nextState.locale;\n            if (false) { var ref; }\n            // marking route changes as a navigation start entry\n            if (_utils.ST) {\n                performance.mark(\"routeChange\");\n            }\n            const { shallow =false , scroll =true  } = options;\n            const routeProps = {\n                shallow\n            };\n            if (_this._inFlightRoute && _this.clc) {\n                if (!isSsr) {\n                    Router.events.emit(\"routeChangeError\", buildCancellationError(), _this._inFlightRoute, routeProps);\n                }\n                _this.clc();\n                _this.clc = null;\n            }\n            as = (0, _addBasePath).addBasePath((0, _addLocale).addLocale((0, _hasBasePath).hasBasePath(as) ? (0, _removeBasePath).removeBasePath(as) : as, options.locale, _this.defaultLocale));\n            const cleanedAs = (0, _removeLocale).removeLocale((0, _hasBasePath).hasBasePath(as) ? (0, _removeBasePath).removeBasePath(as) : as, nextState.locale);\n            _this._inFlightRoute = as;\n            let localeChange = prevLocale !== nextState.locale;\n            // If the url change is only related to a hash change\n            // We should not proceed. We should only change the state.\n            if (!isQueryUpdating && _this.onlyAHashChange(cleanedAs) && !localeChange) {\n                nextState.asPath = cleanedAs;\n                Router.events.emit(\"hashChangeStart\", as, routeProps);\n                // TODO: do we need the resolved href when only a hash change?\n                _this.changeState(method, url, as, _extends({}, options, {\n                    scroll: false\n                }));\n                if (scroll) {\n                    _this.scrollToHash(cleanedAs);\n                }\n                try {\n                    yield _this.set(nextState, _this.components[nextState.route], null);\n                } catch (err) {\n                    if ((0, _isError).default(err) && err.cancelled) {\n                        Router.events.emit(\"routeChangeError\", err, cleanedAs, routeProps);\n                    }\n                    throw err;\n                }\n                Router.events.emit(\"hashChangeComplete\", as, routeProps);\n                return true;\n            }\n            let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n            let { pathname , query  } = parsed;\n            // The build manifest needs to be loaded before auto-static dynamic pages\n            // get their query parameters to allow ensuring they can be parsed properly\n            // when rewritten to\n            let pages, rewrites;\n            try {\n                [pages, { __rewrites: rewrites  }] = yield Promise.all([\n                    _this.pageLoader.getPageList(),\n                    (0, _routeLoader).getClientBuildManifest(),\n                    _this.pageLoader.getMiddlewareList(), \n                ]);\n            } catch (err1) {\n                // If we fail to resolve the page list or client-build manifest, we must\n                // do a server-side transition:\n                handleHardNavigation({\n                    url: as,\n                    router: _this\n                });\n                return false;\n            }\n            // If asked to change the current URL we should reload the current page\n            // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n            // We also need to set the method = replaceState always\n            // as this should not go into the history (That's how browsers work)\n            // We should compare the new asPath to the current asPath, not the url\n            if (!_this.urlIsNew(cleanedAs) && !localeChange) {\n                method = \"replaceState\";\n            }\n            // we need to resolve the as value using rewrites for dynamic SSG\n            // pages to allow building the data URL correctly\n            let resolvedAs = as;\n            // url and as should always be prefixed with basePath by this\n            // point by either next/link or router.push/replace so strip the\n            // basePath from the pathname to match the pages dir 1-to-1\n            pathname = pathname ? (0, _removeTrailingSlash).removeTrailingSlash((0, _removeBasePath).removeBasePath(pathname)) : pathname;\n            // we don't attempt resolve asPath when we need to execute\n            // middleware as the resolving will occur server-side\n            const isMiddlewareMatch = yield matchesMiddleware({\n                asPath: as,\n                locale: nextState.locale,\n                router: _this\n            });\n            if (options.shallow && isMiddlewareMatch) {\n                pathname = _this.pathname;\n            }\n            if (shouldResolveHref && pathname !== \"/_error\") {\n                options._shouldResolveHref = true;\n                if (false) {} else {\n                    parsed.pathname = resolveDynamicRoute(pathname, pages);\n                    if (parsed.pathname !== pathname) {\n                        pathname = parsed.pathname;\n                        parsed.pathname = (0, _addBasePath).addBasePath(pathname);\n                        if (!isMiddlewareMatch) {\n                            url = (0, _formatUrl).formatWithValidation(parsed);\n                        }\n                    }\n                }\n            }\n            if (!isLocalURL(as)) {\n                if (true) {\n                    throw new Error(`Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` + `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`);\n                }\n                handleHardNavigation({\n                    url: as,\n                    router: _this\n                });\n                return false;\n            }\n            resolvedAs = (0, _removeLocale).removeLocale((0, _removeBasePath).removeBasePath(resolvedAs), nextState.locale);\n            let route = (0, _removeTrailingSlash).removeTrailingSlash(pathname);\n            let routeMatch = false;\n            if ((0, _isDynamic).isDynamicRoute(route)) {\n                const parsedAs1 = (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs);\n                const asPathname = parsedAs1.pathname;\n                const routeRegex = (0, _routeRegex).getRouteRegex(route);\n                routeMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(asPathname);\n                const shouldInterpolate = route === asPathname;\n                const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};\n                if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n                    const missingParams = Object.keys(routeRegex.groups).filter((param)=>!query[param]);\n                    if (missingParams.length > 0 && !isMiddlewareMatch) {\n                        if (true) {\n                            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \\`as\\` and \\`href\\``} failed to manually provide ` + `the params: ${missingParams.join(\", \")} in the \\`href\\`'s \\`query\\``);\n                        }\n                        throw new Error((shouldInterpolate ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(\", \")}) to be interpolated properly. ` : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) + `Read more: https://nextjs.org/docs/messages/${shouldInterpolate ? \"href-interpolation-failed\" : \"incompatible-href-as\"}`);\n                    }\n                } else if (shouldInterpolate) {\n                    as = (0, _formatUrl).formatWithValidation(Object.assign({}, parsedAs1, {\n                        pathname: interpolatedAs.result,\n                        query: omit(query, interpolatedAs.params)\n                    }));\n                } else {\n                    // Merge params into `query`, overwriting any specified in search\n                    Object.assign(query, routeMatch);\n                }\n            }\n            if (!isQueryUpdating) {\n                Router.events.emit(\"routeChangeStart\", as, routeProps);\n            }\n            try {\n                var ref2, ref3;\n                let routeInfo = yield _this.getRouteInfo({\n                    route,\n                    pathname,\n                    query,\n                    as,\n                    resolvedAs,\n                    routeProps,\n                    locale: nextState.locale,\n                    isPreview: nextState.isPreview,\n                    hasMiddleware: isMiddlewareMatch\n                });\n                if (\"route\" in routeInfo && isMiddlewareMatch) {\n                    pathname = routeInfo.route || route;\n                    route = pathname;\n                    query = Object.assign({}, routeInfo.query || {}, query);\n                    if (routeMatch && pathname !== parsed.pathname) {\n                        Object.keys(routeMatch).forEach((key)=>{\n                            if (routeMatch && query[key] === routeMatch[key]) {\n                                delete query[key];\n                            }\n                        });\n                    }\n                    if ((0, _isDynamic).isDynamicRoute(pathname)) {\n                        const prefixedAs = routeInfo.resolvedAs || (0, _addBasePath).addBasePath((0, _addLocale).addLocale(as, nextState.locale), true);\n                        let rewriteAs = prefixedAs;\n                        if ((0, _hasBasePath).hasBasePath(rewriteAs)) {\n                            rewriteAs = (0, _removeBasePath).removeBasePath(rewriteAs);\n                        }\n                        if (false) {}\n                        const routeRegex1 = (0, _routeRegex).getRouteRegex(pathname);\n                        const curRouteMatch = (0, _routeMatcher).getRouteMatcher(routeRegex1)(rewriteAs);\n                        if (curRouteMatch) {\n                            Object.assign(query, curRouteMatch);\n                        }\n                    }\n                }\n                // If the routeInfo brings a redirect we simply apply it.\n                if (\"type\" in routeInfo) {\n                    if (routeInfo.type === \"redirect-internal\") {\n                        return _this.change(method, routeInfo.newUrl, routeInfo.newAs, options);\n                    } else {\n                        handleHardNavigation({\n                            url: routeInfo.destination,\n                            router: _this\n                        });\n                        return new Promise(()=>{});\n                    }\n                }\n                let { error , props , __N_SSG , __N_SSP  } = routeInfo;\n                const component = routeInfo.Component;\n                if (component && component.unstable_scriptLoader) {\n                    const scripts = [].concat(component.unstable_scriptLoader());\n                    scripts.forEach((script)=>{\n                        (0, _script).handleClientScriptLoad(script.props);\n                    });\n                }\n                // handle redirect on client-transition\n                if ((__N_SSG || __N_SSP) && props) {\n                    if (props.pageProps && props.pageProps.__N_REDIRECT) {\n                        // Use the destination from redirect without adding locale\n                        options.locale = false;\n                        const destination = props.pageProps.__N_REDIRECT;\n                        // check if destination is internal (resolves to a page) and attempt\n                        // client-navigation if it is falling back to hard navigation if\n                        // it's not\n                        if (destination.startsWith(\"/\") && props.pageProps.__N_REDIRECT_BASE_PATH !== false) {\n                            const parsedHref = (0, _parseRelativeUrl).parseRelativeUrl(destination);\n                            parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n                            const { url: newUrl , as: newAs  } = prepareUrlAs(_this, destination, destination);\n                            return _this.change(method, newUrl, newAs, options);\n                        }\n                        handleHardNavigation({\n                            url: destination,\n                            router: _this\n                        });\n                        return new Promise(()=>{});\n                    }\n                    nextState.isPreview = !!props.__N_PREVIEW;\n                    // handle SSG data 404\n                    if (props.notFound === SSG_DATA_NOT_FOUND) {\n                        let notFoundRoute;\n                        try {\n                            yield _this.fetchComponent(\"/404\");\n                            notFoundRoute = \"/404\";\n                        } catch (_) {\n                            notFoundRoute = \"/_error\";\n                        }\n                        routeInfo = yield _this.getRouteInfo({\n                            route: notFoundRoute,\n                            pathname: notFoundRoute,\n                            query,\n                            as,\n                            resolvedAs,\n                            routeProps: {\n                                shallow: false\n                            },\n                            locale: nextState.locale,\n                            isPreview: nextState.isPreview\n                        });\n                        if (\"type\" in routeInfo) {\n                            throw new Error(`Unexpected middleware effect on /404`);\n                        }\n                    }\n                }\n                Router.events.emit(\"beforeHistoryChange\", as, routeProps);\n                _this.changeState(method, url, as, options);\n                if (isQueryUpdating && pathname === \"/_error\" && ((ref2 = self.__NEXT_DATA__.props) == null ? void 0 : (ref3 = ref2.pageProps) == null ? void 0 : ref3.statusCode) === 500 && (props == null ? void 0 : props.pageProps)) {\n                    // ensure statusCode is still correct for static 500 page\n                    // when updating query information\n                    props.pageProps.statusCode = 500;\n                }\n                var _route;\n                // shallow routing is only allowed for same page URL changes.\n                const isValidShallowRoute = options.shallow && nextState.route === ((_route = routeInfo.route) != null ? _route : route);\n                var _scroll;\n                const shouldScroll = (_scroll = options.scroll) != null ? _scroll : !isValidShallowRoute;\n                const resetScroll = shouldScroll ? {\n                    x: 0,\n                    y: 0\n                } : null;\n                yield _this.set(_extends({}, nextState, {\n                    route,\n                    pathname,\n                    query,\n                    asPath: cleanedAs,\n                    isFallback: false\n                }), routeInfo, forcedScroll != null ? forcedScroll : resetScroll).catch((e)=>{\n                    if (e.cancelled) error = error || e;\n                    else throw e;\n                });\n                if (error) {\n                    if (!isQueryUpdating) {\n                        Router.events.emit(\"routeChangeError\", error, cleanedAs, routeProps);\n                    }\n                    throw error;\n                }\n                if (false) {}\n                if (!isQueryUpdating) {\n                    Router.events.emit(\"routeChangeComplete\", as, routeProps);\n                }\n                // A hash mark # is the optional last part of a URL\n                const hashRegex = /#.+$/;\n                if (shouldScroll && hashRegex.test(as)) {\n                    _this.scrollToHash(as);\n                }\n                return true;\n            } catch (err11) {\n                if ((0, _isError).default(err11) && err11.cancelled) {\n                    return false;\n                }\n                throw err11;\n            }\n        })();\n    }\n    changeState(method, url, as, options = {}) {\n        if (true) {\n            if (typeof window.history === \"undefined\") {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            if (typeof window.history[method] === \"undefined\") {\n                console.error(`Warning: window.history.${method} is not available`);\n                return;\n            }\n        }\n        if (method !== \"pushState\" || (0, _utils).getURL() !== as) {\n            this._shallow = options.shallow;\n            window.history[method]({\n                url,\n                as,\n                options,\n                __N: true,\n                key: this._key = method !== \"pushState\" ? this._key : createKey()\n            }, // Passing the empty string here should be safe against future changes to the method.\n            // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n            \"\", as);\n        }\n    }\n    handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {\n        var _this = this;\n        return _asyncToGenerator(function*() {\n            console.error(err);\n            if (err.cancelled) {\n                // bubble up cancellation errors\n                throw err;\n            }\n            if ((0, _routeLoader).isAssetError(err) || loadErrorFail) {\n                Router.events.emit(\"routeChangeError\", err, as, routeProps);\n                // If we can't load the page it could be one of following reasons\n                //  1. Page doesn't exists\n                //  2. Page does exist in a different zone\n                //  3. Internal error while loading the page\n                // So, doing a hard reload is the proper way to deal with this.\n                handleHardNavigation({\n                    url: as,\n                    router: _this\n                });\n                // Changing the URL doesn't block executing the current code path.\n                // So let's throw a cancellation error stop the routing logic.\n                throw buildCancellationError();\n            }\n            try {\n                let Component;\n                let styleSheets;\n                let props;\n                if (typeof Component === \"undefined\" || typeof styleSheets === \"undefined\") {\n                    ({ page: Component , styleSheets  } = yield _this.fetchComponent(\"/_error\"));\n                }\n                const routeInfo = {\n                    props,\n                    Component,\n                    styleSheets,\n                    err,\n                    error: err\n                };\n                if (!routeInfo.props) {\n                    try {\n                        routeInfo.props = yield _this.getInitialProps(Component, {\n                            err,\n                            pathname,\n                            query\n                        });\n                    } catch (gipErr) {\n                        console.error(\"Error in error page `getInitialProps`: \", gipErr);\n                        routeInfo.props = {};\n                    }\n                }\n                return routeInfo;\n            } catch (routeInfoErr) {\n                return _this.handleRouteInfoError((0, _isError).default(routeInfoErr) ? routeInfoErr : new Error(routeInfoErr + \"\"), pathname, query, as, routeProps, true);\n            }\n        })();\n    }\n    getRouteInfo({ route: requestedRoute , pathname , query , as , resolvedAs , routeProps , locale , hasMiddleware , isPreview , unstable_skipClientCache  }) {\n        var _this = this;\n        return _asyncToGenerator(function*() {\n            /**\n     * This `route` binding can change if there's a rewrite\n     * so we keep a reference to the original requested route\n     * so we can store the cache for it and avoid re-requesting every time\n     * for shallow routing purposes.\n     */ let route = requestedRoute;\n            try {\n                var ref, ref4, ref5;\n                const handleCancelled = getCancelledHandler({\n                    route,\n                    router: _this\n                });\n                let existingInfo = _this.components[route];\n                if (routeProps.shallow && existingInfo && _this.route === route) {\n                    return existingInfo;\n                }\n                let cachedRouteInfo = existingInfo && !(\"initial\" in existingInfo) && \"development\" !== \"development\" ? 0 : undefined;\n                const fetchNextDataParams = {\n                    dataHref: _this.pageLoader.getDataHref({\n                        href: (0, _formatUrl).formatWithValidation({\n                            pathname,\n                            query\n                        }),\n                        skipInterpolation: true,\n                        asPath: resolvedAs,\n                        locale\n                    }),\n                    hasMiddleware: true,\n                    isServerRender: _this.isSsr,\n                    parseJSON: true,\n                    inflightCache: _this.sdc,\n                    persistCache: !isPreview,\n                    isPrefetch: false,\n                    unstable_skipClientCache\n                };\n                const data = yield withMiddlewareEffects({\n                    fetchData: ()=>fetchNextData(fetchNextDataParams),\n                    asPath: resolvedAs,\n                    locale: locale,\n                    router: _this\n                });\n                handleCancelled();\n                if ((data == null ? void 0 : (ref = data.effect) == null ? void 0 : ref.type) === \"redirect-internal\" || (data == null ? void 0 : (ref4 = data.effect) == null ? void 0 : ref4.type) === \"redirect-external\") {\n                    return data.effect;\n                }\n                if ((data == null ? void 0 : (ref5 = data.effect) == null ? void 0 : ref5.type) === \"rewrite\") {\n                    route = (0, _removeTrailingSlash).removeTrailingSlash(data.effect.resolvedHref);\n                    pathname = data.effect.resolvedHref;\n                    query = _extends({}, query, data.effect.parsedAs.query);\n                    resolvedAs = data.effect.parsedAs.pathname;\n                    // Check again the cache with the new destination.\n                    existingInfo = _this.components[route];\n                    if (routeProps.shallow && existingInfo && _this.route === route && !hasMiddleware) {\n                        // If we have a match with the current route due to rewrite,\n                        // we can copy the existing information to the rewritten one.\n                        // Then, we return the information along with the matched route.\n                        _this.components[requestedRoute] = _extends({}, existingInfo, {\n                            route\n                        });\n                        return _extends({}, existingInfo, {\n                            route\n                        });\n                    }\n                    cachedRouteInfo = existingInfo && !(\"initial\" in existingInfo) && \"development\" !== \"development\" ? 0 : undefined;\n                }\n                if (route === \"/api\" || route.startsWith(\"/api/\")) {\n                    handleHardNavigation({\n                        url: as,\n                        router: _this\n                    });\n                    return new Promise(()=>{});\n                }\n                const routeInfo = cachedRouteInfo || (yield _this.fetchComponent(route).then((res)=>({\n                        Component: res.page,\n                        styleSheets: res.styleSheets,\n                        __N_SSG: res.mod.__N_SSG,\n                        __N_SSP: res.mod.__N_SSP,\n                        __N_RSC: !!res.mod.__next_rsc__\n                    })));\n                if (true) {\n                    const { isValidElementType  } = __webpack_require__(/*! next/dist/compiled/react-is */ \"next/dist/compiled/react-is\");\n                    if (!isValidElementType(routeInfo.Component)) {\n                        throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n                    }\n                }\n                /**\n       * For server components, non-SSR pages will have statically optimized\n       * flight data in a production build. So only development and SSR pages\n       * will always have the real-time generated and streamed flight data.\n       */ const useStreamedFlightData = routeInfo.__N_RSC && ( true || 0);\n                const shouldFetchData = routeInfo.__N_SSG || routeInfo.__N_SSP || routeInfo.__N_RSC;\n                const { props  } = yield _this._getData(_asyncToGenerator(function*() {\n                    if (shouldFetchData && !useStreamedFlightData) {\n                        const { json  } = data || (yield fetchNextData({\n                            dataHref: _this.pageLoader.getDataHref({\n                                href: (0, _formatUrl).formatWithValidation({\n                                    pathname,\n                                    query\n                                }),\n                                asPath: resolvedAs,\n                                locale\n                            }),\n                            isServerRender: _this.isSsr,\n                            parseJSON: true,\n                            inflightCache: _this.sdc,\n                            persistCache: !isPreview,\n                            isPrefetch: false,\n                            unstable_skipClientCache\n                        }));\n                        return {\n                            props: json\n                        };\n                    }\n                    return {\n                        headers: {},\n                        props: yield _this.getInitialProps(routeInfo.Component, {\n                            pathname,\n                            query,\n                            asPath: as,\n                            locale,\n                            locales: _this.locales,\n                            defaultLocale: _this.defaultLocale\n                        })\n                    };\n                }));\n                // Only bust the data cache for SSP routes although\n                // middleware can skip cache per request with\n                // x-middleware-cache: no-cache as well\n                if (routeInfo.__N_SSP && fetchNextDataParams.dataHref) {\n                    const cacheKey = new URL(fetchNextDataParams.dataHref, window.location.href).href;\n                    delete _this.sdc[cacheKey];\n                }\n                // we kick off a HEAD request in the background\n                // when a non-prefetch request is made to signal revalidation\n                if (!_this.isPreview && routeInfo.__N_SSG && \"development\" !== \"development\") {}\n                let flightInfo;\n                if (routeInfo.__N_RSC) {\n                    flightInfo = {\n                        __flight__: useStreamedFlightData ? (yield _this._getData(()=>_this._getFlightData((0, _formatUrl).formatWithValidation({\n                                query: _extends({}, query, {\n                                    __flight__: \"1\"\n                                }),\n                                pathname: (0, _isDynamic).isDynamicRoute(route) ? interpolateAs(pathname, (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs).pathname, query).result : pathname\n                            })))).data : props.__flight__\n                    };\n                }\n                props.pageProps = Object.assign({}, props.pageProps, flightInfo);\n                routeInfo.props = props;\n                routeInfo.route = route;\n                routeInfo.query = query;\n                routeInfo.resolvedAs = resolvedAs;\n                _this.components[route] = routeInfo;\n                // If the route was rewritten in the process of fetching data,\n                // we update the cache to allow hitting the same data for shallow requests.\n                if (route !== requestedRoute) {\n                    _this.components[requestedRoute] = _extends({}, routeInfo, {\n                        route\n                    });\n                }\n                return routeInfo;\n            } catch (err) {\n                return _this.handleRouteInfoError((0, _isError).getProperError(err), pathname, query, as, routeProps);\n            }\n        })();\n    }\n    set(state, data, resetScroll) {\n        this.state = state;\n        return this.sub(data, this.components[\"/_app\"].Component, resetScroll);\n    }\n    /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */ beforePopState(cb) {\n        this._bps = cb;\n    }\n    onlyAHashChange(as) {\n        if (!this.asPath) return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split(\"#\");\n        const [newUrlNoHash, newHash] = as.split(\"#\");\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as) {\n        const [, hash = \"\"] = as.split(\"#\");\n        // Scroll to top if the hash is just `#` with no value or `#top`\n        // To mirror browsers\n        if (hash === \"\" || hash === \"top\") {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // Decode hash to make non-latin anchor works.\n        const rawHash = decodeURIComponent(hash);\n        // First we check if the element by id is found\n        const idEl = document.getElementById(rawHash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(rawHash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        return this.asPath !== asPath;\n    }\n    /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */ prefetch(url, asPath = url, options = {}) {\n        var _this = this;\n        return _asyncToGenerator(function*() {\n            let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n            let { pathname , query  } = parsed;\n            if (false) {}\n            const pages = yield _this.pageLoader.getPageList();\n            let resolvedAs = asPath;\n            const locale = typeof options.locale !== \"undefined\" ? options.locale || undefined : _this.locale;\n            const isMiddlewareMatch = yield matchesMiddleware({\n                asPath: asPath,\n                locale: locale,\n                router: _this\n            });\n            if (false) {}\n            parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n            if ((0, _isDynamic).isDynamicRoute(parsed.pathname)) {\n                pathname = parsed.pathname;\n                parsed.pathname = pathname;\n                Object.assign(query, (0, _routeMatcher).getRouteMatcher((0, _routeRegex).getRouteRegex(parsed.pathname))((0, _parsePath).parsePath(asPath).pathname) || {});\n                if (!isMiddlewareMatch) {\n                    url = (0, _formatUrl).formatWithValidation(parsed);\n                }\n            }\n            // Prefetch is not supported in development mode because it would trigger on-demand-entries\n            if (true) {\n                return;\n            }\n            // TODO: if the route middleware's data request\n            // resolves to is not an SSG route we should bust the cache\n            // but we shouldn't allow prefetch to keep triggering\n            // requests for SSP pages\n            const data = yield withMiddlewareEffects({\n                fetchData: ()=>fetchNextData({\n                        dataHref: _this.pageLoader.getDataHref({\n                            href: (0, _formatUrl).formatWithValidation({\n                                pathname,\n                                query\n                            }),\n                            skipInterpolation: true,\n                            asPath: resolvedAs,\n                            locale\n                        }),\n                        hasMiddleware: true,\n                        isServerRender: _this.isSsr,\n                        parseJSON: true,\n                        inflightCache: _this.sdc,\n                        persistCache: !_this.isPreview,\n                        isPrefetch: true\n                    }),\n                asPath: asPath,\n                locale: locale,\n                router: _this\n            });\n            /**\n     * If there was a rewrite we apply the effects of the rewrite on the\n     * current parameters for the prefetch.\n     */ if ((data == null ? void 0 : data.effect.type) === \"rewrite\") {\n                parsed.pathname = data.effect.resolvedHref;\n                pathname = data.effect.resolvedHref;\n                query = _extends({}, query, data.effect.parsedAs.query);\n                resolvedAs = data.effect.parsedAs.pathname;\n                url = (0, _formatUrl).formatWithValidation(parsed);\n            }\n            /**\n     * If there is a redirect to an external destination then we don't have\n     * to prefetch content as it will be unused.\n     */ if ((data == null ? void 0 : data.effect.type) === \"redirect-external\") {\n                return;\n            }\n            const route = (0, _removeTrailingSlash).removeTrailingSlash(pathname);\n            yield Promise.all([\n                _this.pageLoader._isSsg(route).then((isSsg)=>{\n                    return isSsg ? fetchNextData({\n                        dataHref: (data == null ? void 0 : data.dataHref) || _this.pageLoader.getDataHref({\n                            href: url,\n                            asPath: resolvedAs,\n                            locale: locale\n                        }),\n                        isServerRender: false,\n                        parseJSON: true,\n                        inflightCache: _this.sdc,\n                        persistCache: !_this.isPreview,\n                        isPrefetch: true,\n                        unstable_skipClientCache: options.unstable_skipClientCache || options.priority\n                    }).then(()=>false) : false;\n                }),\n                _this.pageLoader[options.priority ? \"loadPage\" : \"prefetch\"](route), \n            ]);\n        })();\n    }\n    fetchComponent(route) {\n        var _this = this;\n        return _asyncToGenerator(function*() {\n            const handleCancelled = getCancelledHandler({\n                route,\n                router: _this\n            });\n            try {\n                const componentResult = yield _this.pageLoader.loadPage(route);\n                handleCancelled();\n                return componentResult;\n            } catch (err) {\n                handleCancelled();\n                throw err;\n            }\n        })();\n    }\n    _getData(fn) {\n        let cancelled = false;\n        const cancel = ()=>{\n            cancelled = true;\n        };\n        this.clc = cancel;\n        return fn().then((data)=>{\n            if (cancel === this.clc) {\n                this.clc = null;\n            }\n            if (cancelled) {\n                const err = new Error(\"Loading initial props cancelled\");\n                err.cancelled = true;\n                throw err;\n            }\n            return data;\n        });\n    }\n    _getFlightData(dataHref) {\n        // Do not cache RSC flight response since it's not a static resource\n        return fetchNextData({\n            dataHref,\n            isServerRender: true,\n            parseJSON: false,\n            inflightCache: this.sdc,\n            persistCache: false,\n            isPrefetch: false\n        }).then(({ text  })=>({\n                data: text\n            }));\n    }\n    getInitialProps(Component, ctx) {\n        const { Component: App  } = this.components[\"/_app\"];\n        const AppTree = this._wrapApp(App);\n        ctx.AppTree = AppTree;\n        return (0, _utils).loadGetInitialProps(App, {\n            AppTree,\n            Component,\n            router: this,\n            ctx\n        });\n    }\n    get route() {\n        return this.state.route;\n    }\n    get pathname() {\n        return this.state.pathname;\n    }\n    get query() {\n        return this.state.query;\n    }\n    get asPath() {\n        return this.state.asPath;\n    }\n    get locale() {\n        return this.state.locale;\n    }\n    get isFallback() {\n        return this.state.isFallback;\n    }\n    get isPreview() {\n        return this.state.isPreview;\n    }\n    constructor(pathname1, query1, as1, { initialProps , pageLoader , App , wrapApp , Component , err , subscription , isFallback , locale , locales , defaultLocale , domainLocales , isPreview , isRsc  }){\n        // Server Data Cache\n        this.sdc = {};\n        this.isFirstPopStateEvent = true;\n        this._key = createKey();\n        this.onPopState = (e)=>{\n            const { isFirstPopStateEvent  } = this;\n            this.isFirstPopStateEvent = false;\n            const state = e.state;\n            if (!state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname , query  } = this;\n                this.changeState(\"replaceState\", (0, _formatUrl).formatWithValidation({\n                    pathname: (0, _addBasePath).addBasePath(pathname),\n                    query\n                }), (0, _utils).getURL());\n                return;\n            }\n            // __NA is used to identify if the history entry can be handled by the app-router.\n            if (state.__NA) {\n                window.location.reload();\n                return;\n            }\n            if (!state.__N) {\n                return;\n            }\n            // Safari fires popstateevent when reopening the browser.\n            if (isFirstPopStateEvent && this.locale === state.options.locale && state.as === this.asPath) {\n                return;\n            }\n            let forcedScroll;\n            const { url , as , options , key  } = state;\n            if (false) {}\n            this._key = key;\n            const { pathname: pathname1  } = (0, _parseRelativeUrl).parseRelativeUrl(url);\n            // Make sure we don't re-render on initial load,\n            // can be caused by navigating back from an external site\n            if (this.isSsr && as === (0, _addBasePath).addBasePath(this.asPath) && pathname1 === (0, _addBasePath).addBasePath(this.pathname)) {\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (this._bps && !this._bps(state)) {\n                return;\n            }\n            this.change(\"replaceState\", url, as, Object.assign({}, options, {\n                shallow: options.shallow && this._shallow,\n                locale: options.locale || this.defaultLocale,\n                // @ts-ignore internal value not exposed on types\n                _h: 0\n            }), forcedScroll);\n        };\n        // represents the current component key\n        const route = (0, _removeTrailingSlash).removeTrailingSlash(pathname1);\n        // set up the component cache (by route keys)\n        this.components = {};\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname1 !== \"/_error\") {\n            this.components[route] = {\n                Component,\n                initial: true,\n                props: initialProps,\n                err,\n                __N_SSG: initialProps && initialProps.__N_SSG,\n                __N_SSP: initialProps && initialProps.__N_SSP,\n                __N_RSC: !!isRsc\n            };\n        }\n        this.components[\"/_app\"] = {\n            Component: App,\n            styleSheets: []\n        };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        // if auto prerendered and dynamic route wait to update asPath\n        // until after mount to prevent hydration mismatch\n        const autoExportDynamic = (0, _isDynamic).isDynamicRoute(pathname1) && self.__NEXT_DATA__.autoExport;\n        this.basePath =  false || \"\";\n        this.sub = subscription;\n        this.clc = null;\n        this._wrapApp = wrapApp;\n        // make sure to ignore extra popState in safari on navigating\n        // back from external site\n        this.isSsr = true;\n        this.isLocaleDomain = false;\n        this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);\n        if (false) {}\n        this.state = {\n            route,\n            pathname: pathname1,\n            query: query1,\n            asPath: autoExportDynamic ? pathname1 : as1,\n            isPreview: !!isPreview,\n            locale:  false ? 0 : undefined,\n            isFallback\n        };\n        this._initialMatchesMiddlewarePromise = Promise.resolve(false);\n        if (false) {}\n    }\n}\nRouter.events = (0, _mitt).default();\nfunction matchesMiddleware(options) {\n    return Promise.resolve(options.router.pageLoader.getMiddlewareList()).then((items)=>{\n        const { pathname: asPathname  } = (0, _parsePath).parsePath(options.asPath);\n        const cleanedAs = (0, _hasBasePath).hasBasePath(asPathname) ? (0, _removeBasePath).removeBasePath(asPathname) : asPathname;\n        return !!(items == null ? void 0 : items.some(([regex, ssr])=>{\n            return !ssr && new RegExp(regex).test((0, _addLocale).addLocale(cleanedAs, options.locale));\n        }));\n    });\n}\nfunction withMiddlewareEffects(options) {\n    return matchesMiddleware(options).then((matches)=>{\n        if (matches && options.fetchData) {\n            return options.fetchData().then((data)=>getMiddlewareData(data.dataHref, data.response, options).then((effect)=>({\n                        dataHref: data.dataHref,\n                        json: data.json,\n                        response: data.response,\n                        text: data.text,\n                        effect\n                    }))).catch((_err)=>{\n                /**\n           * TODO: Revisit this in the future.\n           * For now we will not consider middleware data errors to be fatal.\n           * maybe we should revisit in the future.\n           */ return null;\n            });\n        }\n        return null;\n    });\n}\nfunction getMiddlewareData(source, response, options) {\n    const nextConfig = {\n        basePath: options.router.basePath,\n        i18n: {\n            locales: options.router.locales\n        },\n        trailingSlash: Boolean(false)\n    };\n    const rewriteHeader = response.headers.get(\"x-nextjs-rewrite\");\n    let rewriteTarget = rewriteHeader || response.headers.get(\"x-nextjs-matched-path\");\n    const matchedPath = response.headers.get(\"x-matched-path\");\n    if (!rewriteTarget && !(matchedPath == null ? void 0 : matchedPath.includes(\"__next_data_catchall\"))) {\n        rewriteTarget = matchedPath;\n    }\n    if (rewriteTarget) {\n        if (rewriteTarget.startsWith(\"/\")) {\n            const parsedRewriteTarget = (0, _parseRelativeUrl).parseRelativeUrl(rewriteTarget);\n            const pathnameInfo = (0, _getNextPathnameInfo).getNextPathnameInfo(parsedRewriteTarget.pathname, {\n                nextConfig,\n                parseData: true\n            });\n            const fsPathname = (0, _removeTrailingSlash).removeTrailingSlash(pathnameInfo.pathname);\n            return Promise.all([\n                options.router.pageLoader.getPageList(),\n                (0, _routeLoader).getClientBuildManifest(), \n            ]).then(([pages, { __rewrites: rewrites  }])=>{\n                let as = (0, _addLocale).addLocale(pathnameInfo.pathname, pathnameInfo.locale);\n                if ((0, _isDynamic).isDynamicRoute(as) || !rewriteHeader && pages.includes((0, _normalizeLocalePath).normalizeLocalePath((0, _removeBasePath).removeBasePath(as), options.router.locales).pathname)) {\n                    const parsedSource = (0, _getNextPathnameInfo).getNextPathnameInfo((0, _parseRelativeUrl).parseRelativeUrl(source).pathname, {\n                        parseData: true\n                    });\n                    as = (0, _addBasePath).addBasePath(parsedSource.pathname);\n                    parsedRewriteTarget.pathname = as;\n                }\n                if (false) {}\n                const resolvedHref = !pages.includes(fsPathname) ? resolveDynamicRoute((0, _normalizeLocalePath).normalizeLocalePath((0, _removeBasePath).removeBasePath(parsedRewriteTarget.pathname), options.router.locales).pathname, pages) : fsPathname;\n                if ((0, _isDynamic).isDynamicRoute(resolvedHref)) {\n                    const matches = (0, _routeMatcher).getRouteMatcher((0, _routeRegex).getRouteRegex(resolvedHref))(as);\n                    Object.assign(parsedRewriteTarget.query, matches || {});\n                }\n                return {\n                    type: \"rewrite\",\n                    parsedAs: parsedRewriteTarget,\n                    resolvedHref\n                };\n            });\n        }\n        const src = (0, _parsePath).parsePath(source);\n        const pathname = (0, _formatNextPathnameInfo).formatNextPathnameInfo(_extends({}, (0, _getNextPathnameInfo).getNextPathnameInfo(src.pathname, {\n            nextConfig,\n            parseData: true\n        }), {\n            defaultLocale: options.router.defaultLocale,\n            buildId: \"\"\n        }));\n        return Promise.resolve({\n            type: \"redirect-external\",\n            destination: `${pathname}${src.query}${src.hash}`\n        });\n    }\n    const redirectTarget = response.headers.get(\"x-nextjs-redirect\");\n    if (redirectTarget) {\n        if (redirectTarget.startsWith(\"/\")) {\n            const src1 = (0, _parsePath).parsePath(redirectTarget);\n            const pathname1 = (0, _formatNextPathnameInfo).formatNextPathnameInfo(_extends({}, (0, _getNextPathnameInfo).getNextPathnameInfo(src1.pathname, {\n                nextConfig,\n                parseData: true\n            }), {\n                defaultLocale: options.router.defaultLocale,\n                buildId: \"\"\n            }));\n            return Promise.resolve({\n                type: \"redirect-internal\",\n                newAs: `${pathname1}${src1.query}${src1.hash}`,\n                newUrl: `${pathname1}${src1.query}${src1.hash}`\n            });\n        }\n        return Promise.resolve({\n            type: \"redirect-external\",\n            destination: redirectTarget\n        });\n    }\n    return Promise.resolve({\n        type: \"next\"\n    });\n}\nexports[\"default\"] = Router; //# sourceMappingURL=router.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/router/router.js\n");

/***/ }),

/***/ "./pages/_app.tsx":
/*!************************!*\
  !*** ./pages/_app.tsx ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chakra-ui/react */ \"@chakra-ui/react\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_apollo_client__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../apollo-client */ \"./apollo-client.ts\");\n/* harmony import */ var _contexts_wallet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../contexts/wallet */ \"./contexts/wallet.tsx\");\n/* harmony import */ var _components_nav__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/nav */ \"./components/nav.js\");\n/* harmony import */ var _components_footer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/footer */ \"./components/footer.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_contexts_wallet__WEBPACK_IMPORTED_MODULE_4__, _components_footer__WEBPACK_IMPORTED_MODULE_6__]);\n([_contexts_wallet__WEBPACK_IMPORTED_MODULE_4__, _components_footer__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\nfunction MyApp({ Component , pageProps  }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_apollo_client__WEBPACK_IMPORTED_MODULE_2__.ApolloProvider, {\n        client: _apollo_client__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.ChakraProvider, {\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_contexts_wallet__WEBPACK_IMPORTED_MODULE_4__.WalletProvider, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_nav__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {}, void 0, false, {\n                        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/_app.tsx\",\n                        lineNumber: 17,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                        w: \"80%\",\n                        mx: \"auto\",\n                        p: \"5\",\n                        mb: \"24\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                            ...pageProps\n                        }, void 0, false, {\n                            fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/_app.tsx\",\n                            lineNumber: 19,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/_app.tsx\",\n                        lineNumber: 18,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_footer__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {}, void 0, false, {\n                        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/_app.tsx\",\n                        lineNumber: 21,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/_app.tsx\",\n                lineNumber: 16,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/_app.tsx\",\n            lineNumber: 15,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/_app.tsx\",\n        lineNumber: 14,\n        columnNumber: 5\n    }, this);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MyApp);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ3NEO0FBQ1A7QUFDVjtBQUNlO0FBR2pCO0FBQ007QUFHekMsU0FBU08sS0FBSyxDQUFDLEVBQUVDLFNBQVMsR0FBRUMsU0FBUyxHQUFZLEVBQUU7SUFDakQscUJBQ0UsOERBQUNQLDBEQUFjO1FBQUNDLE1BQU0sRUFBRUEsc0RBQU07a0JBQzVCLDRFQUFDSCw0REFBYztzQkFDYiw0RUFBQ0ksNERBQWM7O2tDQUNiLDhEQUFDQyx1REFBRzs7Ozs0QkFBRztrQ0FDUCw4REFBQ0osaURBQUc7d0JBQUNTLENBQUMsRUFBQyxLQUFLO3dCQUFDQyxFQUFFLEVBQUMsTUFBTTt3QkFBQ0MsQ0FBQyxFQUFDLEdBQUc7d0JBQUNDLEVBQUUsRUFBQyxJQUFJO2tDQUNsQyw0RUFBQ0wsU0FBUzs0QkFBRSxHQUFHQyxTQUFTOzs7OztnQ0FBSTs7Ozs7NEJBQ3hCO2tDQUNOLDhEQUFDSCwwREFBTTs7Ozs0QkFBRzs7Ozs7O29CQUNLOzs7OztnQkFDRjs7Ozs7WUFDRixDQUNsQjtDQUVGO0FBRUQsaUVBQWVDLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcGJsLWZyb250LWVuZC10ZW1wbGF0ZS1uZXh0anMtbWVzaC8uL3BhZ2VzL19hcHAudHN4PzJmYmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBBcHBQcm9wcyB9IGZyb20gJ25leHQvYXBwJ1xuaW1wb3J0IHsgQ2hha3JhUHJvdmlkZXIsIEJveCB9IGZyb20gJ0BjaGFrcmEtdWkvcmVhY3QnXG5pbXBvcnQgeyBBcG9sbG9Qcm92aWRlciB9IGZyb20gJ0BhcG9sbG8vY2xpZW50J1xuaW1wb3J0IGNsaWVudCBmcm9tICcuLi9hcG9sbG8tY2xpZW50J1xuaW1wb3J0IHsgV2FsbGV0UHJvdmlkZXIgfSBmcm9tICcuLi9jb250ZXh0cy93YWxsZXQnO1xuXG5cbmltcG9ydCBOYXYgZnJvbSAnLi4vY29tcG9uZW50cy9uYXYnXG5pbXBvcnQgRm9vdGVyIGZyb20gJy4uL2NvbXBvbmVudHMvZm9vdGVyJ1xuXG5cbmZ1bmN0aW9uIE15QXBwKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfTogQXBwUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8QXBvbGxvUHJvdmlkZXIgY2xpZW50PXtjbGllbnR9PlxuICAgICAgPENoYWtyYVByb3ZpZGVyPlxuICAgICAgICA8V2FsbGV0UHJvdmlkZXI+XG4gICAgICAgICAgPE5hdiAvPlxuICAgICAgICAgIDxCb3ggdz0nODAlJyBteD0nYXV0bycgcD0nNScgbWI9JzI0Jz5cbiAgICAgICAgICAgIDxDb21wb25lbnQgey4uLnBhZ2VQcm9wc30gLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8Rm9vdGVyIC8+XG4gICAgICAgIDwvV2FsbGV0UHJvdmlkZXI+XG4gICAgICA8L0NoYWtyYVByb3ZpZGVyPlxuICAgIDwvQXBvbGxvUHJvdmlkZXI+XG4gIClcblxufVxuXG5leHBvcnQgZGVmYXVsdCBNeUFwcFxuIl0sIm5hbWVzIjpbIkNoYWtyYVByb3ZpZGVyIiwiQm94IiwiQXBvbGxvUHJvdmlkZXIiLCJjbGllbnQiLCJXYWxsZXRQcm92aWRlciIsIk5hdiIsIkZvb3RlciIsIk15QXBwIiwiQ29tcG9uZW50IiwicGFnZVByb3BzIiwidyIsIm14IiwicCIsIm1iIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/_app.tsx\n");

/***/ }),

/***/ "./node_modules/next/dist/lib/is-error.js":
/*!************************************************!*\
  !*** ./node_modules/next/dist/lib/is-error.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = isError;\nexports.getProperError = getProperError;\nvar _isPlainObject = __webpack_require__(/*! ../shared/lib/is-plain-object */ \"../shared/lib/is-plain-object\");\nfunction isError(err) {\n    return typeof err === \"object\" && err !== null && \"name\" in err && \"message\" in err;\n}\nfunction getProperError(err) {\n    if (isError(err)) {\n        return err;\n    }\n    if (true) {\n        // provide better error for case where `throw undefined`\n        // is called in development\n        if (typeof err === \"undefined\") {\n            return new Error(\"An undefined error was thrown, \" + \"see here for more info: https://nextjs.org/docs/messages/threw-undefined\");\n        }\n        if (err === null) {\n            return new Error(\"A null error was thrown, \" + \"see here for more info: https://nextjs.org/docs/messages/threw-undefined\");\n        }\n    }\n    return new Error((0, _isPlainObject).isPlainObject(err) ? JSON.stringify(err) : err + \"\");\n}\n\n//# sourceMappingURL=is-error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9pcy1lcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2Ysc0JBQXNCO0FBQ3RCLHFCQUFxQixtQkFBTyxDQUFDLG9FQUErQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsSUFBc0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BwYmwtZnJvbnQtZW5kLXRlbXBsYXRlLW5leHRqcy1tZXNoLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvaXMtZXJyb3IuanM/MTc4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRXJyb3I7XG5leHBvcnRzLmdldFByb3BlckVycm9yID0gZ2V0UHJvcGVyRXJyb3I7XG52YXIgX2lzUGxhaW5PYmplY3QgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9pcy1wbGFpbi1vYmplY3RcIik7XG5mdW5jdGlvbiBpc0Vycm9yKGVycikge1xuICAgIHJldHVybiB0eXBlb2YgZXJyID09PSBcIm9iamVjdFwiICYmIGVyciAhPT0gbnVsbCAmJiBcIm5hbWVcIiBpbiBlcnIgJiYgXCJtZXNzYWdlXCIgaW4gZXJyO1xufVxuZnVuY3Rpb24gZ2V0UHJvcGVyRXJyb3IoZXJyKSB7XG4gICAgaWYgKGlzRXJyb3IoZXJyKSkge1xuICAgICAgICByZXR1cm4gZXJyO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICAvLyBwcm92aWRlIGJldHRlciBlcnJvciBmb3IgY2FzZSB3aGVyZSBgdGhyb3cgdW5kZWZpbmVkYFxuICAgICAgICAvLyBpcyBjYWxsZWQgaW4gZGV2ZWxvcG1lbnRcbiAgICAgICAgaWYgKHR5cGVvZiBlcnIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJBbiB1bmRlZmluZWQgZXJyb3Igd2FzIHRocm93biwgXCIgKyBcInNlZSBoZXJlIGZvciBtb3JlIGluZm86IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL3RocmV3LXVuZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiQSBudWxsIGVycm9yIHdhcyB0aHJvd24sIFwiICsgXCJzZWUgaGVyZSBmb3IgbW9yZSBpbmZvOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy90aHJldy11bmRlZmluZWRcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcigoMCwgX2lzUGxhaW5PYmplY3QpLmlzUGxhaW5PYmplY3QoZXJyKSA/IEpTT04uc3RyaW5naWZ5KGVycikgOiBlcnIgKyBcIlwiKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMtZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/lib/is-error.js\n");

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/client/link */ \"./node_modules/next/dist/client/link.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9saW5rLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlHQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BwYmwtZnJvbnQtZW5kLXRlbXBsYXRlLW5leHRqcy1tZXNoLy4vbm9kZV9tb2R1bGVzL25leHQvbGluay5qcz83NWIzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsaWVudC9saW5rJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/link.js\n");

/***/ }),

/***/ "@apollo/client":
/*!*********************************!*\
  !*** external "@apollo/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@apollo/client");

/***/ }),

/***/ "@chakra-ui/react":
/*!***********************************!*\
  !*** external "@chakra-ui/react" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@chakra-ui/react");

/***/ }),

/***/ "@emurgo/cardano-serialization-lib-nodejs":
/*!***********************************************************!*\
  !*** external "@emurgo/cardano-serialization-lib-nodejs" ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@emurgo/cardano-serialization-lib-nodejs");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("axios");

/***/ }),

/***/ "axios/index":
/*!******************************!*\
  !*** external "axios/index" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("axios/index");

/***/ }),

/***/ "next/dist/compiled/react-is":
/*!**********************************************!*\
  !*** external "next/dist/compiled/react-is" ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/react-is");

/***/ }),

/***/ "../shared/lib/app-router-context":
/*!*************************************************************!*\
  !*** external "next/dist/shared/lib/app-router-context.js" ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/app-router-context.js");

/***/ }),

/***/ "../shared/lib/head-manager-context":
/*!***************************************************************!*\
  !*** external "next/dist/shared/lib/head-manager-context.js" ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/head-manager-context.js");

/***/ }),

/***/ "../i18n/normalize-locale-path":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/i18n/normalize-locale-path.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/i18n/normalize-locale-path.js");

/***/ }),

/***/ "../shared/lib/is-plain-object":
/*!**********************************************************!*\
  !*** external "next/dist/shared/lib/is-plain-object.js" ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/is-plain-object.js");

/***/ }),

/***/ "../mitt":
/*!***********************************************!*\
  !*** external "next/dist/shared/lib/mitt.js" ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/mitt.js");

/***/ }),

/***/ "../page-path/denormalize-page-path":
/*!**************************************************************************!*\
  !*** external "next/dist/shared/lib/page-path/denormalize-page-path.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/page-path/denormalize-page-path.js");

/***/ }),

/***/ "../shared/lib/router-context":
/*!*********************************************************!*\
  !*** external "next/dist/shared/lib/router-context.js" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router-context.js");

/***/ }),

/***/ "../shared/lib/router/utils/add-path-prefix":
/*!***********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/add-path-prefix.js" ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/add-path-prefix.js");

/***/ }),

/***/ "./utils/format-next-pathname-info":
/*!*********************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/format-next-pathname-info.js" ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/format-next-pathname-info.js");

/***/ }),

/***/ "./utils/format-url":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/format-url.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/format-url.js");

/***/ }),

/***/ "../shared/lib/router/utils/get-asset-path-from-route":
/*!*********************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-asset-path-from-route.js" ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-asset-path-from-route.js");

/***/ }),

/***/ "./utils/get-next-pathname-info":
/*!******************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-next-pathname-info.js" ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-next-pathname-info.js");

/***/ }),

/***/ "./utils/is-dynamic":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/is-dynamic.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/is-dynamic.js");

/***/ }),

/***/ "./utils/parse-path":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/parse-path.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/parse-path.js");

/***/ }),

/***/ "./utils/parse-relative-url":
/*!**************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/parse-relative-url.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/parse-relative-url.js");

/***/ }),

/***/ "../shared/lib/router/utils/path-has-prefix":
/*!***********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/path-has-prefix.js" ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/path-has-prefix.js");

/***/ }),

/***/ "./utils/querystring":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/querystring.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/querystring.js");

/***/ }),

/***/ "./utils/remove-trailing-slash":
/*!*****************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/remove-trailing-slash.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/remove-trailing-slash.js");

/***/ }),

/***/ "./utils/resolve-rewrites":
/*!************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/resolve-rewrites.js" ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/resolve-rewrites.js");

/***/ }),

/***/ "./utils/route-matcher":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-matcher.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-matcher.js");

/***/ }),

/***/ "./utils/route-regex":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-regex.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-regex.js");

/***/ }),

/***/ "../utils":
/*!************************************************!*\
  !*** external "next/dist/shared/lib/utils.js" ***!
  \************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/utils.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "tslib":
/*!************************!*\
  !*** external "tslib" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = import("tslib");;

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "./node_modules/@martifylabs/mesh/dist/mesh.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@martifylabs/mesh/dist/mesh.esm.js ***!
  \*********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TransactionService\": () => (/* binding */ TransactionService),\n/* harmony export */   \"WalletService\": () => (/* binding */ WalletService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var axios_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios/index */ \"axios/index\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"tslib\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([tslib__WEBPACK_IMPORTED_MODULE_2__]);\ntslib__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nfunction _regeneratorRuntime() {\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n\n  _regeneratorRuntime = function () {\n    return exports;\n  };\n\n  var exports = {},\n      Op = Object.prototype,\n      hasOwn = Op.hasOwnProperty,\n      $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n      iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n      asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n      toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function (obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n        generator = Object.create(protoGenerator.prototype),\n        context = new Context(tryLocsList || []);\n    return generator._invoke = function (innerFn, self, context) {\n      var state = \"suspendedStart\";\n      return function (method, arg) {\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\n\n        if (\"completed\" === state) {\n          if (\"throw\" === method) throw arg;\n          return doneResult();\n        }\n\n        for (context.method = method, context.arg = arg;;) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n            context.dispatchException(context.arg);\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n          state = \"executing\";\n          var record = tryCatch(innerFn, self, context);\n\n          if (\"normal\" === record.type) {\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          }\n\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n        }\n      };\n    }(innerFn, self, context), generator;\n  }\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {}\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n      NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n            value = result.value;\n        return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n\n      reject(record.arg);\n    }\n\n    var previousPromise;\n\n    this._invoke = function (method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    };\n  }\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (undefined === method) {\n      if (context.delegate = null, \"throw\" === context.method) {\n        if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n\n          return next.value = undefined, next.done = !0, next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    return {\n      next: doneResult\n    };\n  }\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) keys.push(key);\n\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function (skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function () {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function (exception) {\n      if (this.done) throw exception;\n      var context = this;\n\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n            record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n              hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function (type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function (record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function (finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    catch: function (tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      }\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function (iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar Blockfrost = /*#__PURE__*/function () {\n  function Blockfrost() {}\n\n  var _proto = Blockfrost.prototype;\n\n  _proto.init = /*#__PURE__*/function () {\n    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n      var blockfrostApiKey, network, networkEndpoint;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              blockfrostApiKey = _ref.blockfrostApiKey, network = _ref.network;\n              networkEndpoint = network == 0 ? 'https://cardano-testnet.blockfrost.io/api/v0' : 'https://cardano-mainnet.blockfrost.io/api/v0';\n              this._instance = axios_index__WEBPACK_IMPORTED_MODULE_0__.create({\n                baseURL: networkEndpoint,\n                headers: {\n                  project_id: blockfrostApiKey\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function init(_x) {\n      return _init.apply(this, arguments);\n    }\n\n    return init;\n  }();\n\n  _proto.isLoaded = function isLoaded() {\n    return this._instance !== undefined;\n  };\n\n  _proto._request = /*#__PURE__*/function () {\n    var _request2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n      var _ref2$endpoint, endpoint, _ref2$body, body, _ref2$method, method;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref2$endpoint = _ref2.endpoint, endpoint = _ref2$endpoint === void 0 ? '' : _ref2$endpoint, _ref2$body = _ref2.body, body = _ref2$body === void 0 ? null : _ref2$body, _ref2$method = _ref2.method, method = _ref2$method === void 0 ? 'GET' : _ref2$method;\n\n              if (!(method == 'GET')) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 4;\n              return this._instance.get(\"\" + endpoint).then(function (_ref3) {\n                var data = _ref3.data;\n                return data;\n              })[\"catch\"](function (error) {\n                throw error;\n              });\n\n            case 4:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 5:\n              if (!(method == 'POST')) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 8;\n              return this._instance.post(\"\" + endpoint, body).then(function (_ref4) {\n                var data = _ref4.data;\n                return data;\n              })[\"catch\"](function (error) {\n                throw error;\n              });\n\n            case 8:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function _request(_x2) {\n      return _request2.apply(this, arguments);\n    }\n\n    return _request;\n  }();\n\n  _proto.addressesAddressUtxos = /*#__PURE__*/function () {\n    var _addressesAddressUtxos = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref5) {\n      var address, _ref5$page, page, _ref5$limit, limit;\n\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              address = _ref5.address, _ref5$page = _ref5.page, page = _ref5$page === void 0 ? 1 : _ref5$page, _ref5$limit = _ref5.limit, limit = _ref5$limit === void 0 ? 100 : _ref5$limit;\n              _context3.next = 3;\n              return this._request({\n                endpoint: \"/addresses/\" + address + \"/utxos?page=\" + page + \"&count=\" + limit\n              });\n\n            case 3:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function addressesAddressUtxos(_x3) {\n      return _addressesAddressUtxos.apply(this, arguments);\n    }\n\n    return addressesAddressUtxos;\n  }();\n\n  _proto.addressesAddressUtxosAsset = /*#__PURE__*/function () {\n    var _addressesAddressUtxosAsset = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref6) {\n      var address, asset;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              address = _ref6.address, asset = _ref6.asset;\n              _context4.next = 3;\n              return this._request({\n                endpoint: \"/addresses/\" + address + \"/utxos/\" + asset\n              });\n\n            case 3:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function addressesAddressUtxosAsset(_x4) {\n      return _addressesAddressUtxosAsset.apply(this, arguments);\n    }\n\n    return addressesAddressUtxosAsset;\n  }()\n  /**\r\n   * Information about a specific asset\r\n   * @param asset Concatenation of the policy_id and hex-encoded asset_name\r\n   * @returns asset\r\n   */\n  ;\n\n  _proto.assetSpecificAsset =\n  /*#__PURE__*/\n  function () {\n    var _assetSpecificAsset = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(_ref7) {\n      var asset;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              asset = _ref7.asset;\n              _context5.next = 3;\n              return this._request({\n                endpoint: \"/assets/\" + asset\n              });\n\n            case 3:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function assetSpecificAsset(_x5) {\n      return _assetSpecificAsset.apply(this, arguments);\n    }\n\n    return assetSpecificAsset;\n  }()\n  /**\r\n   * Return the transactions within the latest block.\r\n   * @returns\r\n   */\n  ;\n\n  _proto.blockLatestBlock =\n  /*#__PURE__*/\n  function () {\n    var _blockLatestBlock = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this._request({\n                endpoint: '/blocks/latest'\n              });\n\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function blockLatestBlock() {\n      return _blockLatestBlock.apply(this, arguments);\n    }\n\n    return blockLatestBlock;\n  }()\n  /**\r\n   * Return the protocol parameters for the latest epoch.\r\n   * @returns\r\n   */\n  ;\n\n  _proto.epochsLatestEpochProtocolParameters =\n  /*#__PURE__*/\n  function () {\n    var _epochsLatestEpochProtocolParameters = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this._request({\n                endpoint: '/epochs/latest/parameters'\n              });\n\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function epochsLatestEpochProtocolParameters() {\n      return _epochsLatestEpochProtocolParameters.apply(this, arguments);\n    }\n\n    return epochsLatestEpochProtocolParameters;\n  }();\n\n  _proto.transactionsSpecificTransaction = /*#__PURE__*/function () {\n    var _transactionsSpecificTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(_ref8) {\n      var hash;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              hash = _ref8.hash;\n              _context8.next = 3;\n              return this._request({\n                endpoint: \"/txs/\" + hash\n              });\n\n            case 3:\n              return _context8.abrupt(\"return\", _context8.sent);\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function transactionsSpecificTransaction(_x6) {\n      return _transactionsSpecificTransaction.apply(this, arguments);\n    }\n\n    return transactionsSpecificTransaction;\n  }();\n\n  _proto.transactionsTransactionUTXOs = /*#__PURE__*/function () {\n    var _transactionsTransactionUTXOs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(_ref9) {\n      var hash;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              hash = _ref9.hash;\n              _context9.next = 3;\n              return this._request({\n                endpoint: \"/txs/\" + hash + \"/utxos\"\n              });\n\n            case 3:\n              return _context9.abrupt(\"return\", _context9.sent);\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function transactionsTransactionUTXOs(_x7) {\n      return _transactionsTransactionUTXOs.apply(this, arguments);\n    }\n\n    return transactionsTransactionUTXOs;\n  }();\n\n  return Blockfrost;\n}();\n\nvar _excluded = [\"default\"];\n\nvar importCSL = /*#__PURE__*/function () {\n  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof window !== 'undefined')) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return __webpack_require__.e(/*! import() */ \"node_modules_emurgo_cardano-serialization-lib-browser_cardano_serialization_lib_js\").then(__webpack_require__.bind(__webpack_require__, /*! @emurgo/cardano-serialization-lib-browser */ \"./node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib.js\"));\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n            _context.next = 8;\n            return Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @emurgo/cardano-serialization-lib-nodejs */ \"@emurgo/cardano-serialization-lib-nodejs\", 19));\n\n          case 8:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function importCSL() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar resolveImport = /*#__PURE__*/function () {\n  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _yield$importCSL, rest;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return importCSL();\n\n          case 3:\n            _yield$importCSL = _context2.sent;\n            rest = _objectWithoutPropertiesLoose(_yield$importCSL, _excluded);\n            return _context2.abrupt(\"return\", rest);\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error('An error occurred when importing the Cardano Serialization Lib module.');\n            throw _context2.t0;\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 9]]);\n  }));\n\n  return function resolveImport() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar csl = await /*#__PURE__*/resolveImport();\n\nvar fromHex = function fromHex(hex) {\n  return Buffer.from(hex, 'hex');\n};\nvar toHex = function toHex(bytes) {\n  return Buffer.from(bytes).toString('hex');\n};\nvar toLovelace = function toLovelace(ada) {\n  return ada * 1000000;\n};\nvar fromFloat = function fromFloat(_float) {\n  var parts = _float.split('.');\n\n  var numerator = \"\" + parseInt(parts[1], 10);\n  var denominator = '1' + '0'.repeat(parts[1].length);\n  return {\n    numerator: numerator,\n    denominator: denominator\n  };\n};\nvar HexToAscii = function HexToAscii(string) {\n  return fromHex(string).toString('ascii');\n};\nvar assetsToValue = function assetsToValue(assets) {\n  var multiAsset = csl.MultiAsset[\"new\"]();\n  var lovelace = assets['lovelace'];\n  var units = Object.keys(assets);\n  var policies = Array.from(new Set(units.filter(function (unit) {\n    return unit !== 'lovelace';\n  }).map(function (unit) {\n    return unit.slice(0, 56);\n  })));\n  policies.forEach(function (policy) {\n    var policyUnits = units.filter(function (unit) {\n      return unit.slice(0, 56) === policy;\n    });\n    var assetsValue = csl.Assets[\"new\"]();\n    policyUnits.forEach(function (unit) {\n      assetsValue.insert(csl.AssetName[\"new\"](fromHex(unit.slice(56))), csl.BigNum.from_str(assets[unit].toString()));\n    });\n    multiAsset.insert(csl.ScriptHash.from_bytes(fromHex(policy)), assetsValue);\n  });\n  var value = csl.Value[\"new\"](csl.BigNum.from_str(lovelace ? lovelace.toString() : '0'));\n  if (units.length > 1 || !lovelace) value.set_multiasset(multiAsset);\n  return value;\n};\nvar StringToAddress = function StringToAddress(string) {\n  return csl.Address.from_bech32(string);\n};\nvar valueToAssets = function valueToAssets(value) {\n  var assets = [];\n  assets.push({\n    unit: 'lovelace',\n    quantity: value.coin().to_str()\n  });\n\n  if (value.multiasset()) {\n    var multiAssets = value.multiasset().keys();\n\n    for (var j = 0; j < multiAssets.len(); j++) {\n      var policy = multiAssets.get(j);\n      var policyAssets = value.multiasset().get(policy);\n      var assetNames = policyAssets.keys();\n\n      for (var k = 0; k < assetNames.len(); k++) {\n        var policyAsset = assetNames.get(k);\n        var quantity = policyAssets.get(policyAsset);\n        var asset = toHex(policy.to_bytes()) + toHex(policyAsset.name());\n        assets.push({\n          unit: asset,\n          quantity: quantity.to_str()\n        });\n      }\n    }\n  }\n\n  return assets;\n};\nvar getAddressKeyHashHex = function getAddressKeyHashHex(address) {\n  var _csl$BaseAddress$from, _csl$BaseAddress$from2;\n\n  var addr = (_csl$BaseAddress$from = csl.BaseAddress.from_address(csl.Address.from_bech32(address))) == null ? void 0 : (_csl$BaseAddress$from2 = _csl$BaseAddress$from.payment_cred().to_keyhash()) == null ? void 0 : _csl$BaseAddress$from2.to_bytes();\n  if (addr) return toHex(addr);\n  return null;\n};\nvar getAddressKeyHash = function getAddressKeyHash(address) {\n  var _csl$BaseAddress$from3;\n\n  return (_csl$BaseAddress$from3 = csl.BaseAddress.from_address(csl.Address.from_bech32(address))) == null ? void 0 : _csl$BaseAddress$from3.payment_cred().to_keyhash();\n};\nvar plutusDataToHex = function plutusDataToHex(datum) {\n  return toHex(csl.hash_plutus_data(datum).to_bytes());\n};\n\nvar MIN_ADA_REQUIRED_WITH_ASSETS = 2000000;\nvar IPFS_PROVIDER = 'https://infura-ipfs.io/ipfs/';\nvar MakeTxError = {\n  NotEnoughLovelaceInput: 'Not enough lovelace to complete this transaction.',\n  NotEnoughAssetsInput: 'Not enough assets in the inputs to complete this transaction.',\n  InputNotEqualOutput: 'Input not equal to output',\n  LovelaceTooLittle: 'Lovelace must be greater than 1000000',\n  NoRecipientsAddress: 'Missing recipient address'\n};\n\nvar convertMetadataPropToString = function convertMetadataPropToString(src) {\n  if (typeof src === 'string') return src;else if (Array.isArray(src)) return src.join('');\n  return null;\n};\nvar linkToSrc = function linkToSrc(link, base64) {\n  if (base64 === void 0) {\n    base64 = false;\n  }\n\n  var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n  if (link.startsWith('https://')) return link;else if (link.startsWith('ipfs://')) return \"\" + IPFS_PROVIDER + link.split('ipfs://')[1].split('ipfs/').slice(-1)[0]; // IPFS_PROVIDER +\n  // '/' +\n  // link.split('ipfs://')[1].split('ipfs/').slice(-1)[0]\n  else if (link.startsWith('Qm') && link.length === 46 || link.startsWith('baf') && link.length === 59) {\n    // return IPFS_PROVIDER + '/' + link;\n    return \"\" + IPFS_PROVIDER + link;\n  } else if (base64 && base64regex.test(link)) return 'data:image/png;base64,' + link;else if (link.startsWith('data:image')) return link;\n  return null;\n};\n\nvar Wallet = /*#__PURE__*/function () {\n  function Wallet(_ref) {\n    var blockfrost = _ref.blockfrost;\n\n    this._init();\n\n    this._blockfrost = blockfrost;\n  }\n\n  var _proto = Wallet.prototype;\n\n  _proto._init = /*#__PURE__*/function () {\n    var _init2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function _init() {\n      return _init2.apply(this, arguments);\n    }\n\n    return _init;\n  }();\n\n  _proto._showDepreciating = function _showDepreciating() {\n    console.log(\"Depreciating.\");\n  }\n  /**\r\n   * Enable and connect wallet\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * let connected = await Mesh.enableWallet({ walletName: 'ccvault' });\r\n   * ```\r\n   *\r\n   * @param walletName - Available wallets are `ccvault`, `gerowallet` and `nami`\r\n   * @returns - True if wallet is connected\r\n   */\n  ;\n\n  _proto.enable =\n  /*#__PURE__*/\n  function () {\n    var _enable = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n      var walletName, _window$cardano, _window$cardano$ccvau, instance, _window$cardano2, _window$cardano2$gero, _instance, _window$cardano3, _window$cardano3$nami, _instance2;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              walletName = _ref2.walletName;\n\n              this._showDepreciating();\n\n              if (!(walletName === 'ccvault')) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 5;\n              return (_window$cardano = window.cardano) == null ? void 0 : (_window$cardano$ccvau = _window$cardano.ccvault) == null ? void 0 : _window$cardano$ccvau.enable();\n\n            case 5:\n              instance = _context2.sent;\n\n              if (!instance) {\n                _context2.next = 9;\n                break;\n              }\n\n              this._provider = instance;\n              return _context2.abrupt(\"return\", true);\n\n            case 9:\n              _context2.next = 27;\n              break;\n\n            case 11:\n              if (!(walletName === 'gerowallet')) {\n                _context2.next = 20;\n                break;\n              }\n\n              _context2.next = 14;\n              return (_window$cardano2 = window.cardano) == null ? void 0 : (_window$cardano2$gero = _window$cardano2.gerowallet) == null ? void 0 : _window$cardano2$gero.enable();\n\n            case 14:\n              _instance = _context2.sent;\n\n              if (!_instance) {\n                _context2.next = 18;\n                break;\n              }\n\n              this._provider = _instance;\n              return _context2.abrupt(\"return\", true);\n\n            case 18:\n              _context2.next = 27;\n              break;\n\n            case 20:\n              if (!(walletName === 'nami' || walletName === null)) {\n                _context2.next = 27;\n                break;\n              }\n\n              _context2.next = 23;\n              return (_window$cardano3 = window.cardano) == null ? void 0 : (_window$cardano3$nami = _window$cardano3.nami) == null ? void 0 : _window$cardano3$nami.enable();\n\n            case 23:\n              _instance2 = _context2.sent;\n\n              if (!_instance2) {\n                _context2.next = 27;\n                break;\n              }\n\n              this._provider = _instance2;\n              return _context2.abrupt(\"return\", true);\n\n            case 27:\n              return _context2.abrupt(\"return\", false);\n\n            case 28:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function enable(_x) {\n      return _enable.apply(this, arguments);\n    }\n\n    return enable;\n  }();\n\n  _proto.isEnabled = /*#__PURE__*/function () {\n    var _isEnabled = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this._provider !== undefined);\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function isEnabled() {\n      return _isEnabled.apply(this, arguments);\n    }\n\n    return isEnabled;\n  }()\n  /**\r\n   * Returns the network id of the currently connected account. 0 is testnet and 1 is mainnet but other networks can possibly be returned by wallets. Those other network ID values are not governed by this document.\r\n   * @returns 0 is testnet and 1 is mainnet\r\n   */\n  ;\n\n  _proto.getNetworkId =\n  /*#__PURE__*/\n  function () {\n    var _getNetworkId = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this._provider.getNetworkId();\n\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getNetworkId() {\n      return _getNetworkId.apply(this, arguments);\n    }\n\n    return getNetworkId;\n  }()\n  /**\r\n   * return a list of all UTXOs (unspent transaction outputs) controlled by the wallet\r\n   * @returns list of all UTXOs\r\n   */\n  // async getUtxos(options?: { returnAssets?: boolean }): Promise<any> {\n  //   let utxos = await this._provider.getUtxos();\n  //   if (options?.returnAssets && options.returnAssets) {\n  //     if (utxos === undefined) {\n  //       throw 'No utxos';\n  //     }\n  //     let utxosAssets: {}[] = [];\n  //     // TODO, lets get UTXOs like this as default https://docs.blockfrost.io/#tag/Cardano-Addresses/paths/~1addresses~1{address}~1utxos/get\n  //     utxos.map((u) => {\n  //       let thisUtxo: {\n  //         cbor: string; // TODO name `cbor` ok?\n  //         assets: { [assetId: string]: number };\n  //         paymentAddr: string;\n  //         txHash: string; // TODO to get?\n  //         outputIndex: number; // TODO to get?\n  //         dataHash?;\n  //       } = {\n  //         cbor: u,\n  //         assets: {},\n  //         paymentAddr: '',\n  //         txHash: '',\n  //         outputIndex: 0,\n  //       };\n  //       const utxo = csl.TransactionUnspentOutput.from_bytes(\n  //         Buffer.from(u, 'hex')\n  //       );\n  //       thisUtxo.paymentAddr = utxo.output().address().to_bech32();\n  //       valueToAssets(utxo.output().amount()).forEach((nnn) => {\n  //         const unit = nnn.unit;\n  //         const _policy = unit.slice(0, 56);\n  //         const _name = HexToAscii(unit.slice(56));\n  //         const assetId =\n  //           _policy == 'lovelace' ? 'lovelace' : `${_policy}.${_name}`;\n  //         thisUtxo.assets[assetId] = parseInt(nnn.quantity);\n  //       });\n  //       utxosAssets.push(thisUtxo);\n  //     });\n  //     return utxosAssets;\n  //   }\n  //   return utxos;\n  // }\n  ;\n\n  _proto.getUtxos =\n  /*#__PURE__*/\n  function () {\n    var _getUtxos = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var utxos, utxosAssets;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this._provider.getUtxos();\n\n            case 2:\n              utxos = _context5.sent;\n\n              if (!(utxos === undefined)) {\n                _context5.next = 5;\n                break;\n              }\n\n              throw 'No utxos';\n\n            case 5:\n              utxosAssets = []; // TODO, lets get UTXOs like this as default https://docs.blockfrost.io/#tag/Cardano-Addresses/paths/~1addresses~1{address}~1utxos/get\n\n              utxos.map(function (u) {\n                var thisUtxo = {\n                  cbor: u,\n                  assets: {},\n                  address: '',\n                  txHash: '',\n                  outputIndex: 0\n                };\n                var utxo = csl.TransactionUnspentOutput.from_bytes(Buffer.from(u, 'hex'));\n                thisUtxo.address = utxo.output().address().to_bech32(); // thisUtxo.txHash = utxo.output().data_hash()\n                //   ? toHex(utxo.output().data_hash()!.to_bytes())\n                //   : '';\n\n                valueToAssets(utxo.output().amount()).forEach(function (nnn) {\n                  var unit = nnn.unit;\n\n                  var _policy = unit.slice(0, 56);\n\n                  var _name = HexToAscii(unit.slice(56));\n\n                  var assetId = _policy == 'lovelace' ? 'lovelace' : _policy + \".\" + _name;\n                  thisUtxo.assets[assetId] = parseInt(nnn.quantity);\n                });\n                utxosAssets.push(thisUtxo);\n              });\n              return _context5.abrupt(\"return\", utxosAssets);\n\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getUtxos() {\n      return _getUtxos.apply(this, arguments);\n    }\n\n    return getUtxos;\n  }();\n\n  _proto.getBalance = /*#__PURE__*/function () {\n    var _getBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this._provider.getBalance();\n\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function getBalance() {\n      return _getBalance.apply(this, arguments);\n    }\n\n    return getBalance;\n  }()\n  /**\r\n   * Returns a list of all used (included in some on-chain transaction) addresses controlled by the wallet.\r\n   * @returns list of bech32 addresses\r\n   */\n  ;\n\n  _proto.getUsedAddresses =\n  /*#__PURE__*/\n  function () {\n    var _getUsedAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n      var usedAddresses;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this._provider.getUsedAddresses();\n\n            case 2:\n              usedAddresses = _context7.sent;\n              return _context7.abrupt(\"return\", usedAddresses.map(function (address) {\n                return csl.Address.from_bytes(fromHex(address)).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function getUsedAddresses() {\n      return _getUsedAddresses.apply(this, arguments);\n    }\n\n    return getUsedAddresses;\n  }();\n\n  _proto.getUnusedAddresses = /*#__PURE__*/function () {\n    var _getUnusedAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n      var unusedAddresses;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this._provider.getUnusedAddresses();\n\n            case 2:\n              unusedAddresses = _context8.sent;\n              return _context8.abrupt(\"return\", unusedAddresses.map(function (address) {\n                return csl.Address.from_bytes(fromHex(address)).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function getUnusedAddresses() {\n      return _getUnusedAddresses.apply(this, arguments);\n    }\n\n    return getUnusedAddresses;\n  }();\n\n  _proto.getChangeAddress = /*#__PURE__*/function () {\n    var _getChangeAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n      var changeAddress;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this._provider.getChangeAddress();\n\n            case 2:\n              changeAddress = _context9.sent;\n              return _context9.abrupt(\"return\", csl.Address.from_bytes(fromHex(changeAddress)).to_bech32());\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function getChangeAddress() {\n      return _getChangeAddress.apply(this, arguments);\n    }\n\n    return getChangeAddress;\n  }();\n\n  _proto.getCollateral = /*#__PURE__*/function () {\n    var _getCollateral = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this._provider.getCollateral();\n\n            case 2:\n              return _context10.abrupt(\"return\", _context10.sent);\n\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function getCollateral() {\n      return _getCollateral.apply(this, arguments);\n    }\n\n    return getCollateral;\n  }()\n  /**\r\n   * Returns the reward addresses owned by the wallet. This can return multiple addresses e.g. CIP-0018.\r\n   * @returns list of reward addresses\r\n   */\n  ;\n\n  _proto.getRewardAddresses =\n  /*#__PURE__*/\n  function () {\n    var _getRewardAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n      var unusedAddresses;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this._provider.getRewardAddresses();\n\n            case 2:\n              unusedAddresses = _context11.sent;\n              return _context11.abrupt(\"return\", unusedAddresses.map(function (address) {\n                return csl.Address.from_bytes(fromHex(address)).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function getRewardAddresses() {\n      return _getRewardAddresses.apply(this, arguments);\n    }\n\n    return getRewardAddresses;\n  }()\n  /**\r\n   * Requests that a user sign the unsigned portions of the supplied transaction. The wallet should ask the user for permission, and if given, try to sign the supplied body and return a signed transaction.\r\n   * @param tx - Transaction in CBOR\r\n   * @param partialSign - True if partial sign for multi-signature\r\n   * @returns signature\r\n   */\n  ;\n\n  _proto.signTx =\n  /*#__PURE__*/\n  function () {\n    var _signTx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(_ref3) {\n      var tx, _ref3$partialSign, partialSign;\n\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              tx = _ref3.tx, _ref3$partialSign = _ref3.partialSign, partialSign = _ref3$partialSign === void 0 ? false : _ref3$partialSign;\n              _context12.next = 3;\n              return this._provider.signTx(tx, partialSign);\n\n            case 3:\n              return _context12.abrupt(\"return\", _context12.sent);\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function signTx(_x2) {\n      return _signTx.apply(this, arguments);\n    }\n\n    return signTx;\n  }()\n  /**\r\n   * This endpoint utilizes the CIP-0008 signing spec for standardization/safety reasons. It allows the dApp to request the user to sign a payload conforming to said spec.\r\n   * @param payload - Nonce string\r\n   * @returns signature\r\n   */\n  ;\n\n  _proto.signData =\n  /*#__PURE__*/\n  function () {\n    var _signData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(_ref4) {\n      var payload, rewardAddress, coseSign1Hex;\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              payload = _ref4.payload;\n              _context13.next = 3;\n              return this.getRewardAddresses();\n\n            case 3:\n              rewardAddress = _context13.sent;\n              _context13.next = 6;\n              return this._provider.signData(rewardAddress[0], payload);\n\n            case 6:\n              coseSign1Hex = _context13.sent;\n              return _context13.abrupt(\"return\", coseSign1Hex);\n\n            case 8:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function signData(_x3) {\n      return _signData.apply(this, arguments);\n    }\n\n    return signData;\n  }();\n\n  _proto.submitTx = /*#__PURE__*/function () {\n    var _submitTx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_ref5) {\n      var tx;\n      return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              tx = _ref5.tx;\n              _context14.next = 3;\n              return this._provider.submitTx(tx);\n\n            case 3:\n              return _context14.abrupt(\"return\", _context14.sent);\n\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function submitTx(_x4) {\n      return _submitTx.apply(this, arguments);\n    }\n\n    return submitTx;\n  }()\n  /**\r\n   * These are helper functions\r\n   */\n\n  /**\r\n   * Get a list wallets installed on this browse\r\n   * @returns a list of available wallets\r\n   */\n  ;\n\n  _proto.getAvailableWallets =\n  /*#__PURE__*/\n  function () {\n    var _getAvailableWallets = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n      var availableWallets;\n      return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              availableWallets = [];\n\n              if (!(window.cardano === undefined)) {\n                _context15.next = 3;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", availableWallets);\n\n            case 3:\n              if (window.cardano.ccvault) {\n                availableWallets.push('ccvault');\n              }\n\n              if (window.cardano.gerowallet) {\n                availableWallets.push('gerowallet');\n              }\n\n              if (window.cardano.nami) {\n                availableWallets.push('nami');\n              }\n\n              return _context15.abrupt(\"return\", availableWallets);\n\n            case 7:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }));\n\n    function getAvailableWallets() {\n      return _getAvailableWallets.apply(this, arguments);\n    }\n\n    return getAvailableWallets;\n  }()\n  /**\r\n   * Return the first used address\r\n   * @returns first address in string\r\n   */\n  ;\n\n  _proto.getWalletAddress =\n  /*#__PURE__*/\n  function () {\n    var _getWalletAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n      return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.getUsedAddresses();\n\n            case 2:\n              return _context16.abrupt(\"return\", _context16.sent[0]);\n\n            case 3:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function getWalletAddress() {\n      return _getWalletAddress.apply(this, arguments);\n    }\n\n    return getWalletAddress;\n  }()\n  /**\r\n   * Return lovelace amount\r\n   * TODO: why get `underflow` error?\r\n   * @returns lovelance\r\n   */\n  ;\n\n  _proto.getLovelace =\n  /*#__PURE__*/\n  function () {\n    var _getLovelace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n      var lovelace, utxos, inputs;\n      return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              lovelace = 0;\n              _context17.next = 3;\n              return this.getUtxos();\n\n            case 3:\n              utxos = _context17.sent;\n\n              if (utxos !== undefined) {\n                // // v1\n                // const parsedUtxos = utxos.map((utxo) =>\n                //   csl.TransactionUnspentOutput.from_bytes(fromHex(utxo.cbor))\n                // );\n                // let countedValue = csl.Value.new(\n                //   csl.BigNum.from_str('0')\n                // );\n                // parsedUtxos.forEach(\n                //   (element: {\n                //     output: () => {\n                //       (): any;\n                //       new (): any;\n                //       amount: { (): Value; new (): any };\n                //     };\n                //   }) => {\n                //     countedValue = countedValue.checked_add(element.output().amount());\n                //   }\n                // );\n                // const minAda = csl.min_ada_required(\n                //   countedValue,\n                //   false,\n                //   csl.BigNum.from_str(MIN_ADA_REQUIRED.toString())\n                // );\n                // const availableAda = countedValue.coin().checked_sub(minAda);\n                // const lovelace = parseInt(availableAda.to_str());\n                // return lovelace;\n                // // v2\n                inputs = utxos.map(function (utxo) {\n                  return csl.TransactionUnspentOutput.from_bytes(Buffer.from(utxo.cbor, 'hex'));\n                });\n                inputs.forEach(function (nn) {\n                  valueToAssets(nn.output().amount()).forEach(function (nnn) {\n                    if (nnn.unit === 'lovelace') {\n                      lovelace += parseInt(nnn.quantity, 10);\n                    }\n                  });\n                });\n              }\n\n              return _context17.abrupt(\"return\", lovelace);\n\n            case 6:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function getLovelace() {\n      return _getLovelace.apply(this, arguments);\n    }\n\n    return getLovelace;\n  }()\n  /**\r\n   * Get a list of assets in connected wallet\r\n   * Note: includeOnchain requires `Mesh.blockfrost.init`\r\n   * @param policyId (optional) if provided will filter only assets in this policy\r\n   * @param includeOnchain (optional) if provided will get on-chain metadata\r\n   * @param limit (optional) if provided will limit the number of (random) assets returned\r\n   * @returns assets - List of asset\r\n   */\n  ;\n\n  _proto.getAssets =\n  /*#__PURE__*/\n  function () {\n    var _getAssets = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(options) {\n      var _this = this;\n\n      var valueCBOR, value, assets, _value$multiasset, multiAssets, j, _value$multiasset2, policy, policyAssets, assetNames, k, policyAsset, quantity, asset, _policy, _name, filteredAssets;\n\n      return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.getBalance();\n\n            case 2:\n              valueCBOR = _context19.sent;\n              value = csl.Value.from_bytes(fromHex(valueCBOR));\n              assets = [];\n\n              if (value.multiasset()) {\n                multiAssets = (_value$multiasset = value.multiasset()) == null ? void 0 : _value$multiasset.keys();\n\n                if (multiAssets) {\n                  for (j = 0; j < multiAssets.len(); j++) {\n                    policy = multiAssets.get(j);\n                    policyAssets = (_value$multiasset2 = value.multiasset()) == null ? void 0 : _value$multiasset2.get(policy);\n                    assetNames = policyAssets == null ? void 0 : policyAssets.keys();\n\n                    if (policyAssets && assetNames) {\n                      for (k = 0; k < assetNames.len(); k++) {\n                        policyAsset = assetNames.get(k);\n                        quantity = policyAssets.get(policyAsset);\n                        asset = toHex(policy.to_bytes()) + toHex(policyAsset.name());\n                        _policy = asset.slice(0, 56);\n                        _name = asset.slice(56);\n                        assets.push({\n                          unit: asset,\n                          quantity: parseInt(quantity.to_str()),\n                          policy: _policy,\n                          name: HexToAscii(_name)\n                        });\n                      }\n                    }\n                  }\n                }\n              } // if `policyId` is provided, return assets in this policy ID\n\n\n              if (options != null && options.policyId && options.policyId && (options == null ? void 0 : options.policyId.length) > 0) {\n                filteredAssets = assets.filter(function (el) {\n                  return el.unit.includes(options.policyId);\n                }).map(function (item) {\n                  return item;\n                });\n                assets = [].concat(filteredAssets);\n              } // if `limit` provided, pick the first `limit` number of assets\n\n\n              if (options != null && options.limit && options.limit > 0) {\n                assets = assets.slice(0, options.limit);\n              } // if blockfrost is loaded and `includeOnchain`, pull on-chain info\n\n\n              if (!(this._blockfrost.isLoaded() && options != null && options.includeOnchain)) {\n                _context19.next = 11;\n                break;\n              }\n\n              _context19.next = 11;\n              return Promise.all(assets.map( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(asset) {\n                  return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n                    while (1) {\n                      switch (_context18.prev = _context18.next) {\n                        case 0:\n                          _context18.next = 2;\n                          return _this._blockfrost.assetSpecificAsset({\n                            asset: asset.unit\n                          });\n\n                        case 2:\n                          asset.onchain = _context18.sent;\n                          asset.image = asset.onchain.onchain_metadata && asset.onchain.onchain_metadata.image && linkToSrc(convertMetadataPropToString(asset.onchain.onchain_metadata.image)) || '';\n\n                        case 4:\n                        case \"end\":\n                          return _context18.stop();\n                      }\n                    }\n                  }, _callee18);\n                }));\n\n                return function (_x6) {\n                  return _ref6.apply(this, arguments);\n                };\n              }()));\n\n            case 11:\n              return _context19.abrupt(\"return\", assets);\n\n            case 12:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function getAssets(_x5) {\n      return _getAssets.apply(this, arguments);\n    }\n\n    return getAssets;\n  }();\n\n  _proto.submitTransaction = /*#__PURE__*/function () {\n    var _submitTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(_ref7) {\n      var tx, witnesses, _ref7$metadata, metadata, transaction, txWitnesses, txVkeys, txScripts, totalVkeys, totalScripts, _iterator, _step, witness, addWitnesses, addVkeys, _i2, i, _i, totalWitnesses, aux, generalMetadata, signedTx, txHash;\n\n      return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              tx = _ref7.tx, witnesses = _ref7.witnesses, _ref7$metadata = _ref7.metadata, metadata = _ref7$metadata === void 0 ? undefined : _ref7$metadata;\n              transaction = csl.Transaction.from_bytes(Buffer.from(tx, 'hex'));\n              txWitnesses = transaction.witness_set();\n              txVkeys = txWitnesses.vkeys();\n              txScripts = txWitnesses.native_scripts();\n              totalVkeys = csl.Vkeywitnesses[\"new\"]();\n              totalScripts = csl.NativeScripts[\"new\"]();\n\n              for (_iterator = _createForOfIteratorHelperLoose(witnesses); !(_step = _iterator()).done;) {\n                witness = _step.value;\n                addWitnesses = csl.TransactionWitnessSet.from_bytes(Buffer.from(witness, 'hex'));\n                addVkeys = addWitnesses.vkeys();\n\n                if (addVkeys) {\n                  for (_i2 = 0; _i2 < addVkeys.len(); _i2++) {\n                    totalVkeys.add(addVkeys.get(_i2));\n                  }\n                }\n              }\n\n              if (txVkeys) {\n                for (i = 0; i < txVkeys.len(); i++) {\n                  totalVkeys.add(txVkeys.get(i));\n                }\n              }\n\n              if (txScripts) {\n                for (_i = 0; _i < txScripts.len(); _i++) {\n                  totalScripts.add(txScripts.get(_i));\n                }\n              }\n\n              totalWitnesses = csl.TransactionWitnessSet[\"new\"]();\n              totalWitnesses.set_vkeys(totalVkeys);\n              totalWitnesses.set_native_scripts(totalScripts);\n\n              if (metadata) {\n                aux = csl.AuxiliaryData[\"new\"]();\n                generalMetadata = csl.GeneralTransactionMetadata[\"new\"]();\n                Object.entries(metadata).map(function (_ref8) {\n                  var MetadataLabel = _ref8[0],\n                      Metadata = _ref8[1];\n                  generalMetadata.insert(csl.BigNum.from_str(MetadataLabel), csl.encode_json_str_to_metadatum(JSON.stringify(Metadata), 0));\n                });\n                aux.set_metadata(generalMetadata);\n              } else {\n                aux = transaction.auxiliary_data();\n              }\n\n              _context20.prev = 14;\n              _context20.next = 17;\n              return csl.Transaction[\"new\"](transaction.body(), totalWitnesses, aux);\n\n            case 17:\n              signedTx = _context20.sent;\n              _context20.next = 20;\n              return this.submitTx({\n                tx: toHex(signedTx.to_bytes())\n              });\n\n            case 20:\n              txHash = _context20.sent;\n              return _context20.abrupt(\"return\", txHash);\n\n            case 24:\n              _context20.prev = 24;\n              _context20.t0 = _context20[\"catch\"](14);\n              throw _context20.t0;\n\n            case 27:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this, [[14, 24]]);\n    }));\n\n    function submitTransaction(_x7) {\n      return _submitTransaction.apply(this, arguments);\n    }\n\n    return submitTransaction;\n  }();\n\n  return Wallet;\n}();\n\nvar Transaction = /*#__PURE__*/function () {\n  function Transaction(_ref) {\n    var wallet = _ref.wallet;\n\n    this._createTxOutput = function (_ref2) {\n      var address = _ref2.address,\n          value = _ref2.value,\n          datum = _ref2.datum;\n      var output;\n\n      if (datum) {\n        output = csl.TransactionOutputBuilder[\"new\"]().with_address(address).with_plutus_data(datum).with_data_hash(csl.hash_plutus_data(datum)).next().with_value(value).build();\n      } else {\n        output = csl.TransactionOutputBuilder[\"new\"]().with_address(address).next().with_value(value).build();\n      }\n\n      return output;\n    };\n\n    this.createTxUnspentOutput = function (address, utxo) {\n      var amount = {};\n\n      for (var i = 0; i < utxo.amount.length; i++) {\n        var thisAsset = utxo.amount[i];\n        amount[thisAsset.unit] = thisAsset.quantity;\n      }\n\n      try {\n        return csl.TransactionUnspentOutput[\"new\"](csl.TransactionInput[\"new\"](csl.TransactionHash.from_bytes(fromHex(utxo.tx_hash)), utxo.output_index), csl.TransactionOutput[\"new\"](address, assetsToValue(amount)));\n      } catch (error) {\n        console.error(\"Unexpected error in createTxUnspentOutput. [Message: \" + error + \"]\");\n        throw error;\n      }\n    };\n\n    this.wallet = wallet;\n    this._blockfrost = new Blockfrost();\n  }\n\n  var _proto = Transaction.prototype;\n\n  _proto._getTxBuilderConfig = /*#__PURE__*/function () {\n    var _getTxBuilderConfig2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _fromFloat, price_mem_numerator, price_mem_denominator, _fromFloat2, price_step_numerator, price_step_denominator, txBuilderConfig;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this._blockfrost.epochsLatestEpochProtocolParameters();\n\n            case 2:\n              this.protocolParameters = _context.sent;\n              _fromFloat = fromFloat(this.protocolParameters.price_mem.toString()), price_mem_numerator = _fromFloat.numerator, price_mem_denominator = _fromFloat.denominator;\n              _fromFloat2 = fromFloat(this.protocolParameters.price_step.toString()), price_step_numerator = _fromFloat2.numerator, price_step_denominator = _fromFloat2.denominator;\n              txBuilderConfig = csl.TransactionBuilderConfigBuilder[\"new\"]().coins_per_utxo_byte(csl.BigNum.from_str(this.protocolParameters.coins_per_utxo_word)).fee_algo(csl.LinearFee[\"new\"](csl.BigNum.from_str(this.protocolParameters.min_fee_a.toString()), csl.BigNum.from_str(this.protocolParameters.min_fee_b.toString()))).key_deposit(csl.BigNum.from_str(this.protocolParameters.key_deposit)).pool_deposit(csl.BigNum.from_str(this.protocolParameters.pool_deposit)).max_tx_size(this.protocolParameters.max_tx_size).max_value_size(parseInt(this.protocolParameters.max_val_size)).ex_unit_prices(csl.ExUnitPrices[\"new\"](csl.UnitInterval[\"new\"](csl.BigNum.from_str(price_mem_numerator), csl.BigNum.from_str(price_mem_denominator)), csl.UnitInterval[\"new\"](csl.BigNum.from_str(price_step_numerator), csl.BigNum.from_str(price_step_denominator)))).build();\n              return _context.abrupt(\"return\", txBuilderConfig);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function _getTxBuilderConfig() {\n      return _getTxBuilderConfig2.apply(this, arguments);\n    }\n\n    return _getTxBuilderConfig;\n  }();\n\n  _proto._buildTransaction = /*#__PURE__*/function () {\n    var _buildTransaction2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n      var txBuilder, txBody, witnesses, transaction, transactionBytes, transactionHex;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              txBuilder = _ref3.txBuilder;\n              txBody = txBuilder.build();\n              witnesses = csl.TransactionWitnessSet[\"new\"]();\n              transaction = csl.Transaction[\"new\"](txBody, witnesses);\n              transactionBytes = transaction.to_bytes();\n              transactionHex = toHex(transactionBytes);\n              return _context2.abrupt(\"return\", transactionHex);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function _buildTransaction(_x) {\n      return _buildTransaction2.apply(this, arguments);\n    }\n\n    return _buildTransaction;\n  }();\n\n  _proto._addChange = /*#__PURE__*/function () {\n    var _addChange2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref4) {\n      var txBuilder, changeAddress;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              txBuilder = _ref4.txBuilder, changeAddress = _ref4.changeAddress;\n\n              if (!(changeAddress == undefined)) {\n                _context3.next = 5;\n                break;\n              }\n\n              _context3.next = 4;\n              return this.wallet.getWalletAddress();\n\n            case 4:\n              changeAddress = _context3.sent;\n\n            case 5:\n              txBuilder.add_change_if_needed(StringToAddress(changeAddress));\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function _addChange(_x2) {\n      return _addChange2.apply(this, arguments);\n    }\n\n    return _addChange;\n  }();\n\n  _proto._addMetadata = /*#__PURE__*/function () {\n    var _addMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref5) {\n      var txBuilder, metadata, auxData, generalMetadata;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              txBuilder = _ref5.txBuilder, metadata = _ref5.metadata;\n              auxData = csl.AuxiliaryData[\"new\"]();\n              generalMetadata = csl.GeneralTransactionMetadata[\"new\"]();\n              generalMetadata.insert(csl.BigNum.from_str('100'), csl.encode_json_str_to_metadatum(JSON.stringify(metadata), 1));\n              auxData.set_metadata(generalMetadata);\n              txBuilder.set_auxiliary_data(auxData);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function _addMetadata(_x3) {\n      return _addMetadata2.apply(this, arguments);\n    }\n\n    return _addMetadata;\n  }() // helper function to sort the 2nd item in array\n  ;\n\n  _proto._sortDescendingArray = function _sortDescendingArray(array) {\n    array.sort(function (i, j) {\n      return j[1] - i[1];\n    });\n  };\n\n  _proto._selectUtxosForLovelace = function _selectUtxosForLovelace(_ref6) {\n    var utxosContainLovelaceArray = _ref6.utxosContainLovelaceArray,\n        remainingLovelace = _ref6.remainingLovelace;\n    var chosenUtxoCborStringList = [];\n\n    this._sortDescendingArray(utxosContainLovelaceArray);\n\n    for (var _iterator = _createForOfIteratorHelperLoose(utxosContainLovelaceArray), _step; !(_step = _iterator()).done;) {\n      var u = _step.value;\n      var cbor = u[0];\n      var amountLovelace = u[1];\n      chosenUtxoCborStringList.push(cbor);\n      remainingLovelace -= amountLovelace;\n\n      if (remainingLovelace < 0) {\n        break;\n      }\n    }\n\n    return {\n      chosenUtxoCborStringList: chosenUtxoCborStringList,\n      remainingLovelace: remainingLovelace\n    };\n  }\n  /**\r\n   * todos:\r\n   * get enough lovelace for fees, instead of hardcoded\r\n   * get enough lovelace for attached assets, instead of hardcoded\r\n   * improve: lets try to find the largest lovelace/asset utxo just enough to fulfill tx, instead of picking the largest\r\n   */\n  ;\n\n  _proto.selectUtxoInputs =\n  /*#__PURE__*/\n  function () {\n    var _selectUtxoInputs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(_ref7) {\n      var _this = this;\n\n      var outputs, _debug, chosenUtxoCborStringList, remainingLovelace, remainingAssets, utxoDictByCborKeys, utxos, _iterator2, _step2, output, _assetId2, _iterator3, _step3, utxo, _loop, assetId, _assetId, utxosContainLovelace, selectedLovelaceUtxos, _utxosContainLovelace;\n\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              outputs = _ref7.outputs;\n              _debug = false;\n              chosenUtxoCborStringList = []; // to return and to stop repeated utxo selected\n\n              remainingLovelace = 0; // to track lovelace\n\n              remainingAssets = {}; // to track assets\n\n              utxoDictByCborKeys = {}; // for quick look up\n\n              /**\r\n               * 1. prepare\r\n               */\n\n              _context5.next = 8;\n              return this.wallet.getUtxos();\n\n            case 8:\n              utxos = _context5.sent;\n\n              for (_iterator2 = _createForOfIteratorHelperLoose(outputs); !(_step2 = _iterator2()).done;) {\n                output = _step2.value;\n\n                for (_assetId2 in output.assets) {\n                  if (_assetId2 === 'lovelace') {\n                    remainingLovelace += output.assets[_assetId2];\n                  } else {\n                    if (!(_assetId2 in remainingAssets)) {\n                      remainingAssets[_assetId2] = 0;\n                    }\n\n                    remainingAssets[_assetId2] += output.assets[_assetId2];\n                    remainingLovelace += toLovelace(2); // todo: attached ADA for assets is hardcoded\n                  }\n                }\n              }\n\n              for (_iterator3 = _createForOfIteratorHelperLoose(utxos); !(_step3 = _iterator3()).done;) {\n                utxo = _step3.value;\n                utxoDictByCborKeys[utxo.cbor] = utxo;\n              }\n\n              remainingLovelace += toLovelace(1); // todo: hardcoded for fees\n\n              if (_debug) {\n                console.log('utxos', utxos);\n                console.log('assets requirements', remainingLovelace, remainingAssets);\n              }\n              /**\r\n               * 2. add assets UTXOs\r\n               */\n              // 2a. for each assets in remainingAssets, lets look for their utxos\n\n\n              _loop = function _loop(assetId) {\n                if (remainingAssets[assetId] > 0) {\n                  var utxosContainAsset = utxos.filter(function (utxo) {\n                    return !chosenUtxoCborStringList.includes(utxo.cbor) && assetId in utxo.assets;\n                  }).map(function (utxo) {\n                    return [utxo.cbor, utxo.assets[assetId], utxo];\n                  });\n\n                  _this._sortDescendingArray(utxosContainAsset);\n\n                  for (var _iterator4 = _createForOfIteratorHelperLoose(utxosContainAsset), _step4; !(_step4 = _iterator4()).done;) {\n                    var u = _step4.value;\n                    var cbor = u[0];\n                    var quantity = u[1];\n                    var _utxo = u[2];\n                    remainingAssets[assetId] -= quantity;\n                    chosenUtxoCborStringList.push(cbor);\n                    remainingLovelace -= _utxo.assets.lovelace;\n\n                    if (remainingAssets[assetId] <= 0) {\n                      break;\n                    }\n                  }\n                }\n              };\n\n              for (assetId in remainingAssets) {\n                _loop(assetId);\n              }\n\n              if (_debug) {\n                console.log('-------');\n                console.log('after assets selection', utxos.filter(function (utxo) {\n                  return chosenUtxoCborStringList.includes(utxo.cbor);\n                }));\n                console.log('assets remaining', remainingLovelace, remainingAssets);\n              } // 2b. if not enough to fulfill remainingAssets, throw error\n\n\n              _context5.t0 = _regeneratorRuntime().keys(remainingAssets);\n\n            case 17:\n              if ((_context5.t1 = _context5.t0()).done) {\n                _context5.next = 23;\n                break;\n              }\n\n              _assetId = _context5.t1.value;\n\n              if (!(remainingAssets[_assetId] > 0)) {\n                _context5.next = 21;\n                break;\n              }\n\n              throw MakeTxError.NotEnoughAssetsInput;\n\n            case 21:\n              _context5.next = 17;\n              break;\n\n            case 23:\n              if (!(remainingLovelace > 0)) {\n                _context5.next = 32;\n                break;\n              }\n\n              // 3a. lets try to find utxos that has only lovelace\n              utxosContainLovelace = utxos.filter(function (utxo) {\n                return !chosenUtxoCborStringList.includes(utxo.cbor) && Object.keys(utxo.assets).length === 1;\n              }).map(function (utxo) {\n                return [utxo.cbor, utxo.assets.lovelace];\n              });\n              selectedLovelaceUtxos = this._selectUtxosForLovelace({\n                utxosContainLovelaceArray: utxosContainLovelace,\n                remainingLovelace: remainingLovelace\n              });\n\n              if (_debug) {\n                console.log('-------');\n                console.log('after lovelace selection step 1', utxos.filter(function (utxo) {\n                  return selectedLovelaceUtxos.chosenUtxoCborStringList.includes(utxo.cbor);\n                }));\n                console.log('assets remaining', selectedLovelaceUtxos.remainingLovelace);\n              } // 3b. if cant find any or cant find enough lovelace, lets include utxos that also has assets\n\n\n              if (selectedLovelaceUtxos.remainingLovelace > 0) {\n                _utxosContainLovelace = utxos.filter(function (utxo) {\n                  return !chosenUtxoCborStringList.includes(utxo.cbor);\n                }).map(function (utxo) {\n                  return [utxo.cbor, utxo.assets.lovelace];\n                });\n                selectedLovelaceUtxos = this._selectUtxosForLovelace({\n                  utxosContainLovelaceArray: _utxosContainLovelace,\n                  remainingLovelace: remainingLovelace\n                });\n\n                if (_debug) {\n                  console.log('-------');\n                  console.log('after lovelace selection step 2', utxos.filter(function (utxo) {\n                    return selectedLovelaceUtxos.chosenUtxoCborStringList.includes(utxo.cbor);\n                  }));\n                  console.log('assets remaining', selectedLovelaceUtxos.remainingLovelace);\n                }\n              } // 3c. if still not enough lovelace to fulfill tx, throw error\n\n\n              if (!(selectedLovelaceUtxos.remainingLovelace > 0)) {\n                _context5.next = 30;\n                break;\n              }\n\n              throw MakeTxError.NotEnoughLovelaceInput;\n\n            case 30:\n              // 3d. if all is well with lovelace\n              chosenUtxoCborStringList.push.apply(chosenUtxoCborStringList, selectedLovelaceUtxos.chosenUtxoCborStringList);\n              remainingLovelace = selectedLovelaceUtxos.remainingLovelace;\n\n            case 32:\n              if (_debug) {\n                console.log('-------');\n                console.log('final utxos selection', utxos.filter(function (utxo) {\n                  return chosenUtxoCborStringList.includes(utxo.cbor);\n                }));\n                console.log('assets remaining', remainingLovelace, remainingAssets);\n              }\n\n              return _context5.abrupt(\"return\", chosenUtxoCborStringList);\n\n            case 34:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function selectUtxoInputs(_x4) {\n      return _selectUtxoInputs.apply(this, arguments);\n    }\n\n    return selectUtxoInputs;\n  }();\n\n  _proto._addInputUtxo = /*#__PURE__*/function () {\n    var _addInputUtxo2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref8) {\n      var inputs, outputs, txInputsBuilder, utxos;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              inputs = _ref8.inputs, outputs = _ref8.outputs;\n\n              if (!(inputs.length === 0)) {\n                _context6.next = 5;\n                break;\n              }\n\n              _context6.next = 4;\n              return this.selectUtxoInputs({\n                outputs: outputs\n              });\n\n            case 4:\n              inputs = _context6.sent;\n\n            case 5:\n              // end Version 3\n\n              /**\r\n               * from the inputs, create TxInputsBuilder\r\n               */\n              txInputsBuilder = csl.TxInputsBuilder[\"new\"]();\n              utxos = inputs.map(function (utxo) {\n                return csl.TransactionUnspentOutput.from_bytes(Buffer.from(utxo, 'hex'));\n              });\n              utxos.forEach(function (utxo) {\n                txInputsBuilder.add_input(utxo.output().address(), utxo.input(), utxo.output().amount());\n              });\n              return _context6.abrupt(\"return\", txInputsBuilder);\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function _addInputUtxo(_x5) {\n      return _addInputUtxo2.apply(this, arguments);\n    }\n\n    return _addInputUtxo;\n  }();\n\n  _proto._addPlutus = function _addPlutus(_ref9) {\n    _objectDestructuringEmpty(_ref9);\n  };\n\n  _proto._makeMultiAsset = function _makeMultiAsset(assets) {\n    var AssetsMap = {};\n\n    for (var _iterator5 = _createForOfIteratorHelperLoose(assets), _step5; !(_step5 = _iterator5()).done;) {\n      var _asset = _step5.value;\n      var unit = _asset.unit,\n          quantity = _asset.quantity;\n\n      var _unit$split = unit.split('.'),\n          _policy = _unit$split[0],\n          assetName = _unit$split[1];\n\n      if (!Array.isArray(AssetsMap[_policy])) {\n        AssetsMap[_policy] = [];\n      }\n\n      AssetsMap[_policy].push({\n        unit: Buffer.from(assetName, 'ascii').toString('hex'),\n        quantity: quantity\n      });\n    }\n\n    var multiAsset = csl.MultiAsset[\"new\"]();\n\n    for (var policy in AssetsMap) {\n      var ScriptHash = csl.ScriptHash.from_bytes(Buffer.from(policy, 'hex'));\n      var Assets = csl.Assets[\"new\"]();\n      var _assets = AssetsMap[policy];\n\n      for (var _iterator6 = _createForOfIteratorHelperLoose(_assets), _step6; !(_step6 = _iterator6()).done;) {\n        var asset = _step6.value;\n        var AssetName = csl.AssetName[\"new\"](Buffer.from(asset.unit, 'hex'));\n        var BigNum = csl.BigNum.from_str(asset.quantity.toString());\n        Assets.insert(AssetName, BigNum);\n      }\n\n      multiAsset.insert(ScriptHash, Assets);\n    }\n\n    return multiAsset;\n  };\n\n  _proto._addOutputs = /*#__PURE__*/function () {\n    var _addOutputs2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(_ref10) {\n      var _this2 = this;\n\n      var txBuilder, outputs, ownerAddressBech32, datumAssetsList, txOutputs, i;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              txBuilder = _ref10.txBuilder, outputs = _ref10.outputs, ownerAddressBech32 = _ref10.ownerAddressBech32, datumAssetsList = _ref10.datumAssetsList;\n              txOutputs = csl.TransactionOutputs[\"new\"]();\n              outputs.map(function (output) {\n                if (output.address === undefined || output.address.length === 0) {\n                  throw MakeTxError.NoRecipientsAddress;\n                } // add lovelace\n\n\n                var amountLovelace = output.assets.lovelace && output.assets.lovelace > MIN_ADA_REQUIRED_WITH_ASSETS ? output.assets.lovelace : MIN_ADA_REQUIRED_WITH_ASSETS; // TODO, cannot hardcode 2ADA. if too many assets, 2 ADA is not enough\n\n                var outputValue = csl.Value[\"new\"](csl.BigNum.from_str(amountLovelace.toString())); // if have native tokens\n\n                if (Object.keys(output.assets)) {\n                  var assets = [];\n                  Object.keys(output.assets).map( /*#__PURE__*/function () {\n                    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(assetId) {\n                      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                        while (1) {\n                          switch (_context7.prev = _context7.next) {\n                            case 0:\n                              if (assetId !== 'lovelace') {\n                                assets.push({\n                                  unit: assetId,\n                                  quantity: output.assets[assetId]\n                                });\n                              }\n\n                            case 1:\n                            case \"end\":\n                              return _context7.stop();\n                          }\n                        }\n                      }, _callee7);\n                    }));\n\n                    return function (_x7) {\n                      return _ref11.apply(this, arguments);\n                    };\n                  }());\n\n                  var multiAsset = _this2._makeMultiAsset(assets);\n\n                  outputValue.set_multiasset(multiAsset);\n                } // let datumHash: string | null = null;\n\n\n                var datum = null;\n\n                if (datumAssetsList) {\n                  datum = _this2.createDatum({\n                    ownerAddressBech32: ownerAddressBech32,\n                    assets: datumAssetsList\n                  }); // datumHash = plutusDataToHex(datum);\n                }\n\n                var thisOutput = _this2._createTxOutput({\n                  address: StringToAddress(output.address),\n                  value: outputValue,\n                  datum: datum\n                });\n\n                txOutputs.add( // csl.TransactionOutput.new(StringToAddress(output.address), outputValue)\n                thisOutput);\n              });\n\n              for (i = 0; i < txOutputs.len(); i++) {\n                txBuilder.add_output(txOutputs.get(i));\n              }\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function _addOutputs(_x6) {\n      return _addOutputs2.apply(this, arguments);\n    }\n\n    return _addOutputs;\n  }();\n\n  _proto.build = /*#__PURE__*/function () {\n    var _build = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(_ref12) {\n      var _ref12$inputs, inputs, outputs, ttl, changeAddress, metadata, plutusScripts, _ref12$hasDatum, hasDatum, blockfrostApiKey, network, txBuilder, txInputsBuilder, datumAssetsList, _iterator7, _step7, output, transactionHex;\n\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _ref12$inputs = _ref12.inputs, inputs = _ref12$inputs === void 0 ? [] : _ref12$inputs, outputs = _ref12.outputs, ttl = _ref12.ttl, changeAddress = _ref12.changeAddress, metadata = _ref12.metadata, plutusScripts = _ref12.plutusScripts, _ref12$hasDatum = _ref12.hasDatum, hasDatum = _ref12$hasDatum === void 0 ? false : _ref12$hasDatum, blockfrostApiKey = _ref12.blockfrostApiKey, network = _ref12.network;\n              // start: init\n              this._blockfrost = new Blockfrost();\n              _context9.next = 4;\n              return this._blockfrost.init({\n                blockfrostApiKey: blockfrostApiKey,\n                network: network\n              });\n\n            case 4:\n              _context9.t0 = csl.TransactionBuilder;\n              _context9.next = 7;\n              return this._getTxBuilderConfig();\n\n            case 7:\n              _context9.t1 = _context9.sent;\n              txBuilder = _context9.t0[\"new\"].call(_context9.t0, _context9.t1);\n\n              // end: init\n              if (ttl) {\n                txBuilder.set_ttl(ttl);\n              } // add inputs\n\n\n              _context9.next = 12;\n              return this._addInputUtxo({\n                inputs: inputs,\n                outputs: outputs\n              });\n\n            case 12:\n              txInputsBuilder = _context9.sent;\n              // if datum\n              datumAssetsList = null;\n\n              if (hasDatum) {\n                datumAssetsList = [];\n\n                for (_iterator7 = _createForOfIteratorHelperLoose(outputs); !(_step7 = _iterator7()).done;) {\n                  output = _step7.value;\n                  datumAssetsList = [].concat(Object.keys(output.assets));\n                  datumAssetsList = datumAssetsList.filter(function (el) {\n                    return el != 'lovelace';\n                  });\n                }\n\n                console.log('datumAssetsList', datumAssetsList); // [\"ds8dh9s8dhs.Pixel\"]\n              } // add outputs\n\n\n              _context9.t2 = this;\n              _context9.t3 = txBuilder;\n              _context9.t4 = outputs;\n              _context9.next = 20;\n              return this.wallet.getWalletAddress();\n\n            case 20:\n              _context9.t5 = _context9.sent;\n              _context9.t6 = datumAssetsList;\n              _context9.t7 = {\n                txBuilder: _context9.t3,\n                outputs: _context9.t4,\n                ownerAddressBech32: _context9.t5,\n                datumAssetsList: _context9.t6\n              };\n              _context9.next = 25;\n              return _context9.t2._addOutputs.call(_context9.t2, _context9.t7);\n\n            case 25:\n\n\n              if (!metadata) {\n                _context9.next = 29;\n                break;\n              }\n\n              _context9.next = 29;\n              return this._addMetadata({\n                txBuilder: txBuilder,\n                metadata: metadata\n              });\n\n            case 29:\n              if (!plutusScripts) {\n                _context9.next = 32;\n                break;\n              }\n\n              _context9.next = 32;\n              return this._addPlutus({});\n\n            case 32:\n              txBuilder.set_inputs(txInputsBuilder); // add change\n\n              _context9.next = 35;\n              return this._addChange({\n                txBuilder: txBuilder,\n                changeAddress: changeAddress\n              });\n\n            case 35:\n              _context9.next = 37;\n              return this._buildTransaction({\n                txBuilder: txBuilder\n              });\n\n            case 37:\n              transactionHex = _context9.sent;\n              return _context9.abrupt(\"return\", transactionHex);\n\n            case 39:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function build(_x8) {\n      return _build.apply(this, arguments);\n    }\n\n    return build;\n  }()\n  /**\r\n   * for smart contract\r\n   * this is for devt only, will need to refactor everything eventually\r\n   */\n  ;\n\n  _proto.finalizeTx =\n  /*#__PURE__*/\n  function () {\n    var _finalizeTx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(_ref13) {\n      var txBuilder, changeAddress;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              txBuilder = _ref13.txBuilder, changeAddress = _ref13.changeAddress;\n              console.log(txBuilder, changeAddress);\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    function finalizeTx(_x9) {\n      return _finalizeTx.apply(this, arguments);\n    }\n\n    return finalizeTx;\n  }();\n\n  _proto.createDatum = function createDatum(_ref14) {\n    var ownerAddressBech32 = _ref14.ownerAddressBech32,\n        assets = _ref14.assets;\n    var fields = csl.PlutusList[\"new\"]();\n\n    for (var _iterator8 = _createForOfIteratorHelperLoose(assets), _step8; !(_step8 = _iterator8()).done;) {\n      var asset = _step8.value;\n      var assetDetails = csl.PlutusList[\"new\"]();\n\n      var _asset$split = asset.split('.'),\n          policy = _asset$split[0],\n          assetName = _asset$split[1];\n\n      assetDetails.add(csl.PlutusData.new_bytes(fromHex(policy)));\n      assetDetails.add(csl.PlutusData.new_bytes(fromHex(toHex(assetName))));\n      fields.add(csl.PlutusData.new_constr_plutus_data(csl.ConstrPlutusData[\"new\"](csl.BigNum.from_str('0'), assetDetails)));\n    }\n\n    var owner = getAddressKeyHashHex(ownerAddressBech32);\n\n    if (owner) {\n      fields.add(csl.PlutusData.new_bytes(fromHex(owner)));\n    }\n\n    var datum = csl.PlutusData.new_constr_plutus_data(csl.ConstrPlutusData[\"new\"](csl.BigNum.from_str('0'), fields));\n    return datum;\n  };\n\n  _proto._addInputUtxoSC = /*#__PURE__*/function () {\n    var _addInputUtxoSC2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(_ref15) {\n      var _this3 = this;\n\n      var scriptAddress, asset, utxosFromBF, utxos, txInputsBuilder;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              scriptAddress = _ref15.scriptAddress, asset = _ref15.asset;\n              _context11.next = 3;\n              return this._blockfrost.addressesAddressUtxosAsset({\n                address: scriptAddress,\n                asset: asset\n              });\n\n            case 3:\n              utxosFromBF = _context11.sent;\n              console.log('utxosFromBF', utxosFromBF);\n              utxos = utxosFromBF.filter(function (utxo) {\n                return utxo.data_hash !== null;\n              }).map(function (utxoBF) {\n                var txoutput = _this3.createTxUnspentOutput(StringToAddress(scriptAddress), utxoBF);\n\n                return txoutput;\n              });\n              txInputsBuilder = csl.TxInputsBuilder[\"new\"](); // utxos.forEach((utxo: any) => {\n              //   txInputsBuilder.add_input(\n              //     utxo.output().address(),\n              //     utxo.input(),\n              //     utxo.output().amount()\n              //   );\n              // });\n\n              txInputsBuilder.add_input(utxos[0].output().address(), utxos[0].input(), utxos[0].output().amount());\n              return _context11.abrupt(\"return\", {\n                txInputsBuilder: txInputsBuilder,\n                utxoselected: utxos[0]\n              });\n\n            case 9:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function _addInputUtxoSC(_x10) {\n      return _addInputUtxoSC2.apply(this, arguments);\n    }\n\n    return _addInputUtxoSC;\n  }() // this is for devt only, will need to refactor everything eventually\n  ;\n\n  _proto.buildSC =\n  /*#__PURE__*/\n  function () {\n    var _buildSC = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(_ref16) {\n      var ownerAddress, scriptAddress, assets, blockfrostApiKey, network, txBuilder, datum, datumHash, outputs, asset, _asset$split2, policy, assetName, _yield$this$_addInput, txInputsBuilder, utxoselected, scriptWitness, transactionHex;\n\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              ownerAddress = _ref16.ownerAddress, scriptAddress = _ref16.scriptAddress, assets = _ref16.assets, blockfrostApiKey = _ref16.blockfrostApiKey, network = _ref16.network;\n              // start: init\n              this._blockfrost = new Blockfrost();\n              _context12.next = 4;\n              return this._blockfrost.init({\n                blockfrostApiKey: blockfrostApiKey,\n                network: network\n              });\n\n            case 4:\n              _context12.t0 = csl.TransactionBuilder;\n              _context12.next = 7;\n              return this._getTxBuilderConfig();\n\n            case 7:\n              _context12.t1 = _context12.sent;\n              txBuilder = _context12.t0[\"new\"].call(_context12.t0, _context12.t1);\n              // end: init\n              // prepare datum\n              datum = this.createDatum({\n                ownerAddressBech32: ownerAddress,\n                assets: assets\n              });\n              datumHash = plutusDataToHex(datum);\n              console.log('datumHash', datumHash); // outputs\n\n              outputs = [{\n                address: ownerAddress,\n                assets: {},\n                datum: datum\n              }];\n              asset = null;\n              assets.map(function (assetId) {\n                outputs[0].assets[assetId] = 1;\n                asset = assetId;\n              });\n              outputs[0].assets['lovelace'] = 3000000;\n              console.log(44, 'outputs', outputs);\n              _context12.next = 19;\n              return this._addOutputs({\n                txBuilder: txBuilder,\n                outputs: outputs\n              });\n\n            case 19:\n              // inputs\n              _asset$split2 = asset.split('.'), policy = _asset$split2[0], assetName = _asset$split2[1];\n              asset = \"\" + policy + toHex(assetName);\n              _context12.next = 23;\n              return this._addInputUtxoSC({\n                scriptAddress: scriptAddress,\n                asset: asset\n              });\n\n            case 23:\n              _yield$this$_addInput = _context12.sent;\n              txInputsBuilder = _yield$this$_addInput.txInputsBuilder;\n              utxoselected = _yield$this$_addInput.utxoselected;\n              console.log(22);\n              scriptWitness = this.getPlutusWitness(csl.PlutusScript[\"new\"](fromHex('4e4d01000033222220051200120011')), datum, this.unlock, utxoselected);\n              console.log(33);\n              txInputsBuilder.add_plutus_script_input(scriptWitness, utxoselected.input(), utxoselected.output().amount());\n              console.log(44);\n              txBuilder.set_inputs(txInputsBuilder);\n              console.log(44); // here to finalizeTx\n\n              txBuilder.calc_script_data_hash(csl.TxBuilderConstants.plutus_vasil_cost_models());\n              console.log(55);\n              _context12.next = 37;\n              return this._addChange({\n                txBuilder: txBuilder,\n                changeAddress: ownerAddress\n              });\n\n            case 37:\n              console.log(66);\n              _context12.next = 40;\n              return this._buildTransaction({\n                txBuilder: txBuilder\n              });\n\n            case 40:\n              transactionHex = _context12.sent;\n              console.log(77);\n              return _context12.abrupt(\"return\", transactionHex);\n\n            case 43:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function buildSC(_x11) {\n      return _buildSC.apply(this, arguments);\n    }\n\n    return buildSC;\n  }();\n\n  _proto.unlock = function unlock(index) {\n    var data = csl.PlutusData.new_constr_plutus_data(csl.ConstrPlutusData[\"new\"](csl.BigNum.from_str('0'), csl.PlutusList[\"new\"]()));\n    var redeemer = csl.Redeemer[\"new\"](csl.RedeemerTag.new_spend(), csl.BigNum.from_str(index), data, csl.ExUnits[\"new\"](csl.BigNum.from_str('7000000'), csl.BigNum.from_str('3000000000')));\n    return redeemer;\n  };\n\n  _proto.setCollateral = function setCollateral(txBuilder, utxos) {\n    var inputBuilder = csl.TxInputsBuilder[\"new\"]();\n    utxos.forEach(function (utxo) {\n      inputBuilder.add_input(utxo.output().address(), utxo.input(), utxo.output().amount());\n    });\n    txBuilder.set_collateral(inputBuilder);\n  };\n\n  _proto.getPlutusWitness = function getPlutusWitness(script, datum, redeemer, utxo) {\n    return csl.PlutusWitness[\"new\"](script, datum, redeemer(utxo.input().index().toString()));\n  };\n\n  _proto.getRequiredSigners = function getRequiredSigners(utxos, scriptInput, collateral) {\n    var inputs = [].concat(utxos, collateral);\n    var addresses = new Set();\n    inputs.forEach(function (utxo) {\n      addresses.add(utxo.output().address().to_bech32());\n    });\n    addresses[\"delete\"](scriptInput.output().address().to_bech32());\n    var requiredSigners = csl.Ed25519KeyHashes[\"new\"]();\n    addresses.forEach(function (address) {\n      var keyHash = getAddressKeyHash(address);\n\n      if (keyHash) {\n        requiredSigners.add(keyHash);\n      }\n    });\n    return requiredSigners;\n  };\n\n  _proto.getCollateral = /*#__PURE__*/function () {\n    var _getCollateral = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n      var collatUtxos, collateral, _iterator9, _step9, x, utxo;\n\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              collatUtxos = [];\n              _context13.next = 3;\n              return this.wallet.getCollateral();\n\n            case 3:\n              collateral = _context13.sent;\n\n              for (_iterator9 = _createForOfIteratorHelperLoose(collateral); !(_step9 = _iterator9()).done;) {\n                x = _step9.value;\n                utxo = csl.TransactionUnspentOutput.from_bytes(Buffer.from(x, 'hex'));\n                collatUtxos.push(utxo);\n              }\n\n              return _context13.abrupt(\"return\", collatUtxos);\n\n            case 6:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function getCollateral() {\n      return _getCollateral.apply(this, arguments);\n    }\n\n    return getCollateral;\n  }();\n\n  _proto.buildSCv2 = /*#__PURE__*/function () {\n    var _buildSCv = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_ref17) {\n      var ownerAddress, scriptAddress, blockfrostApiKey, network, txBuilder, scriptAddressObj, shelleyChangeAddress, assetName, assetNameHex, assetAmountToSend, assetPolicyIdHex, transactionIdLocked, lovelaceLocked, plutusScriptCborHex, transactionIndxLocked, manualFee, multiAsset, assets, scripts, txOutputBuilder, walletUtxos, utxos, transactionUnspentOutputs, txBody, collateral, inputs, datum, datumHash, datums, redeemers, data, redeemer, transactionWitnessSet, cost_model_vals, costModel, costModels, scriptDataHash, baseAddress, requiredSigners, transaction, transactionBytes, transactionHex;\n      return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              ownerAddress = _ref17.ownerAddress, scriptAddress = _ref17.scriptAddress, blockfrostApiKey = _ref17.blockfrostApiKey, network = _ref17.network;\n              // start: init\n              this._blockfrost = new Blockfrost();\n              _context14.next = 4;\n              return this._blockfrost.init({\n                blockfrostApiKey: blockfrostApiKey,\n                network: network\n              });\n\n            case 4:\n              _context14.t0 = csl.TransactionBuilder;\n              _context14.next = 7;\n              return this._getTxBuilderConfig();\n\n            case 7:\n              _context14.t1 = _context14.sent;\n              txBuilder = _context14.t0[\"new\"].call(_context14.t0, _context14.t1);\n              // end: init\n              scriptAddressObj = StringToAddress(scriptAddress);\n              shelleyChangeAddress = StringToAddress(ownerAddress);\n              assetName = 'SOCIETY';\n              assetNameHex = toHex(assetName);\n              assetAmountToSend = 1;\n              assetPolicyIdHex = 'f57f145fb8dd8373daff7cf55cea181669e99c4b73328531ebd4419a';\n              transactionIdLocked = '3c0fc4774e529432b2eaa654720231ad6c6d92ae2a4a7ab2544a93dcfa3c8561';\n              lovelaceLocked = 3000000;\n              plutusScriptCborHex = '4e4d01000033222220051200120011';\n              transactionIndxLocked = 0;\n              manualFee = 900000;\n              multiAsset = csl.MultiAsset[\"new\"]();\n              assets = csl.Assets[\"new\"]();\n              assets.insert(csl.AssetName[\"new\"](Buffer.from(assetNameHex, 'hex')), // Asset Name\n              csl.BigNum.from_str(assetAmountToSend.toString()) // How much to send\n              );\n              multiAsset.insert(csl.ScriptHash.from_bytes(Buffer.from(assetPolicyIdHex, 'hex')), // PolicyID\n              assets);\n              txBuilder.add_input(scriptAddressObj, csl.TransactionInput[\"new\"](csl.TransactionHash.from_bytes(Buffer.from(transactionIdLocked, 'hex')), transactionIndxLocked), csl.Value.new_from_assets(multiAsset)); // how much lovelace is at that UTXO\n\n              txBuilder.set_fee(csl.BigNum.from_str(Number(manualFee).toString()));\n              scripts = csl.PlutusScripts[\"new\"]();\n              scripts.add(csl.PlutusScript.from_bytes(Buffer.from(plutusScriptCborHex, 'hex'))); //from cbor of plutus script\n              // Add outputs\n\n              txOutputBuilder = csl.TransactionOutputBuilder[\"new\"]().with_address(shelleyChangeAddress).next().with_coin_and_asset(csl.BigNum.from_str(lovelaceLocked.toString()), multiAsset).build();\n              txBuilder.add_output(txOutputBuilder); // add utxos from user\n\n              _context14.next = 32;\n              return this.wallet.getUtxos();\n\n            case 32:\n              walletUtxos = _context14.sent;\n              utxos = walletUtxos.map(function (utxo) {\n                return csl.TransactionUnspentOutput.from_bytes(Buffer.from(utxo.cbor, 'hex'));\n              });\n              transactionUnspentOutputs = csl.TransactionUnspentOutputs[\"new\"]();\n              utxos.forEach(function (utxo) {\n                transactionUnspentOutputs.add(utxo);\n              });\n              txBuilder.add_inputs_from(transactionUnspentOutputs, csl.CoinSelectionStrategyCIP2.LargestFirstMultiAsset); //txBuilder.add_change_if_needed(shelleyChangeAddress);\n              // once the transaction is ready, we build it to get the tx body without witnesses\n\n              txBody = txBuilder.build();\n              _context14.next = 40;\n              return this.getCollateral();\n\n            case 40:\n              collateral = _context14.sent;\n              inputs = csl.TransactionInputs[\"new\"]();\n              collateral.forEach(function (utxo) {\n                inputs.add(utxo.input());\n              }); // make datum\n\n              datum = this.createDatum({\n                ownerAddressBech32: ownerAddress,\n                assets: [assetPolicyIdHex + \".\" + assetName]\n              });\n              datumHash = plutusDataToHex(datum);\n              console.log('datumHash', datumHash);\n              datums = csl.PlutusList[\"new\"](); // datums.add(PlutusData.from_bytes(Buffer.from(this.state.datumStr, \"utf8\")))\n\n              datums.add(datum);\n              redeemers = csl.Redeemers[\"new\"]();\n              data = csl.PlutusData.new_constr_plutus_data(csl.ConstrPlutusData[\"new\"](csl.BigNum.from_str('0'), csl.PlutusList[\"new\"]()));\n              redeemer = csl.Redeemer[\"new\"](csl.RedeemerTag.new_spend(), csl.BigNum.from_str('0'), data, csl.ExUnits[\"new\"](csl.BigNum.from_str('7000000'), csl.BigNum.from_str('3000000000')));\n              redeemers.add(redeemer); // Tx witness\n\n              transactionWitnessSet = csl.TransactionWitnessSet[\"new\"]();\n              transactionWitnessSet.set_plutus_scripts(scripts);\n              transactionWitnessSet.set_plutus_data(datums);\n              transactionWitnessSet.set_redeemers(redeemers); // Pre Vasil hard fork cost model\n              // const cost_model_vals = [197209, 0, 1, 1, 396231, 621, 0, 1, 150000, 1000, 0, 1, 150000, 32, 2477736, 29175, 4, 29773, 100, 29773, 100, 29773, 100, 29773, 100, 29773, 100, 29773, 100, 100, 100, 29773, 100, 150000, 32, 150000, 32, 150000, 32, 150000, 1000, 0, 1, 150000, 32, 150000, 1000, 0, 8, 148000, 425507, 118, 0, 1, 1, 150000, 1000, 0, 8, 150000, 112536, 247, 1, 150000, 10000, 1, 136542, 1326, 1, 1000, 150000, 1000, 1, 150000, 32, 150000, 32, 150000, 32, 1, 1, 150000, 1, 150000, 4, 103599, 248, 1, 103599, 248, 1, 145276, 1366, 1, 179690, 497, 1, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 148000, 425507, 118, 0, 1, 1, 61516, 11218, 0, 1, 150000, 32, 148000, 425507, 118, 0, 1, 1, 148000, 425507, 118, 0, 1, 1, 2477736, 29175, 4, 0, 82363, 4, 150000, 5000, 0, 1, 150000, 32, 197209, 0, 1, 1, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 3345831, 1, 1];\n\n              /*\r\n                  Post Vasil hard fork cost model\r\n                  If you need to make this code work on the Mainnnet, before Vasil hard-fork\r\n                  Then you need to comment this section below and uncomment the cost model above\r\n                  Otherwise it will give errors when redeeming from Scripts\r\n                  Sending assets and ada to Script addresses is unaffected by this cost model\r\n                   */\n\n              cost_model_vals = [205665, 812, 1, 1, 1000, 571, 0, 1, 1000, 24177, 4, 1, 1000, 32, 117366, 10475, 4, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 100, 100, 23000, 100, 19537, 32, 175354, 32, 46417, 4, 221973, 511, 0, 1, 89141, 32, 497525, 14068, 4, 2, 196500, 453240, 220, 0, 1, 1, 1000, 28662, 4, 2, 245000, 216773, 62, 1, 1060367, 12586, 1, 208512, 421, 1, 187000, 1000, 52998, 1, 80436, 32, 43249, 32, 1000, 32, 80556, 1, 57667, 4, 1000, 10, 197145, 156, 1, 197145, 156, 1, 204924, 473, 1, 208896, 511, 1, 52467, 32, 64832, 32, 65493, 32, 22558, 32, 16563, 32, 76511, 32, 196500, 453240, 220, 0, 1, 1, 69522, 11687, 0, 1, 60091, 32, 196500, 453240, 220, 0, 1, 1, 196500, 453240, 220, 0, 1, 1, 806990, 30482, 4, 1927926, 82523, 4, 265318, 0, 4, 0, 85931, 32, 205665, 812, 1, 1, 41182, 32, 212342, 32, 31220, 32, 32696, 32, 43357, 32, 32247, 32, 38314, 32, 9462713, 1021, 10];\n              costModel = csl.CostModel[\"new\"]();\n              cost_model_vals.forEach(function (x, i) {\n                return costModel.set(i, csl.Int.new_i32(x));\n              });\n              costModels = csl.Costmdls[\"new\"]();\n              costModels.insert(csl.Language.new_plutus_v1(), costModel);\n              scriptDataHash = csl.hash_script_data(redeemers, costModels, datums);\n              txBody.set_script_data_hash(scriptDataHash);\n              txBody.set_collateral(inputs);\n              baseAddress = csl.BaseAddress.from_address(shelleyChangeAddress);\n              requiredSigners = csl.Ed25519KeyHashes[\"new\"]();\n              requiredSigners.add(baseAddress == null ? void 0 : baseAddress.payment_cred().to_keyhash());\n              txBody.set_required_signers(requiredSigners);\n              transaction = csl.Transaction[\"new\"](txBody, csl.TransactionWitnessSet.from_bytes(transactionWitnessSet.to_bytes()));\n              transactionBytes = transaction.to_bytes();\n              transactionHex = toHex(transactionBytes);\n              return _context14.abrupt(\"return\", transactionHex);\n\n            case 72:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function buildSCv2(_x12) {\n      return _buildSCv.apply(this, arguments);\n    }\n\n    return buildSCv2;\n  }();\n\n  _proto._getAssetUtxo = /*#__PURE__*/function () {\n    var _getAssetUtxo2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(_ref18) {\n      var _this4 = this;\n\n      var scriptAddress, asset, utxosFromBF, utxos;\n      return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              scriptAddress = _ref18.scriptAddress, asset = _ref18.asset;\n              _context15.next = 3;\n              return this._blockfrost.addressesAddressUtxosAsset({\n                address: scriptAddress,\n                asset: asset\n              });\n\n            case 3:\n              utxosFromBF = _context15.sent;\n              console.log('utxosFromBF', utxosFromBF);\n              utxos = utxosFromBF.filter(function (utxo) {\n                // return utxo.data_hash !== null;\n                return utxo.data_hash == \"287bb96b1b2b86658cae7a5a2c10a8e6663f710a7e0aa9df7b439891be6ede8c\";\n              }).map(function (utxoBF) {\n                var txoutput = _this4.createTxUnspentOutput(StringToAddress(scriptAddress), utxoBF);\n\n                console.log('txoutput', txoutput);\n                return txoutput;\n              });\n              return _context15.abrupt(\"return\", utxos[0]);\n\n            case 7:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function _getAssetUtxo(_x13) {\n      return _getAssetUtxo2.apply(this, arguments);\n    }\n\n    return _getAssetUtxo;\n  }();\n\n  _proto.buildSCv3 = /*#__PURE__*/function () {\n    var _buildSCv2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(_ref19) {\n      var _assets2;\n\n      var ownerAddress, scriptAddress, blockfrostApiKey, network, txBuilder, assetName, assetNameHex, assetPolicyIdHex, assetUtxo, walletUtxos, utxos, transactionUnspentOutputs, inputs, outputs, plutusScripts, datum, datumHash, datums, txInputsBuilder, plutusWitness, collateral, requiredSigners, _transactionUnspentOutputs, tx, txVkeyWitnessesHex, txVkeyWitnesses, transactionWitnessSet, signedTx, txHex, txHash;\n\n      return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              ownerAddress = _ref19.ownerAddress, scriptAddress = _ref19.scriptAddress, blockfrostApiKey = _ref19.blockfrostApiKey, network = _ref19.network;\n              // start: init\n              this._blockfrost = new Blockfrost();\n              _context16.next = 4;\n              return this._blockfrost.init({\n                blockfrostApiKey: blockfrostApiKey,\n                network: network\n              });\n\n            case 4:\n              _context16.t0 = csl.TransactionBuilder;\n              _context16.next = 7;\n              return this._getTxBuilderConfig();\n\n            case 7:\n              _context16.t1 = _context16.sent;\n              txBuilder = _context16.t0[\"new\"].call(_context16.t0, _context16.t1);\n              assetName = 'SOCIETY';\n              assetNameHex = toHex(assetName);\n              assetPolicyIdHex = 'f57f145fb8dd8373daff7cf55cea181669e99c4b73328531ebd4419a'; // let transactionIdLocked =\n              //   '3c0fc4774e529432b2eaa654720231ad6c6d92ae2a4a7ab2544a93dcfa3c8561';\n\n              _context16.next = 14;\n              return this._getAssetUtxo({\n                scriptAddress: scriptAddress,\n                asset: \"\" + assetPolicyIdHex + assetNameHex\n              });\n\n            case 14:\n              assetUtxo = _context16.sent;\n              _context16.next = 17;\n              return this.wallet.getUtxos();\n\n            case 17:\n              walletUtxos = _context16.sent;\n              utxos = walletUtxos.map(function (utxo) {\n                return csl.TransactionUnspentOutput.from_bytes(Buffer.from(utxo.cbor, 'hex'));\n              });\n              transactionUnspentOutputs = csl.TransactionUnspentOutputs[\"new\"]();\n              utxos.forEach(function (utxo) {\n                transactionUnspentOutputs.add(utxo);\n              });\n              inputs = [].concat(utxos);\n\n              if (assetUtxo) {\n                inputs.push(assetUtxo);\n              } ////\n\n\n              outputs = [{\n                address: ownerAddress,\n                assets: (_assets2 = {}, _assets2[assetPolicyIdHex + \".\" + assetName] = 1, _assets2.lovelace = 3000000, _assets2)\n              }];\n\n              this._addOutputs({\n                txBuilder: txBuilder,\n                outputs: outputs,\n                ownerAddressBech32: ownerAddress\n              }); ////\n\n\n              plutusScripts = csl.PlutusScripts[\"new\"]();\n              plutusScripts.add(csl.PlutusScript.from_bytes(Buffer.from('4e4d01000033222220051200120011', 'hex'))); // make datum\n\n              datum = this.createDatum({\n                ownerAddressBech32: ownerAddress,\n                assets: [assetPolicyIdHex + \".\" + assetName]\n              });\n              datumHash = plutusDataToHex(datum);\n              console.log('datumHash', datumHash);\n              datums = csl.PlutusList[\"new\"]();\n              datums.add(datum);\n\n              if (!plutusScripts) {\n                _context16.next = 43;\n                break;\n              }\n\n              txInputsBuilder = csl.TxInputsBuilder[\"new\"]();\n              plutusWitness = this.getPlutusWitness(plutusScripts.get(0), datums.get(0), this.unlock, assetUtxo);\n              txInputsBuilder.add_plutus_script_input(plutusWitness, assetUtxo.input(), assetUtxo.output().amount());\n              _context16.next = 38;\n              return this.wallet.getCollateral();\n\n            case 38:\n              collateral = _context16.sent.map(function (utxo) {\n                return csl.TransactionUnspentOutput.from_bytes(fromHex(utxo));\n              }).slice(0, 1);\n              this.setCollateral(txBuilder, collateral);\n              requiredSigners = this.getRequiredSigners(inputs, assetUtxo, collateral);\n              txInputsBuilder.add_required_signers(requiredSigners);\n              txBuilder.set_inputs(txInputsBuilder);\n\n            case 43:\n              txBuilder.calc_script_data_hash(csl.TxBuilderConstants.plutus_vasil_cost_models());\n              _context16.prev = 44;\n              _transactionUnspentOutputs = csl.TransactionUnspentOutputs[\"new\"]();\n              inputs.forEach(function (utxo) {\n                _transactionUnspentOutputs.add(utxo);\n              });\n              txBuilder.add_inputs_from(_transactionUnspentOutputs, csl.CoinSelectionStrategyCIP2.LargestFirstMultiAsset);\n              txBuilder.add_change_if_needed(StringToAddress(ownerAddress));\n              _context16.next = 54;\n              break;\n\n            case 51:\n              _context16.prev = 51;\n              _context16.t2 = _context16[\"catch\"](44);\n              throw new Error(\"INPUTS_EXHAUSTED\");\n\n            case 54:\n              tx = txBuilder.build_tx();\n              _context16.next = 57;\n              return this.wallet.signTx({\n                tx: toHex(tx.to_bytes()),\n                partialSign: true\n              });\n\n            case 57:\n              txVkeyWitnessesHex = _context16.sent;\n              txVkeyWitnesses = csl.TransactionWitnessSet.from_bytes(fromHex(txVkeyWitnessesHex));\n              transactionWitnessSet = csl.TransactionWitnessSet.from_bytes(tx.witness_set().to_bytes());\n              transactionWitnessSet.set_vkeys(txVkeyWitnesses == null ? void 0 : txVkeyWitnesses.vkeys());\n              signedTx = csl.Transaction[\"new\"](tx.body(), transactionWitnessSet, tx.auxiliary_data());\n              txHex = toHex(signedTx.to_bytes());\n              _context16.next = 65;\n              return this.wallet.submitTx({\n                tx: txHex\n              });\n\n            case 65:\n              txHash = _context16.sent;\n              console.log('txHash', txHash);\n              return _context16.abrupt(\"return\", txHash);\n\n            case 68:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this, [[44, 51]]);\n    }));\n\n    function buildSCv3(_x14) {\n      return _buildSCv2.apply(this, arguments);\n    }\n\n    return buildSCv3;\n  }();\n\n  return Transaction;\n}();\n\nvar Axios = function Axios(_ref2) {\n  var _this = this;\n\n  var baseURL = _ref2.baseURL,\n      _ref2$headers = _ref2.headers,\n      headers = _ref2$headers === void 0 ? {} : _ref2$headers;\n\n  this._createAxiosInstance = function (_ref3) {\n    var baseURL = _ref3.baseURL,\n        headers = _ref3.headers;\n    return axios__WEBPACK_IMPORTED_MODULE_1__.create({\n      baseURL: baseURL,\n      headers: headers\n    });\n  };\n\n  this.post = function (_ref4) {\n    var endpoint = _ref4.endpoint,\n        data = _ref4.data,\n        _ref4$headers = _ref4.headers,\n        headers = _ref4$headers === void 0 ? {} : _ref4$headers;\n    return _this._instance.post(endpoint, data, {\n      headers: headers\n    });\n  };\n\n  this.get = function (_ref5) {\n    var endpoint = _ref5.endpoint;\n    return _this._instance.get(endpoint);\n  };\n\n  this._instance = this._createAxiosInstance({\n    baseURL: baseURL,\n    headers: headers\n  });\n};\n\nvar Infura = /*#__PURE__*/function () {\n  function Infura() {}\n\n  var _proto = Infura.prototype;\n\n  _proto.init = /*#__PURE__*/function () {\n    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n      var projectId, projectSecret, ipfsApiEndpoint, headers;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              projectId = _ref.projectId, projectSecret = _ref.projectSecret, ipfsApiEndpoint = _ref.ipfsApiEndpoint;\n              headers = {\n                auth: projectId + \":\" + projectSecret\n              };\n              this._instance = new Axios({\n                baseURL: ipfsApiEndpoint != null ? ipfsApiEndpoint : 'https://ipfs.infura.io:5001/api/v0',\n                headers: headers\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function init(_x) {\n      return _init.apply(this, arguments);\n    }\n\n    return init;\n  }()\n  /**\r\n   * Add a file or directory to IPFS.\r\n   * https://docs.infura.io/infura/networks/ipfs/http-api-methods/add\r\n   * @returns\r\n   */\n  ;\n\n  _proto.addFileIpfs =\n  /*#__PURE__*/\n  function () {\n    var _addFileIpfs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n      var formData;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              formData = _ref2.formData;\n              _context2.next = 3;\n              return this._instance.post({\n                endpoint: '/add?',\n                data: formData,\n                headers: {\n                  'Content-Type': 'multipart/form-data'\n                }\n              }).then(function (_ref3) {\n                var data = _ref3.data;\n                return data;\n              })[\"catch\"](function (error) {\n                throw error;\n              });\n\n            case 3:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function addFileIpfs(_x2) {\n      return _addFileIpfs.apply(this, arguments);\n    }\n\n    return addFileIpfs;\n  }();\n\n  return Infura;\n}();\n\nvar DEFAULT_PROTOCOL_PARAMETERS = {\n  coinsPerUTxOSize: '4310',\n  priceMem: 0.0577,\n  priceStep: 0.0000721,\n  minFeeA: 44,\n  minFeeB: 155381,\n  keyDeposit: '2000000',\n  maxTxSize: 16384,\n  maxValSize: '5000',\n  poolDeposit: '500000000'\n};\nvar POLICY_ID_LENGTH = 56;\n\nvar Trackable = function Trackable(constructor) {\n  return /*#__PURE__*/function (_constructor) {\n    _inheritsLoose(_class, _constructor);\n\n    function _class() {\n      var _this;\n\n      _this = _constructor.apply(this, arguments) || this;\n      _this.__visits = [];\n      return _this;\n    }\n\n    return _class;\n  }(constructor);\n};\nvar Checkpoint = function Checkpoint() {\n  return function (_target, propertyKey, descriptor) {\n    var method = descriptor.value;\n\n    descriptor.value = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var result = method.call.apply(method, [this].concat(args));\n      if (this.__visits) this.__visits.push(propertyKey);\n      return result;\n    };\n  };\n};\n\nvar deserializeAddress = function deserializeAddress(address) {\n  return csl.Address.from_bytes(toBytes(address));\n};\nvar deserializeDataHash = function deserializeDataHash(dataHash) {\n  return csl.DataHash.from_bytes(toBytes(dataHash));\n};\nvar deserializePlutusData = function deserializePlutusData(plutusData) {\n  return csl.PlutusData.from_bytes(toBytes(plutusData));\n};\nvar deserializeScriptRef = function deserializeScriptRef(scriptRef) {\n  return csl.ScriptRef.from_bytes(toBytes(scriptRef));\n};\nvar deserializeScriptHash = function deserializeScriptHash(scriptHash) {\n  return csl.ScriptHash.from_bytes(toBytes(scriptHash));\n};\nvar deserializeTx = function deserializeTx(tx) {\n  return csl.Transaction.from_bytes(toBytes(tx));\n};\nvar deserializeTxHash = function deserializeTxHash(txHash) {\n  return csl.TransactionHash.from_bytes(toBytes(txHash));\n};\nvar deserializeTxUnspentOutput = function deserializeTxUnspentOutput(txUnspentOutput) {\n  return csl.TransactionUnspentOutput.from_bytes(toBytes(txUnspentOutput));\n};\nvar deserializeTxWitnessSet = function deserializeTxWitnessSet(txWitnessSet) {\n  return csl.TransactionWitnessSet.from_bytes(toBytes(txWitnessSet));\n};\nvar deserializeValue = function deserializeValue(value) {\n  return csl.Value.from_bytes(toBytes(value));\n};\n\n/* -----------------[ ASCII ]----------------- */\n\nvar toASCII = function toASCII(hex) {\n  return Buffer.from(hex, 'hex').toString('ascii');\n};\n/* -----------------[ Address ]----------------- */\n\nvar toAddress = function toAddress(bech32) {\n  return csl.Address.from_bech32(bech32);\n};\n/* -----------------[ Bytes ]----------------- */\n\nvar fromBytes = function fromBytes(bytes) {\n  return Buffer.from(bytes).toString('hex');\n};\nvar toBytes = function toBytes(hex) {\n  return Buffer.from(hex, 'hex');\n};\n/* -----------------[ TransactionUnspentOutput ]----------------- */\n\nvar fromTxUnspentOutput = function fromTxUnspentOutput(txUnspentOutput) {\n  var _txUnspentOutput$outp, _txUnspentOutput$outp2, _txUnspentOutput$outp3;\n\n  var dataHash = txUnspentOutput.output().has_data_hash() ? fromBytes((_txUnspentOutput$outp = txUnspentOutput.output().data_hash()) == null ? void 0 : _txUnspentOutput$outp.to_bytes()) : undefined;\n  var plutusData = txUnspentOutput.output().has_plutus_data() ? fromBytes((_txUnspentOutput$outp2 = txUnspentOutput.output().plutus_data()) == null ? void 0 : _txUnspentOutput$outp2.to_bytes()) : undefined;\n  var scriptRef = txUnspentOutput.output().has_script_ref() ? fromBytes((_txUnspentOutput$outp3 = txUnspentOutput.output().script_ref()) == null ? void 0 : _txUnspentOutput$outp3.to_bytes()) : undefined;\n  return {\n    input: {\n      outputIndex: txUnspentOutput.input().index(),\n      txHash: fromBytes(txUnspentOutput.input().transaction_id().to_bytes())\n    },\n    output: {\n      address: txUnspentOutput.output().address().to_bech32(),\n      amount: fromValue(txUnspentOutput.output().amount()),\n      dataHash: dataHash,\n      plutusData: plutusData,\n      scriptRef: scriptRef\n    }\n  };\n};\nvar toTxUnspentOutput = function toTxUnspentOutput(utxo) {\n  var txInput = csl.TransactionInput[\"new\"](deserializeTxHash(utxo.input.txHash), utxo.input.outputIndex);\n  var txOutput = csl.TransactionOutput[\"new\"](toAddress(utxo.output.address), toValue(utxo.output.amount));\n\n  if (utxo.output.dataHash !== undefined) {\n    txOutput.set_data_hash(deserializeDataHash(utxo.output.dataHash));\n  }\n\n  if (utxo.output.plutusData !== undefined) {\n    txOutput.set_plutus_data(deserializePlutusData(utxo.output.plutusData));\n  }\n\n  if (utxo.output.scriptRef !== undefined) {\n    txOutput.set_script_ref(deserializeScriptRef(utxo.output.scriptRef));\n  }\n\n  return csl.TransactionUnspentOutput[\"new\"](txInput, txOutput);\n};\n/* -----------------[ UnitInterval ]----------------- */\n\nvar toUnitInterval = function toUnitInterval(_float) {\n  var decimal = _float.split('.')[1];\n\n  var numerator = \"\" + parseInt(decimal, 10);\n  var denominator = '1' + '0'.repeat(decimal.length);\n  return csl.UnitInterval[\"new\"](csl.BigNum.from_str(numerator), csl.BigNum.from_str(denominator));\n};\n/* -----------------[ Value ]----------------- */\n\nvar fromValue = function fromValue(value) {\n  var assets = [{\n    unit: 'lovelace',\n    quantity: value.coin().to_str()\n  }];\n  var multiasset = value.multiasset();\n\n  if (multiasset !== undefined) {\n    var policies = multiasset.keys();\n\n    for (var i = 0; i < policies.len(); i += 1) {\n      var policyId = policies.get(i);\n      var policyAssets = multiasset.get(policyId);\n\n      if (policyAssets !== undefined) {\n        var policyAssetNames = policyAssets.keys();\n\n        for (var j = 0; j < policyAssetNames.len(); j += 1) {\n          var _policyAssets$get;\n\n          var assetName = policyAssetNames.get(j);\n          var quantity = (_policyAssets$get = policyAssets.get(assetName)) != null ? _policyAssets$get : csl.BigNum.from_str('0');\n          var assetId = fromBytes(policyId.to_bytes()) + fromBytes(assetName.name());\n          assets.push({\n            unit: assetId,\n            quantity: quantity.to_str()\n          });\n        }\n      }\n    }\n  }\n\n  return assets;\n};\nvar toValue = function toValue(assets) {\n  var lovelace = assets.find(function (asset) {\n    return asset.unit === 'lovelace';\n  });\n  var policies = Array.from(new Set(assets.filter(function (asset) {\n    return asset.unit !== 'lovelace';\n  }).map(function (asset) {\n    return asset.unit.slice(0, POLICY_ID_LENGTH);\n  })));\n  var multiAsset = csl.MultiAsset[\"new\"]();\n  policies.forEach(function (policyId) {\n    var policyAssets = csl.Assets[\"new\"]();\n    assets.filter(function (asset) {\n      return asset.unit.slice(0, POLICY_ID_LENGTH) === policyId;\n    }).forEach(function (asset) {\n      policyAssets.insert(csl.AssetName[\"new\"](toBytes(asset.unit.slice(POLICY_ID_LENGTH))), csl.BigNum.from_str(asset.quantity));\n    });\n    multiAsset.insert(deserializeScriptHash(policyId), policyAssets);\n  });\n  var value = csl.Value[\"new\"](csl.BigNum.from_str(lovelace ? lovelace.quantity : '0'));\n\n  if (assets.length > 1 || !lovelace) {\n    value.set_multiasset(multiAsset);\n  }\n\n  return value;\n};\n\nvar resolveFingerprint = function resolveFingerprint(policyId, assetName) {\n  return \"\" + policyId + assetName; // TODO: CIP 14 - User-Facing Asset Fingerprint\n};\n\nvar TransactionService_1;\n\nvar TransactionService = TransactionService_1 = /*#__PURE__*/function () {\n  function TransactionService(_walletService, parameters) {\n    this._walletService = _walletService;\n    this._txBuilder = TransactionService_1.createTxBuilder(parameters);\n  }\n\n  var _proto = TransactionService.prototype;\n\n  _proto.build = /*#__PURE__*/function () {\n    var _build = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return this.addTxInputsIfNeeded();\n\n            case 3:\n              _context.next = 5;\n              return this.addChangeAddressIfNeeded();\n\n            case 5:\n              return _context.abrupt(\"return\", fromBytes(this._txBuilder.build_tx().to_bytes()));\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              throw _context.t0;\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 8]]);\n    }));\n\n    function build() {\n      return _build.apply(this, arguments);\n    }\n\n    return build;\n  }();\n\n  _proto.sendLovelace = function sendLovelace(address, lovelace) {\n    var txOutput = csl.TransactionOutputBuilder[\"new\"]().with_address(toAddress(address)).next().with_coin(csl.BigNum.from_str(lovelace)).build();\n\n    this._txBuilder.add_output(txOutput);\n\n    return this;\n  };\n\n  _proto.sendAssets = function sendAssets(address, assets, coinsPerByte) {\n    if (coinsPerByte === void 0) {\n      coinsPerByte = DEFAULT_PROTOCOL_PARAMETERS.coinsPerUTxOSize;\n    }\n\n    var amount = toValue(assets);\n    var multiasset = amount.multiasset();\n\n    if (amount.is_zero() || multiasset === undefined) {\n      return this;\n    }\n\n    var txOutput = csl.TransactionOutputBuilder[\"new\"]().with_address(toAddress(address)).next().with_asset_and_min_required_coin_by_utxo_cost(multiasset, csl.DataCost.new_coins_per_byte(csl.BigNum.from_str(coinsPerByte))).build();\n\n    this._txBuilder.add_output(txOutput);\n\n    return this;\n  };\n\n  _proto.setChangeAddress = function setChangeAddress(address) {\n    this._txBuilder.add_change_if_needed(toAddress(address));\n\n    return this;\n  };\n\n  _proto.setMetadata = function setMetadata(key, value) {\n    this._txBuilder.add_json_metadatum_with_schema(csl.BigNum.from_str(key.toString()), JSON.stringify(value), csl.MetadataJsonSchema.DetailedSchema);\n\n    return this;\n  };\n\n  _proto.setTimeToLive = function setTimeToLive(slot) {\n    this._txBuilder.set_ttl_bignum(csl.BigNum.from_str(slot));\n\n    return this;\n  };\n\n  _proto.setTxInputs = function setTxInputs(inputs) {\n    var txInputsBuilder = csl.TxInputsBuilder[\"new\"]();\n    inputs.map(function (input) {\n      return toTxUnspentOutput(input);\n    }).forEach(function (utxo) {\n      txInputsBuilder.add_input(utxo.output().address(), utxo.input(), utxo.output().amount());\n    });\n\n    this._txBuilder.set_inputs(txInputsBuilder);\n\n    return this;\n  };\n\n  TransactionService.createTxBuilder = function createTxBuilder(parameters) {\n    if (parameters === void 0) {\n      parameters = DEFAULT_PROTOCOL_PARAMETERS;\n    }\n\n    var txBuilderConfig = csl.TransactionBuilderConfigBuilder[\"new\"]().coins_per_utxo_byte(csl.BigNum.from_str(parameters.coinsPerUTxOSize)).ex_unit_prices(csl.ExUnitPrices[\"new\"](toUnitInterval(parameters.priceMem.toString()), toUnitInterval(parameters.priceStep.toString()))).fee_algo(csl.LinearFee[\"new\"](csl.BigNum.from_str(parameters.minFeeA.toString()), csl.BigNum.from_str(parameters.minFeeB.toString()))).key_deposit(csl.BigNum.from_str(parameters.keyDeposit)).max_tx_size(parameters.maxTxSize).max_value_size(parseInt(parameters.maxValSize)).pool_deposit(csl.BigNum.from_str(parameters.poolDeposit)).build();\n    return csl.TransactionBuilder[\"new\"](txBuilderConfig);\n  };\n\n  _proto.addChangeAddressIfNeeded = /*#__PURE__*/function () {\n    var _addChangeAddressIfNeeded = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var changeAddress;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.notReached('setChangeAddress')) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 3;\n              return this._walletService.getChangeAddress();\n\n            case 3:\n              changeAddress = _context2.sent;\n\n              this._txBuilder.add_change_if_needed(toAddress(changeAddress));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function addChangeAddressIfNeeded() {\n      return _addChangeAddressIfNeeded.apply(this, arguments);\n    }\n\n    return addChangeAddressIfNeeded;\n  }();\n\n  _proto.addTxInputsIfNeeded = /*#__PURE__*/function () {\n    var _addTxInputsIfNeeded = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var walletUtxos, coinSelectionStrategy;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!this.notReached('setTxInputs')) {\n                _context3.next = 6;\n                break;\n              }\n\n              _context3.next = 3;\n              return this.getWalletUtxos();\n\n            case 3:\n              walletUtxos = _context3.sent;\n              coinSelectionStrategy = !this.notReached('sendAssets') ? csl.CoinSelectionStrategyCIP2.LargestFirstMultiAsset : csl.CoinSelectionStrategyCIP2.LargestFirst;\n\n              this._txBuilder.add_inputs_from(walletUtxos, coinSelectionStrategy);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function addTxInputsIfNeeded() {\n      return _addTxInputsIfNeeded.apply(this, arguments);\n    }\n\n    return addTxInputsIfNeeded;\n  }();\n\n  _proto.getWalletUtxos = /*#__PURE__*/function () {\n    var _getWalletUtxos = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var txUnspentOutputs, walletUtxos;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              txUnspentOutputs = csl.TransactionUnspentOutputs[\"new\"]();\n              _context4.next = 3;\n              return this._walletService.getDeserializedUtxos();\n\n            case 3:\n              walletUtxos = _context4.sent;\n              walletUtxos.forEach(function (utxo) {\n                txUnspentOutputs.add(utxo);\n              });\n              return _context4.abrupt(\"return\", txUnspentOutputs);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getWalletUtxos() {\n      return _getWalletUtxos.apply(this, arguments);\n    }\n\n    return getWalletUtxos;\n  }();\n\n  _proto.notReached = function notReached(checkpoint) {\n    return this.__visits.includes(checkpoint) === false;\n  };\n\n  return TransactionService;\n}();\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([Checkpoint()], TransactionService.prototype, \"sendAssets\", null);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([Checkpoint()], TransactionService.prototype, \"setChangeAddress\", null);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([Checkpoint()], TransactionService.prototype, \"setTxInputs\", null);\n\nTransactionService = TransactionService_1 = /*#__PURE__*/(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([Trackable], TransactionService);\n\nvar WalletService = /*#__PURE__*/function () {\n  function WalletService(_walletInstance) {\n    this._walletInstance = _walletInstance;\n  }\n\n  WalletService.getInstalledWallets = function getInstalledWallets() {\n    if (window.cardano === undefined) return [];\n    return WalletService.supportedWallets.filter(function (sw) {\n      return window.cardano[sw] !== undefined;\n    }).map(function (sw) {\n      return {\n        name: window.cardano[sw].name,\n        icon: window.cardano[sw].icon,\n        version: window.cardano[sw].apiVersion\n      };\n    });\n  };\n\n  WalletService.enable = /*#__PURE__*/function () {\n    var _enable = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(walletName) {\n      var walletInstance;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return WalletService.resolveInstance(walletName);\n\n            case 3:\n              walletInstance = _context.sent;\n\n              if (!(walletInstance !== undefined)) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", new WalletService(walletInstance));\n\n            case 6:\n              throw new Error(\"Couldn't create an instance of wallet: \" + walletName + \".\");\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              throw _context.t0;\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    function enable(_x) {\n      return _enable.apply(this, arguments);\n    }\n\n    return enable;\n  }();\n\n  var _proto = WalletService.prototype;\n\n  _proto.getBalance = /*#__PURE__*/function () {\n    var _getBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var balance;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this._walletInstance.getBalance();\n\n            case 2:\n              balance = _context2.sent;\n              return _context2.abrupt(\"return\", fromValue(deserializeValue(balance)));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getBalance() {\n      return _getBalance.apply(this, arguments);\n    }\n\n    return getBalance;\n  }();\n\n  _proto.getChangeAddress = /*#__PURE__*/function () {\n    var _getChangeAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var changeAddress;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this._walletInstance.getChangeAddress();\n\n            case 2:\n              changeAddress = _context3.sent;\n              return _context3.abrupt(\"return\", deserializeAddress(changeAddress).to_bech32());\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getChangeAddress() {\n      return _getChangeAddress.apply(this, arguments);\n    }\n\n    return getChangeAddress;\n  }();\n\n  _proto.getCollateral = /*#__PURE__*/function () {\n    var _getCollateral = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var deserializedCollateral;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.getDeserializedCollateral();\n\n            case 2:\n              deserializedCollateral = _context4.sent;\n              return _context4.abrupt(\"return\", deserializedCollateral.map(function (dc) {\n                return fromTxUnspentOutput(dc);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getCollateral() {\n      return _getCollateral.apply(this, arguments);\n    }\n\n    return getCollateral;\n  }();\n\n  _proto.getDeserializedCollateral = /*#__PURE__*/function () {\n    var _getDeserializedCollateral = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var _yield$this$_walletIn;\n\n      var collateral;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this._walletInstance.experimental.getCollateral();\n\n            case 2:\n              _context5.t0 = _yield$this$_walletIn = _context5.sent;\n\n              if (!(_context5.t0 != null)) {\n                _context5.next = 7;\n                break;\n              }\n\n              _context5.t1 = _yield$this$_walletIn;\n              _context5.next = 8;\n              break;\n\n            case 7:\n              _context5.t1 = [];\n\n            case 8:\n              collateral = _context5.t1;\n              return _context5.abrupt(\"return\", collateral.map(function (c) {\n                return deserializeTxUnspentOutput(c);\n              }));\n\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getDeserializedCollateral() {\n      return _getDeserializedCollateral.apply(this, arguments);\n    }\n\n    return getDeserializedCollateral;\n  }();\n\n  _proto.getNetworkId = function getNetworkId() {\n    return this._walletInstance.getNetworkId();\n  };\n\n  _proto.getRewardAddresses = /*#__PURE__*/function () {\n    var _getRewardAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      var rewardAddresses;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this._walletInstance.getRewardAddresses();\n\n            case 2:\n              rewardAddresses = _context6.sent;\n              return _context6.abrupt(\"return\", rewardAddresses.map(function (ra) {\n                return deserializeAddress(ra).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function getRewardAddresses() {\n      return _getRewardAddresses.apply(this, arguments);\n    }\n\n    return getRewardAddresses;\n  }();\n\n  _proto.getUnusedAddresses = /*#__PURE__*/function () {\n    var _getUnusedAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n      var unusedAddresses;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this._walletInstance.getUnusedAddresses();\n\n            case 2:\n              unusedAddresses = _context7.sent;\n              return _context7.abrupt(\"return\", unusedAddresses.map(function (una) {\n                return deserializeAddress(una).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function getUnusedAddresses() {\n      return _getUnusedAddresses.apply(this, arguments);\n    }\n\n    return getUnusedAddresses;\n  }();\n\n  _proto.getUsedAddresses = /*#__PURE__*/function () {\n    var _getUsedAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n      var usedAddresses;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this._walletInstance.getUsedAddresses();\n\n            case 2:\n              usedAddresses = _context8.sent;\n              return _context8.abrupt(\"return\", usedAddresses.map(function (usa) {\n                return deserializeAddress(usa).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function getUsedAddresses() {\n      return _getUsedAddresses.apply(this, arguments);\n    }\n\n    return getUsedAddresses;\n  }();\n\n  _proto.getUtxos = /*#__PURE__*/function () {\n    var _getUtxos = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n      var deserializedUtxos;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.getDeserializedUtxos();\n\n            case 2:\n              deserializedUtxos = _context9.sent;\n              return _context9.abrupt(\"return\", deserializedUtxos.map(function (du) {\n                return fromTxUnspentOutput(du);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function getUtxos() {\n      return _getUtxos.apply(this, arguments);\n    }\n\n    return getUtxos;\n  }();\n\n  _proto.getDeserializedUtxos = /*#__PURE__*/function () {\n    var _getDeserializedUtxos = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n      var _yield$this$_walletIn2;\n\n      var utxos;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this._walletInstance.getUtxos();\n\n            case 2:\n              _context10.t0 = _yield$this$_walletIn2 = _context10.sent;\n\n              if (!(_context10.t0 != null)) {\n                _context10.next = 7;\n                break;\n              }\n\n              _context10.t1 = _yield$this$_walletIn2;\n              _context10.next = 8;\n              break;\n\n            case 7:\n              _context10.t1 = [];\n\n            case 8:\n              utxos = _context10.t1;\n              return _context10.abrupt(\"return\", utxos.map(function (u) {\n                return deserializeTxUnspentOutput(u);\n              }));\n\n            case 10:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function getDeserializedUtxos() {\n      return _getDeserializedUtxos.apply(this, arguments);\n    }\n\n    return getDeserializedUtxos;\n  }();\n\n  _proto.signData = /*#__PURE__*/function () {\n    var _signData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(payload) {\n      var changeAddress;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this._walletInstance.getChangeAddress();\n\n            case 2:\n              changeAddress = _context11.sent;\n              return _context11.abrupt(\"return\", this._walletInstance.signData(changeAddress, payload));\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function signData(_x2) {\n      return _signData.apply(this, arguments);\n    }\n\n    return signData;\n  }();\n\n  _proto.signTx = /*#__PURE__*/function () {\n    var _signTx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(unsignedTx, partialSign) {\n      var tx, txWitnessSet, walletWitnessSet, walletVerificationKeys, signedTx;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (partialSign === void 0) {\n                partialSign = false;\n              }\n\n              _context12.prev = 1;\n              tx = deserializeTx(unsignedTx);\n              txWitnessSet = deserializeTxWitnessSet(fromBytes(tx.witness_set().to_bytes()));\n              _context12.next = 6;\n              return this._walletInstance.signTx(unsignedTx, partialSign);\n\n            case 6:\n              walletWitnessSet = _context12.sent;\n              walletVerificationKeys = deserializeTxWitnessSet(walletWitnessSet).vkeys();\n              if (walletVerificationKeys !== undefined) txWitnessSet.set_vkeys(walletVerificationKeys);\n              signedTx = fromBytes(csl.Transaction[\"new\"](tx.body(), txWitnessSet, tx.auxiliary_data()).to_bytes());\n              return _context12.abrupt(\"return\", signedTx);\n\n            case 13:\n              _context12.prev = 13;\n              _context12.t0 = _context12[\"catch\"](1);\n              throw _context12.t0;\n\n            case 16:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this, [[1, 13]]);\n    }));\n\n    function signTx(_x3, _x4) {\n      return _signTx.apply(this, arguments);\n    }\n\n    return signTx;\n  }();\n\n  _proto.submitTx = function submitTx(tx) {\n    return this._walletInstance.submitTx(tx);\n  };\n\n  _proto.getAssets = /*#__PURE__*/function () {\n    var _getAssets = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n      var balance;\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.getBalance();\n\n            case 2:\n              balance = _context13.sent;\n              return _context13.abrupt(\"return\", balance.filter(function (v) {\n                return v.unit !== 'lovelace';\n              }).map(function (v) {\n                var policyId = v.unit.slice(0, POLICY_ID_LENGTH);\n                var assetName = v.unit.slice(POLICY_ID_LENGTH);\n                var fingerprint = resolveFingerprint(policyId, assetName);\n                return {\n                  unit: v.unit,\n                  policyId: policyId,\n                  assetName: toASCII(assetName),\n                  fingerprint: fingerprint,\n                  quantity: v.quantity\n                };\n              }));\n\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function getAssets() {\n      return _getAssets.apply(this, arguments);\n    }\n\n    return getAssets;\n  }();\n\n  _proto.getLovelace = /*#__PURE__*/function () {\n    var _getLovelace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n      var balance, nativeAsset;\n      return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.getBalance();\n\n            case 2:\n              balance = _context14.sent;\n              nativeAsset = balance.find(function (v) {\n                return v.unit === 'lovelace';\n              });\n              return _context14.abrupt(\"return\", nativeAsset !== undefined ? nativeAsset.quantity : '0');\n\n            case 5:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function getLovelace() {\n      return _getLovelace.apply(this, arguments);\n    }\n\n    return getLovelace;\n  }();\n\n  _proto.getPolicyIdAssets = /*#__PURE__*/function () {\n    var _getPolicyIdAssets = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(policyId) {\n      var assets;\n      return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return this.getAssets();\n\n            case 2:\n              assets = _context15.sent;\n              return _context15.abrupt(\"return\", assets.filter(function (v) {\n                return v.policyId === policyId;\n              }));\n\n            case 4:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function getPolicyIdAssets(_x5) {\n      return _getPolicyIdAssets.apply(this, arguments);\n    }\n\n    return getPolicyIdAssets;\n  }();\n\n  _proto.getPolicyIds = /*#__PURE__*/function () {\n    var _getPolicyIds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n      var balance;\n      return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.getBalance();\n\n            case 2:\n              balance = _context16.sent;\n              return _context16.abrupt(\"return\", Array.from(new Set(balance.map(function (v) {\n                return v.unit.slice(0, POLICY_ID_LENGTH);\n              }))).filter(function (p) {\n                return p !== 'lovelace';\n              }));\n\n            case 4:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function getPolicyIds() {\n      return _getPolicyIds.apply(this, arguments);\n    }\n\n    return getPolicyIds;\n  }();\n\n  WalletService.resolveInstance = function resolveInstance(walletName) {\n    if (window.cardano === undefined) return undefined;\n    var wallet = WalletService.supportedWallets.map(function (sw) {\n      return window.cardano[sw];\n    }).filter(function (sw) {\n      return sw !== undefined;\n    }).find(function (sw) {\n      return sw.name === walletName;\n    });\n    return wallet == null ? void 0 : wallet.enable();\n  };\n\n  return WalletService;\n}();\nWalletService.supportedWallets = ['flint', 'nami', 'eternl', 'nufi'];\n\nvar Mesh = function Mesh() {\n  this.blockfrost = new Blockfrost();\n  this.infura = new Infura();\n  this.wallet = new Wallet({\n    blockfrost: this.blockfrost\n  });\n  this.transaction = new Transaction({\n    wallet: this.wallet\n  });\n};\n\nvar index = /*#__PURE__*/new Mesh();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);\n\n//# sourceMappingURL=mesh.esm.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@martifylabs/mesh/dist/mesh.esm.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/_app.tsx"));
module.exports = __webpack_exports__;

})();