"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/index";
exports.ids = ["pages/index"];
exports.modules = {

/***/ "./components/wallet/connectWallet.tsx":
/*!*********************************************!*\
  !*** ./components/wallet/connectWallet.tsx ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ConnectWallet)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @martifylabs/mesh */ \"./node_modules/@martifylabs/mesh/dist/mesh.esm.js\");\n/* harmony import */ var _contexts_wallet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../contexts/wallet */ \"./contexts/wallet.tsx\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @chakra-ui/react */ \"@chakra-ui/react\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__, _contexts_wallet__WEBPACK_IMPORTED_MODULE_3__]);\n([_martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__, _contexts_wallet__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\nfunction ConnectWallet() {\n    const { connecting , walletNameConnected , connectWallet , walletConnected  } = (0,_contexts_wallet__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n    const { 0: availableWallets , 1: setAvailableWallets  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        async function init() {\n            setAvailableWallets(_martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__.WalletService.getInstalledWallets());\n        }\n        init();\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: availableWallets ? availableWallets.length == 0 ? \"No wallets found\" : availableWallets.map((wallet, i)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Button, {\n                px: \"5\",\n                mx: \"5\",\n                onClick: ()=>connectWallet(wallet.name),\n                colorScheme: \"purple\",\n                children: [\n                    \"Connect with \",\n                    wallet.name\n                ]\n            }, i, true, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/components/wallet/connectWallet.tsx\",\n                lineNumber: 25,\n                columnNumber: 25\n            }, this)) : \"\"\n    }, void 0, false);\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3dhbGxldC9jb25uZWN0V2FsbGV0LnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUE0QztBQUVNO0FBQ0o7QUFFSjtBQUUzQixTQUFTSyxhQUFhLEdBQUc7SUFDcEMsTUFBTSxFQUFFQyxVQUFVLEdBQUVDLG1CQUFtQixHQUFFQyxhQUFhLEdBQUVDLGVBQWUsR0FBRSxHQUFHTiw0REFBUyxFQUFFO0lBQ3ZGLE1BQU0sS0FBQ08sZ0JBQWdCLE1BQUVDLG1CQUFtQixNQUFJViwrQ0FBUSxDQUF1QlcsU0FBUyxDQUFDO0lBRXpGWixnREFBUyxDQUFDLElBQU07UUFDWixlQUFlYSxJQUFJLEdBQUc7WUFDbEJGLG1CQUFtQixDQUFDVCxnRkFBaUMsRUFBRSxDQUFDLENBQUM7U0FDNUQ7UUFDRFcsSUFBSSxFQUFFLENBQUM7S0FDVixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAscUJBQ0k7a0JBQ0tILGdCQUFnQixHQUNYQSxnQkFBZ0IsQ0FBQ0ssTUFBTSxJQUFJLENBQUMsR0FDeEIsa0JBQWtCLEdBQ2xCTCxnQkFBZ0IsQ0FBQ00sR0FBRyxDQUFDLENBQUNDLE1BQU0sRUFBRUMsQ0FBQyxpQkFDN0IsOERBQUNkLG9EQUFNO2dCQUFTZSxFQUFFLEVBQUMsR0FBRztnQkFBQ0MsRUFBRSxFQUFDLEdBQUc7Z0JBQUNDLE9BQU8sRUFBRSxJQUFNYixhQUFhLENBQUNTLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDO2dCQUFFQyxXQUFXLEVBQUMsUUFBUTs7b0JBQUMsZUFDN0U7b0JBQUNOLE1BQU0sQ0FBQ0ssSUFBSTs7ZUFEaEJKLENBQUM7Ozs7b0JBRUwsQ0FDWCxHQUNKLEVBQUU7cUJBQ1QsQ0FDTDtDQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHBibC1mcm9udC1lbmQtdGVtcGxhdGUtbmV4dGpzLW1lc2gvLi9jb21wb25lbnRzL3dhbGxldC9jb25uZWN0V2FsbGV0LnRzeD8xMDE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IFdhbGxldCB9IGZyb20gJ0BtYXJ0aWZ5bGFicy9tZXNoJztcbmltcG9ydCB7IFdhbGxldFNlcnZpY2UgfSBmcm9tICdAbWFydGlmeWxhYnMvbWVzaCc7XG5pbXBvcnQgdXNlV2FsbGV0IGZyb20gJy4uLy4uL2NvbnRleHRzL3dhbGxldCc7XG5cbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ0BjaGFrcmEtdWkvcmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb25uZWN0V2FsbGV0KCkge1xuICAgIGNvbnN0IHsgY29ubmVjdGluZywgd2FsbGV0TmFtZUNvbm5lY3RlZCwgY29ubmVjdFdhbGxldCwgd2FsbGV0Q29ubmVjdGVkIH0gPSB1c2VXYWxsZXQoKTtcbiAgICBjb25zdCBbYXZhaWxhYmxlV2FsbGV0cywgc2V0QXZhaWxhYmxlV2FsbGV0c10gPSB1c2VTdGF0ZTxXYWxsZXRbXSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgICBzZXRBdmFpbGFibGVXYWxsZXRzKFdhbGxldFNlcnZpY2UuZ2V0SW5zdGFsbGVkV2FsbGV0cygpKTtcbiAgICAgICAgfVxuICAgICAgICBpbml0KCk7XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIHthdmFpbGFibGVXYWxsZXRzXG4gICAgICAgICAgICAgICAgPyBhdmFpbGFibGVXYWxsZXRzLmxlbmd0aCA9PSAwXG4gICAgICAgICAgICAgICAgICAgID8gJ05vIHdhbGxldHMgZm91bmQnXG4gICAgICAgICAgICAgICAgICAgIDogYXZhaWxhYmxlV2FsbGV0cy5tYXAoKHdhbGxldCwgaSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBrZXk9e2l9IHB4PSc1JyBteD0nNScgb25DbGljaz17KCkgPT4gY29ubmVjdFdhbGxldCh3YWxsZXQubmFtZSl9IGNvbG9yU2NoZW1lPSdwdXJwbGUnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbm5lY3Qgd2l0aCB7d2FsbGV0Lm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICA6ICcnfVxuICAgICAgICA8Lz5cbiAgICApO1xufSJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsIldhbGxldFNlcnZpY2UiLCJ1c2VXYWxsZXQiLCJCdXR0b24iLCJDb25uZWN0V2FsbGV0IiwiY29ubmVjdGluZyIsIndhbGxldE5hbWVDb25uZWN0ZWQiLCJjb25uZWN0V2FsbGV0Iiwid2FsbGV0Q29ubmVjdGVkIiwiYXZhaWxhYmxlV2FsbGV0cyIsInNldEF2YWlsYWJsZVdhbGxldHMiLCJ1bmRlZmluZWQiLCJpbml0IiwiZ2V0SW5zdGFsbGVkV2FsbGV0cyIsImxlbmd0aCIsIm1hcCIsIndhbGxldCIsImkiLCJweCIsIm14Iiwib25DbGljayIsIm5hbWUiLCJjb2xvclNjaGVtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/wallet/connectWallet.tsx\n");

/***/ }),

/***/ "./contexts/wallet.tsx":
/*!*****************************!*\
  !*** ./contexts/wallet.tsx ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WalletProvider\": () => (/* binding */ WalletProvider),\n/* harmony export */   \"default\": () => (/* binding */ useWallet)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @martifylabs/mesh */ \"./node_modules/@martifylabs/mesh/dist/mesh.esm.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__]);\n_martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst WalletContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    wallet: {},\n    connecting: false,\n    walletNameConnected: \"\",\n    walletConnected: false,\n    connectWallet: async (walletName)=>{}\n});\nconst WalletProvider = ({ children  })=>{\n    const { 0: wallet , 1: setWallet  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const { 0: walletConnected , 1: setWalletConnected  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { 0: connecting , 1: setConnecting  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { 0: walletNameConnected , 1: setWalletNameConnected  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const connectWallet = async (walletName)=>{\n        setConnecting(true);\n        const _wallet = await _martifylabs_mesh__WEBPACK_IMPORTED_MODULE_2__.WalletService.enable(walletName);\n        if (_wallet) {\n            setWallet(_wallet);\n            setWalletNameConnected(walletName);\n            setWalletConnected(true);\n        }\n        setConnecting(false);\n    };\n    const memoedValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            wallet,\n            connecting,\n            walletNameConnected,\n            walletConnected,\n            connectWallet\n        }), [\n        wallet,\n        walletConnected,\n        connecting,\n        walletNameConnected\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(WalletContext.Provider, {\n        value: memoedValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/contexts/wallet.tsx\",\n        lineNumber: 49,\n        columnNumber: 5\n    }, undefined);\n};\nfunction useWallet() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(WalletContext);\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb250ZXh0cy93YWxsZXQudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQU1lO0FBRW1DO0FBR2xELE1BQU1NLGFBQWEsaUJBQUdMLG9EQUFhLENBQUM7SUFDbENNLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLFVBQVUsRUFBRSxLQUFLO0lBQ2pCQyxtQkFBbUIsRUFBRSxFQUFFO0lBQ3ZCQyxlQUFlLEVBQUUsS0FBSztJQUN0QkMsYUFBYSxFQUFFLE9BQU9DLFVBQWtCLEdBQUssRUFBRTtDQUNoRCxDQUFDO0FBRUssTUFBTUMsY0FBYyxHQUFHLENBQUMsRUFBRUMsUUFBUSxHQUEwQixHQUFLO0lBQ3RFLE1BQU0sS0FBQ1AsTUFBTSxNQUFFUSxTQUFTLE1BQUliLCtDQUFRLENBQWdCLEVBQUUsQ0FBa0I7SUFDeEUsTUFBTSxLQUFDUSxlQUFlLE1BQUVNLGtCQUFrQixNQUFJZCwrQ0FBUSxDQUFVLEtBQUssQ0FBQztJQUN0RSxNQUFNLEtBQUNNLFVBQVUsTUFBRVMsYUFBYSxNQUFJZiwrQ0FBUSxDQUFVLEtBQUssQ0FBQztJQUM1RCxNQUFNLEtBQUNPLG1CQUFtQixNQUFFUyxzQkFBc0IsTUFBSWhCLCtDQUFRLENBQVMsRUFBRSxDQUFDO0lBRTFFLE1BQU1TLGFBQWEsR0FBRyxPQUFPQyxVQUFrQixHQUFLO1FBQ2xESyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsTUFBTUUsT0FBTyxHQUFHLE1BQU1kLG1FQUFvQixDQUFDTyxVQUFVLENBQUM7UUFDdEQsSUFBSU8sT0FBTyxFQUFFO1lBQ1hKLFNBQVMsQ0FBQ0ksT0FBTyxDQUFDLENBQUM7WUFDbkJELHNCQUFzQixDQUFDTixVQUFVLENBQUMsQ0FBQztZQUNuQ0ksa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUI7UUFDREMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RCO0lBRUQsTUFBTUksV0FBVyxHQUFHakIsOENBQU8sQ0FDekIsSUFBTSxDQUFDO1lBQ0xHLE1BQU07WUFDTkMsVUFBVTtZQUNWQyxtQkFBbUI7WUFDbkJDLGVBQWU7WUFDZkMsYUFBYTtTQUNkLENBQUMsRUFDRjtRQUFDSixNQUFNO1FBQUVHLGVBQWU7UUFBRUYsVUFBVTtRQUFFQyxtQkFBbUI7S0FBQyxDQUMzRDtJQUVELHFCQUNFLDhEQUFDSCxhQUFhLENBQUNnQixRQUFRO1FBQUNDLEtBQUssRUFBRUYsV0FBVztrQkFDdkNQLFFBQVE7Ozs7O2lCQUNjLENBQ3pCO0NBQ0gsQ0FBQztBQUVhLFNBQVNVLFNBQVMsR0FBRztJQUNsQyxPQUFPckIsaURBQVUsQ0FBQ0csYUFBYSxDQUFDLENBQUM7Q0FDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcGJsLWZyb250LWVuZC10ZW1wbGF0ZS1uZXh0anMtbWVzaC8uL2NvbnRleHRzL3dhbGxldC50c3g/MWU3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtcbiAgY3JlYXRlQ29udGV4dCxcbiAgdXNlU3RhdGUsXG4gIHVzZUNvbnRleHQsXG4gIHVzZU1lbW8sXG4gIFJlYWN0Tm9kZSxcbn0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IFdhbGxldFNlcnZpY2UgfSBmcm9tIFwiQG1hcnRpZnlsYWJzL21lc2hcIjtcblxuXG5jb25zdCBXYWxsZXRDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7XG4gIHdhbGxldDoge30gYXMgV2FsbGV0U2VydmljZSxcbiAgY29ubmVjdGluZzogZmFsc2UsXG4gIHdhbGxldE5hbWVDb25uZWN0ZWQ6ICcnLFxuICB3YWxsZXRDb25uZWN0ZWQ6IGZhbHNlLFxuICBjb25uZWN0V2FsbGV0OiBhc3luYyAod2FsbGV0TmFtZTogc3RyaW5nKSA9PiB7fSxcbn0pO1xuXG5leHBvcnQgY29uc3QgV2FsbGV0UHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9OiB7Y2hpbGRyZW46IFJlYWN0Tm9kZSB9KSA9PiB7XG4gIGNvbnN0IFt3YWxsZXQsIHNldFdhbGxldF0gPSB1c2VTdGF0ZTxXYWxsZXRTZXJ2aWNlPih7fSBhcyBXYWxsZXRTZXJ2aWNlKTtcbiAgY29uc3QgW3dhbGxldENvbm5lY3RlZCwgc2V0V2FsbGV0Q29ubmVjdGVkXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW2Nvbm5lY3RpbmcsIHNldENvbm5lY3RpbmddID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCBbd2FsbGV0TmFtZUNvbm5lY3RlZCwgc2V0V2FsbGV0TmFtZUNvbm5lY3RlZF0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcblxuICBjb25zdCBjb25uZWN0V2FsbGV0ID0gYXN5bmMgKHdhbGxldE5hbWU6IHN0cmluZykgPT4ge1xuICAgIHNldENvbm5lY3RpbmcodHJ1ZSk7XG4gICAgY29uc3QgX3dhbGxldCA9IGF3YWl0IFdhbGxldFNlcnZpY2UuZW5hYmxlKHdhbGxldE5hbWUpO1xuICAgIGlmIChfd2FsbGV0KSB7XG4gICAgICBzZXRXYWxsZXQoX3dhbGxldCk7XG4gICAgICBzZXRXYWxsZXROYW1lQ29ubmVjdGVkKHdhbGxldE5hbWUpO1xuICAgICAgc2V0V2FsbGV0Q29ubmVjdGVkKHRydWUpO1xuICAgIH1cbiAgICBzZXRDb25uZWN0aW5nKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBtZW1vZWRWYWx1ZSA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIHdhbGxldCxcbiAgICAgIGNvbm5lY3RpbmcsXG4gICAgICB3YWxsZXROYW1lQ29ubmVjdGVkLFxuICAgICAgd2FsbGV0Q29ubmVjdGVkLFxuICAgICAgY29ubmVjdFdhbGxldCxcbiAgICB9KSxcbiAgICBbd2FsbGV0LCB3YWxsZXRDb25uZWN0ZWQsIGNvbm5lY3RpbmcsIHdhbGxldE5hbWVDb25uZWN0ZWRdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8V2FsbGV0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bWVtb2VkVmFsdWV9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvV2FsbGV0Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVdhbGxldCgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoV2FsbGV0Q29udGV4dCk7XG59Il0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZVN0YXRlIiwidXNlQ29udGV4dCIsInVzZU1lbW8iLCJXYWxsZXRTZXJ2aWNlIiwiV2FsbGV0Q29udGV4dCIsIndhbGxldCIsImNvbm5lY3RpbmciLCJ3YWxsZXROYW1lQ29ubmVjdGVkIiwid2FsbGV0Q29ubmVjdGVkIiwiY29ubmVjdFdhbGxldCIsIndhbGxldE5hbWUiLCJXYWxsZXRQcm92aWRlciIsImNoaWxkcmVuIiwic2V0V2FsbGV0Iiwic2V0V2FsbGV0Q29ubmVjdGVkIiwic2V0Q29ubmVjdGluZyIsInNldFdhbGxldE5hbWVDb25uZWN0ZWQiLCJfd2FsbGV0IiwiZW5hYmxlIiwibWVtb2VkVmFsdWUiLCJQcm92aWRlciIsInZhbHVlIiwidXNlV2FsbGV0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./contexts/wallet.tsx\n");

/***/ }),

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chakra-ui/react */ \"@chakra-ui/react\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _contexts_wallet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../contexts/wallet */ \"./contexts/wallet.tsx\");\n/* harmony import */ var _components_wallet_connectWallet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/wallet/connectWallet */ \"./components/wallet/connectWallet.tsx\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_contexts_wallet__WEBPACK_IMPORTED_MODULE_3__, _components_wallet_connectWallet__WEBPACK_IMPORTED_MODULE_4__]);\n([_contexts_wallet__WEBPACK_IMPORTED_MODULE_3__, _components_wallet_connectWallet__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\nconst Home = ()=>{\n    const { connecting , walletConnected , wallet  } = (0,_contexts_wallet__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n    const { 0: currentNetwork , 1: setCurrentNetwork  } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"Not Connected\");\n    const { 0: loading , 1: setLoading  } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const fetchNetwork = async ()=>{\n            const _network = await wallet.getNetworkId();\n            if (_network === 0) {\n                setCurrentNetwork(\"Testnet\");\n            } else if (_network === 1) {\n                setCurrentNetwork(\"Mainnet\");\n            }\n            setLoading(false);\n        };\n        if (walletConnected) {\n            setLoading(true);\n            fetchNetwork();\n        }\n    }, [\n        walletConnected,\n        wallet\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Box, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Heading, {\n                as: \"h1\",\n                size: \"3xl\",\n                noOfLines: 1,\n                mb: 1,\n                children: \"Huestern Yunion\"\n            }, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                lineNumber: 36,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Text, {\n                fontSize: \"xl\",\n                noOfLines: 1,\n                mb: 4,\n                children: \"Huestern Yunion helps businesses in Latin America get paid by anyone, anywhere in the world.\"\n            }, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                lineNumber: 39,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Heading, {\n                children: \"Step 1: Check your connection\"\n            }, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                lineNumber: 43,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                m: 4,\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_wallet_connectWallet__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}, void 0, false, {\n                    fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                    lineNumber: 47,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                lineNumber: 46,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                m: \"5\",\n                p: \"5\",\n                bg: \"teal.700\",\n                color: \"white\",\n                children: loading ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Center, {\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Spinner, {}, void 0, false, {\n                        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                        lineNumber: 52,\n                        columnNumber: 13\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                    lineNumber: 51,\n                    columnNumber: 11\n                }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                    children: walletConnected ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                        w: \"80%\",\n                        mx: \"auto\",\n                        my: \"5\",\n                        p: \"5\",\n                        bg: \"green.100\",\n                        color: \"black\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Text, {\n                            fontSize: \"xl\",\n                            children: [\n                                \"Congratulations! You are connected to \",\n                                walletConnected,\n                                \" wallet on \",\n                                currentNetwork,\n                                \" \"\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                            lineNumber: 59,\n                            columnNumber: 19\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                        lineNumber: 58,\n                        columnNumber: 17\n                    }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                        w: \"80%\",\n                        mx: \"auto\",\n                        my: \"5\",\n                        p: \"5\",\n                        bg: \"red.100\",\n                        color: \"black\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__.Text, {\n                            fontSize: \"xl\",\n                            children: \"No wallet is connected yet. \"\n                        }, void 0, false, {\n                            fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                            lineNumber: 63,\n                            columnNumber: 19\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                        lineNumber: 62,\n                        columnNumber: 17\n                    }, undefined)\n                }, void 0, false)\n            }, void 0, false, {\n                fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n                lineNumber: 49,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/macadmin/Documents/plutus-emurgo-finalProject/huestern-yunion/pages/index.tsx\",\n        lineNumber: 35,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Home);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9pbmRleC50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFFeUI7QUFDbUI7QUFFRDtBQUNvQjtBQUUvRCxNQUFNUyxJQUFJLEdBQWEsSUFBTTtJQUMzQixNQUFNLEVBQUVDLFVBQVUsR0FBRUMsZUFBZSxHQUFFQyxNQUFNLEdBQUUsR0FBR0wsNERBQVMsRUFBRTtJQUMzRCxNQUFNLEtBQUNNLGNBQWMsTUFBRUMsaUJBQWlCLE1BQUlSLCtDQUFRLENBQTBDLGVBQWUsQ0FBQztJQUM5RyxNQUFNLEtBQUNTLE9BQU8sTUFBRUMsVUFBVSxNQUFJViwrQ0FBUSxDQUFVLEtBQUssQ0FBQztJQUV0REQsZ0RBQVMsQ0FBQyxJQUFNO1FBRWQsTUFBTVksWUFBWSxHQUFHLFVBQVk7WUFDL0IsTUFBTUMsUUFBUSxHQUFHLE1BQU1OLE1BQU0sQ0FBQ08sWUFBWSxFQUFFO1lBQzVDLElBQUlELFFBQVEsS0FBSyxDQUFDLEVBQUU7Z0JBQ2xCSixpQkFBaUIsQ0FBQyxTQUFTLENBQUM7YUFDN0IsTUFDSSxJQUFJSSxRQUFRLEtBQUssQ0FBQyxFQUFFO2dCQUN2QkosaUJBQWlCLENBQUMsU0FBUyxDQUFDO2FBQzdCO1lBQ0RFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNuQjtRQUVELElBQUlMLGVBQWUsRUFBRTtZQUNuQkssVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pCQyxZQUFZLEVBQUUsQ0FBQztTQUNoQjtLQUVGLEVBQUU7UUFBQ04sZUFBZTtRQUFFQyxNQUFNO0tBQUMsQ0FBQztJQUU3QixxQkFDRSw4REFBQ1osaURBQUc7OzBCQUNGLDhEQUFDQyxxREFBTztnQkFBQ21CLEVBQUUsRUFBQyxJQUFJO2dCQUFDQyxJQUFJLEVBQUMsS0FBSztnQkFBQ0MsU0FBUyxFQUFFLENBQUM7Z0JBQUVDLEVBQUUsRUFBRSxDQUFDOzBCQUFFLGlCQUVqRDs7Ozs7eUJBQVU7MEJBQ1YsOERBQUNyQixrREFBSTtnQkFBQ3NCLFFBQVEsRUFBQyxJQUFJO2dCQUFDRixTQUFTLEVBQUUsQ0FBQztnQkFBRUMsRUFBRSxFQUFFLENBQUM7MEJBQUUsOEZBR3pDOzs7Ozt5QkFBTzswQkFDUCw4REFBQ3RCLHFEQUFPOzBCQUFDLCtCQUVUOzs7Ozt5QkFBVTswQkFDViw4REFBQ0QsaURBQUc7Z0JBQUN5QixDQUFDLEVBQUUsQ0FBQzswQkFDUCw0RUFBQ2pCLHdFQUFhOzs7OzZCQUFFOzs7Ozt5QkFDWjswQkFDTiw4REFBQ1IsaURBQUc7Z0JBQUN5QixDQUFDLEVBQUMsR0FBRztnQkFBQ0MsQ0FBQyxFQUFDLEdBQUc7Z0JBQUNDLEVBQUUsRUFBQyxVQUFVO2dCQUFDQyxLQUFLLEVBQUMsT0FBTzswQkFDekNiLE9BQU8saUJBQ04sOERBQUNYLG9EQUFNOzhCQUNMLDRFQUFDRCxxREFBTzs7OztpQ0FBRzs7Ozs7NkJBQ0osaUJBRVQ7OEJBQ0dRLGVBQWUsaUJBRVosOERBQUNYLGlEQUFHO3dCQUFDNkIsQ0FBQyxFQUFDLEtBQUs7d0JBQUNDLEVBQUUsRUFBQyxNQUFNO3dCQUFDQyxFQUFFLEVBQUMsR0FBRzt3QkFBQ0wsQ0FBQyxFQUFDLEdBQUc7d0JBQUNDLEVBQUUsRUFBQyxXQUFXO3dCQUFDQyxLQUFLLEVBQUMsT0FBTztrQ0FDOUQsNEVBQUMxQixrREFBSTs0QkFBQ3NCLFFBQVEsRUFBQyxJQUFJOztnQ0FBQyx3Q0FBc0M7Z0NBQUNiLGVBQWU7Z0NBQUMsYUFBVztnQ0FBQ0UsY0FBYztnQ0FBQyxHQUFDOzs7Ozs7cUNBQU87Ozs7O2lDQUMxRyxpQkFFTiw4REFBQ2IsaURBQUc7d0JBQUM2QixDQUFDLEVBQUMsS0FBSzt3QkFBQ0MsRUFBRSxFQUFDLE1BQU07d0JBQUNDLEVBQUUsRUFBQyxHQUFHO3dCQUFDTCxDQUFDLEVBQUMsR0FBRzt3QkFBQ0MsRUFBRSxFQUFDLFNBQVM7d0JBQUNDLEtBQUssRUFBQyxPQUFPO2tDQUM1RCw0RUFBQzFCLGtEQUFJOzRCQUFDc0IsUUFBUSxFQUFDLElBQUk7c0NBQUMsOEJBQTRCOzs7OztxQ0FBTzs7Ozs7aUNBQ25EO2lDQUdUOzs7Ozt5QkFFRDs7Ozs7O2lCQUNGLENBQ1A7Q0FDRjtBQUVELGlFQUFlZixJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHBibC1mcm9udC1lbmQtdGVtcGxhdGUtbmV4dGpzLW1lc2gvLi9wYWdlcy9pbmRleC50c3g/MDdmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBCb3gsIEhlYWRpbmcsIFRleHQsIFNwaW5uZXIsIENlbnRlclxufSBmcm9tICdAY2hha3JhLXVpL3JlYWN0J1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUgeyBOZXh0UGFnZSB9IGZyb20gXCJuZXh0XCI7XG5pbXBvcnQgdXNlV2FsbGV0IGZyb20gJy4uL2NvbnRleHRzL3dhbGxldCc7XG5pbXBvcnQgQ29ubmVjdFdhbGxldCBmcm9tICcuLi9jb21wb25lbnRzL3dhbGxldC9jb25uZWN0V2FsbGV0JztcblxuY29uc3QgSG9tZTogTmV4dFBhZ2UgPSAoKSA9PiB7XG4gIGNvbnN0IHsgY29ubmVjdGluZywgd2FsbGV0Q29ubmVjdGVkLCB3YWxsZXQgfSA9IHVzZVdhbGxldCgpO1xuICBjb25zdCBbY3VycmVudE5ldHdvcmssIHNldEN1cnJlbnROZXR3b3JrXSA9IHVzZVN0YXRlPFwiVGVzdG5ldFwiIHwgXCJNYWlubmV0XCIgfCBcIk5vdCBDb25uZWN0ZWRcIj4oXCJOb3QgQ29ubmVjdGVkXCIpO1xuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcblxuICAgIGNvbnN0IGZldGNoTmV0d29yayA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IF9uZXR3b3JrID0gYXdhaXQgd2FsbGV0LmdldE5ldHdvcmtJZCgpO1xuICAgICAgaWYgKF9uZXR3b3JrID09PSAwKSB7XG4gICAgICAgIHNldEN1cnJlbnROZXR3b3JrKFwiVGVzdG5ldFwiKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoX25ldHdvcmsgPT09IDEpIHtcbiAgICAgICAgc2V0Q3VycmVudE5ldHdvcmsoXCJNYWlubmV0XCIpXG4gICAgICB9XG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAod2FsbGV0Q29ubmVjdGVkKSB7XG4gICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgICAgZmV0Y2hOZXR3b3JrKCk7XG4gICAgfVxuXG4gIH0sIFt3YWxsZXRDb25uZWN0ZWQsIHdhbGxldF0pXG5cbiAgcmV0dXJuIChcbiAgICA8Qm94PlxuICAgICAgPEhlYWRpbmcgYXM9J2gxJyBzaXplPSczeGwnIG5vT2ZMaW5lcz17MX0gbWI9ezF9PlxuICAgICAgICBIdWVzdGVybiBZdW5pb25cbiAgICAgIDwvSGVhZGluZz5cbiAgICAgIDxUZXh0IGZvbnRTaXplPSd4bCcgbm9PZkxpbmVzPXsxfSBtYj17NH0+XG4gICAgICAgIEh1ZXN0ZXJuIFl1bmlvbiBoZWxwcyBidXNpbmVzc2VzIGluIExhdGluIEFtZXJpY2EgZ2V0IHBhaWQgYnkgYW55b25lLCBhbnl3aGVyZSBpbiB0aGVcbiAgICAgICAgd29ybGQuXG4gICAgICA8L1RleHQ+XG4gICAgICA8SGVhZGluZz5cbiAgICAgICAgU3RlcCAxOiBDaGVjayB5b3VyIGNvbm5lY3Rpb25cbiAgICAgIDwvSGVhZGluZz5cbiAgICAgIDxCb3ggbT17NH0+XG4gICAgICAgIDxDb25uZWN0V2FsbGV0Lz5cbiAgICAgIDwvQm94PlxuICAgICAgPEJveCBtPSc1JyBwPSc1JyBiZz0ndGVhbC43MDAnIGNvbG9yPSd3aGl0ZSc+XG4gICAgICAgIHtsb2FkaW5nID8gKFxuICAgICAgICAgIDxDZW50ZXI+XG4gICAgICAgICAgICA8U3Bpbm5lciAvPlxuICAgICAgICAgIDwvQ2VudGVyPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICB7d2FsbGV0Q29ubmVjdGVkID9cbiAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgIDxCb3ggdz0nODAlJyBteD0nYXV0bycgbXk9JzUnIHA9JzUnIGJnPSdncmVlbi4xMDAnIGNvbG9yPSdibGFjayc+XG4gICAgICAgICAgICAgICAgICA8VGV4dCBmb250U2l6ZT0neGwnPkNvbmdyYXR1bGF0aW9ucyEgWW91IGFyZSBjb25uZWN0ZWQgdG8ge3dhbGxldENvbm5lY3RlZH0gd2FsbGV0IG9uIHtjdXJyZW50TmV0d29ya30gPC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDxCb3ggdz0nODAlJyBteD0nYXV0bycgbXk9JzUnIHA9JzUnIGJnPSdyZWQuMTAwJyBjb2xvcj0nYmxhY2snPlxuICAgICAgICAgICAgICAgICAgPFRleHQgZm9udFNpemU9J3hsJz5ObyB3YWxsZXQgaXMgY29ubmVjdGVkIHlldC4gPC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG4gICAgICA8L0JveD5cbiAgICA8L0JveD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb21lXG4iXSwibmFtZXMiOlsiQm94IiwiSGVhZGluZyIsIlRleHQiLCJTcGlubmVyIiwiQ2VudGVyIiwidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJ1c2VXYWxsZXQiLCJDb25uZWN0V2FsbGV0IiwiSG9tZSIsImNvbm5lY3RpbmciLCJ3YWxsZXRDb25uZWN0ZWQiLCJ3YWxsZXQiLCJjdXJyZW50TmV0d29yayIsInNldEN1cnJlbnROZXR3b3JrIiwibG9hZGluZyIsInNldExvYWRpbmciLCJmZXRjaE5ldHdvcmsiLCJfbmV0d29yayIsImdldE5ldHdvcmtJZCIsImFzIiwic2l6ZSIsIm5vT2ZMaW5lcyIsIm1iIiwiZm9udFNpemUiLCJtIiwicCIsImJnIiwiY29sb3IiLCJ3IiwibXgiLCJteSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/index.tsx\n");

/***/ }),

/***/ "@chakra-ui/react":
/*!***********************************!*\
  !*** external "@chakra-ui/react" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("@chakra-ui/react");

/***/ }),

/***/ "@emurgo/cardano-serialization-lib-nodejs":
/*!***********************************************************!*\
  !*** external "@emurgo/cardano-serialization-lib-nodejs" ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = require("@emurgo/cardano-serialization-lib-nodejs");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "axios/index":
/*!******************************!*\
  !*** external "axios/index" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("axios/index");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "tslib":
/*!************************!*\
  !*** external "tslib" ***!
  \************************/
/***/ ((module) => {

module.exports = import("tslib");;

/***/ }),

/***/ "./node_modules/@martifylabs/mesh/dist/mesh.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@martifylabs/mesh/dist/mesh.esm.js ***!
  \*********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TransactionService\": () => (/* binding */ TransactionService),\n/* harmony export */   \"WalletService\": () => (/* binding */ WalletService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var axios_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios/index */ \"axios/index\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"tslib\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([tslib__WEBPACK_IMPORTED_MODULE_2__]);\ntslib__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nfunction _regeneratorRuntime() {\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n\n  _regeneratorRuntime = function () {\n    return exports;\n  };\n\n  var exports = {},\n      Op = Object.prototype,\n      hasOwn = Op.hasOwnProperty,\n      $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n      iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n      asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n      toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function (obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n        generator = Object.create(protoGenerator.prototype),\n        context = new Context(tryLocsList || []);\n    return generator._invoke = function (innerFn, self, context) {\n      var state = \"suspendedStart\";\n      return function (method, arg) {\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\n\n        if (\"completed\" === state) {\n          if (\"throw\" === method) throw arg;\n          return doneResult();\n        }\n\n        for (context.method = method, context.arg = arg;;) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n            context.dispatchException(context.arg);\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n          state = \"executing\";\n          var record = tryCatch(innerFn, self, context);\n\n          if (\"normal\" === record.type) {\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          }\n\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n        }\n      };\n    }(innerFn, self, context), generator;\n  }\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {}\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n      NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n            value = result.value;\n        return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n\n      reject(record.arg);\n    }\n\n    var previousPromise;\n\n    this._invoke = function (method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    };\n  }\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (undefined === method) {\n      if (context.delegate = null, \"throw\" === context.method) {\n        if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n\n          return next.value = undefined, next.done = !0, next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    return {\n      next: doneResult\n    };\n  }\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) keys.push(key);\n\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function (skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function () {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function (exception) {\n      if (this.done) throw exception;\n      var context = this;\n\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n            record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n              hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function (type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function (record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function (finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    catch: function (tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      }\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function (iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar Blockfrost = /*#__PURE__*/function () {\n  function Blockfrost() {}\n\n  var _proto = Blockfrost.prototype;\n\n  _proto.init = /*#__PURE__*/function () {\n    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n      var blockfrostApiKey, network, networkEndpoint;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              blockfrostApiKey = _ref.blockfrostApiKey, network = _ref.network;\n              networkEndpoint = network == 0 ? 'https://cardano-testnet.blockfrost.io/api/v0' : 'https://cardano-mainnet.blockfrost.io/api/v0';\n              this._instance = axios_index__WEBPACK_IMPORTED_MODULE_0__.create({\n                baseURL: networkEndpoint,\n                headers: {\n                  project_id: blockfrostApiKey\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function init(_x) {\n      return _init.apply(this, arguments);\n    }\n\n    return init;\n  }();\n\n  _proto.isLoaded = function isLoaded() {\n    return this._instance !== undefined;\n  };\n\n  _proto._request = /*#__PURE__*/function () {\n    var _request2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n      var _ref2$endpoint, endpoint, _ref2$body, body, _ref2$method, method;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref2$endpoint = _ref2.endpoint, endpoint = _ref2$endpoint === void 0 ? '' : _ref2$endpoint, _ref2$body = _ref2.body, body = _ref2$body === void 0 ? null : _ref2$body, _ref2$method = _ref2.method, method = _ref2$method === void 0 ? 'GET' : _ref2$method;\n\n              if (!(method == 'GET')) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 4;\n              return this._instance.get(\"\" + endpoint).then(function (_ref3) {\n                var data = _ref3.data;\n                return data;\n              })[\"catch\"](function (error) {\n                throw error;\n              });\n\n            case 4:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 5:\n              if (!(method == 'POST')) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 8;\n              return this._instance.post(\"\" + endpoint, body).then(function (_ref4) {\n                var data = _ref4.data;\n                return data;\n              })[\"catch\"](function (error) {\n                throw error;\n              });\n\n            case 8:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function _request(_x2) {\n      return _request2.apply(this, arguments);\n    }\n\n    return _request;\n  }();\n\n  _proto.addressesAddressUtxos = /*#__PURE__*/function () {\n    var _addressesAddressUtxos = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref5) {\n      var address, _ref5$page, page, _ref5$limit, limit;\n\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              address = _ref5.address, _ref5$page = _ref5.page, page = _ref5$page === void 0 ? 1 : _ref5$page, _ref5$limit = _ref5.limit, limit = _ref5$limit === void 0 ? 100 : _ref5$limit;\n              _context3.next = 3;\n              return this._request({\n                endpoint: \"/addresses/\" + address + \"/utxos?page=\" + page + \"&count=\" + limit\n              });\n\n            case 3:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function addressesAddressUtxos(_x3) {\n      return _addressesAddressUtxos.apply(this, arguments);\n    }\n\n    return addressesAddressUtxos;\n  }();\n\n  _proto.addressesAddressUtxosAsset = /*#__PURE__*/function () {\n    var _addressesAddressUtxosAsset = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref6) {\n      var address, asset;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              address = _ref6.address, asset = _ref6.asset;\n              _context4.next = 3;\n              return this._request({\n                endpoint: \"/addresses/\" + address + \"/utxos/\" + asset\n              });\n\n            case 3:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function addressesAddressUtxosAsset(_x4) {\n      return _addressesAddressUtxosAsset.apply(this, arguments);\n    }\n\n    return addressesAddressUtxosAsset;\n  }()\n  /**\r\n   * Information about a specific asset\r\n   * @param asset Concatenation of the policy_id and hex-encoded asset_name\r\n   * @returns asset\r\n   */\n  ;\n\n  _proto.assetSpecificAsset =\n  /*#__PURE__*/\n  function () {\n    var _assetSpecificAsset = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(_ref7) {\n      var asset;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              asset = _ref7.asset;\n              _context5.next = 3;\n              return this._request({\n                endpoint: \"/assets/\" + asset\n              });\n\n            case 3:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function assetSpecificAsset(_x5) {\n      return _assetSpecificAsset.apply(this, arguments);\n    }\n\n    return assetSpecificAsset;\n  }()\n  /**\r\n   * Return the transactions within the latest block.\r\n   * @returns\r\n   */\n  ;\n\n  _proto.blockLatestBlock =\n  /*#__PURE__*/\n  function () {\n    var _blockLatestBlock = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this._request({\n                endpoint: '/blocks/latest'\n              });\n\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function blockLatestBlock() {\n      return _blockLatestBlock.apply(this, arguments);\n    }\n\n    return blockLatestBlock;\n  }()\n  /**\r\n   * Return the protocol parameters for the latest epoch.\r\n   * @returns\r\n   */\n  ;\n\n  _proto.epochsLatestEpochProtocolParameters =\n  /*#__PURE__*/\n  function () {\n    var _epochsLatestEpochProtocolParameters = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this._request({\n                endpoint: '/epochs/latest/parameters'\n              });\n\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function epochsLatestEpochProtocolParameters() {\n      return _epochsLatestEpochProtocolParameters.apply(this, arguments);\n    }\n\n    return epochsLatestEpochProtocolParameters;\n  }();\n\n  _proto.transactionsSpecificTransaction = /*#__PURE__*/function () {\n    var _transactionsSpecificTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(_ref8) {\n      var hash;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              hash = _ref8.hash;\n              _context8.next = 3;\n              return this._request({\n                endpoint: \"/txs/\" + hash\n              });\n\n            case 3:\n              return _context8.abrupt(\"return\", _context8.sent);\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function transactionsSpecificTransaction(_x6) {\n      return _transactionsSpecificTransaction.apply(this, arguments);\n    }\n\n    return transactionsSpecificTransaction;\n  }();\n\n  _proto.transactionsTransactionUTXOs = /*#__PURE__*/function () {\n    var _transactionsTransactionUTXOs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(_ref9) {\n      var hash;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              hash = _ref9.hash;\n              _context9.next = 3;\n              return this._request({\n                endpoint: \"/txs/\" + hash + \"/utxos\"\n              });\n\n            case 3:\n              return _context9.abrupt(\"return\", _context9.sent);\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function transactionsTransactionUTXOs(_x7) {\n      return _transactionsTransactionUTXOs.apply(this, arguments);\n    }\n\n    return transactionsTransactionUTXOs;\n  }();\n\n  return Blockfrost;\n}();\n\nvar _excluded = [\"default\"];\n\nvar importCSL = /*#__PURE__*/function () {\n  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof window !== 'undefined')) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return __webpack_require__.e(/*! import() */ \"node_modules_emurgo_cardano-serialization-lib-browser_cardano_serialization_lib_js\").then(__webpack_require__.bind(__webpack_require__, /*! @emurgo/cardano-serialization-lib-browser */ \"./node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib.js\"));\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n            _context.next = 8;\n            return Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @emurgo/cardano-serialization-lib-nodejs */ \"@emurgo/cardano-serialization-lib-nodejs\", 19));\n\n          case 8:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function importCSL() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar resolveImport = /*#__PURE__*/function () {\n  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _yield$importCSL, rest;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return importCSL();\n\n          case 3:\n            _yield$importCSL = _context2.sent;\n            rest = _objectWithoutPropertiesLoose(_yield$importCSL, _excluded);\n            return _context2.abrupt(\"return\", rest);\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error('An error occurred when importing the Cardano Serialization Lib module.');\n            throw _context2.t0;\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 9]]);\n  }));\n\n  return function resolveImport() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar csl = await /*#__PURE__*/resolveImport();\n\nvar fromHex = function fromHex(hex) {\n  return Buffer.from(hex, 'hex');\n};\nvar toHex = function toHex(bytes) {\n  return Buffer.from(bytes).toString('hex');\n};\nvar toLovelace = function toLovelace(ada) {\n  return ada * 1000000;\n};\nvar fromFloat = function fromFloat(_float) {\n  var parts = _float.split('.');\n\n  var numerator = \"\" + parseInt(parts[1], 10);\n  var denominator = '1' + '0'.repeat(parts[1].length);\n  return {\n    numerator: numerator,\n    denominator: denominator\n  };\n};\nvar HexToAscii = function HexToAscii(string) {\n  return fromHex(string).toString('ascii');\n};\nvar assetsToValue = function assetsToValue(assets) {\n  var multiAsset = csl.MultiAsset[\"new\"]();\n  var lovelace = assets['lovelace'];\n  var units = Object.keys(assets);\n  var policies = Array.from(new Set(units.filter(function (unit) {\n    return unit !== 'lovelace';\n  }).map(function (unit) {\n    return unit.slice(0, 56);\n  })));\n  policies.forEach(function (policy) {\n    var policyUnits = units.filter(function (unit) {\n      return unit.slice(0, 56) === policy;\n    });\n    var assetsValue = csl.Assets[\"new\"]();\n    policyUnits.forEach(function (unit) {\n      assetsValue.insert(csl.AssetName[\"new\"](fromHex(unit.slice(56))), csl.BigNum.from_str(assets[unit].toString()));\n    });\n    multiAsset.insert(csl.ScriptHash.from_bytes(fromHex(policy)), assetsValue);\n  });\n  var value = csl.Value[\"new\"](csl.BigNum.from_str(lovelace ? lovelace.toString() : '0'));\n  if (units.length > 1 || !lovelace) value.set_multiasset(multiAsset);\n  return value;\n};\nvar StringToAddress = function StringToAddress(string) {\n  return csl.Address.from_bech32(string);\n};\nvar valueToAssets = function valueToAssets(value) {\n  var assets = [];\n  assets.push({\n    unit: 'lovelace',\n    quantity: value.coin().to_str()\n  });\n\n  if (value.multiasset()) {\n    var multiAssets = value.multiasset().keys();\n\n    for (var j = 0; j < multiAssets.len(); j++) {\n      var policy = multiAssets.get(j);\n      var policyAssets = value.multiasset().get(policy);\n      var assetNames = policyAssets.keys();\n\n      for (var k = 0; k < assetNames.len(); k++) {\n        var policyAsset = assetNames.get(k);\n        var quantity = policyAssets.get(policyAsset);\n        var asset = toHex(policy.to_bytes()) + toHex(policyAsset.name());\n        assets.push({\n          unit: asset,\n          quantity: quantity.to_str()\n        });\n      }\n    }\n  }\n\n  return assets;\n};\nvar getAddressKeyHashHex = function getAddressKeyHashHex(address) {\n  var _csl$BaseAddress$from, _csl$BaseAddress$from2;\n\n  var addr = (_csl$BaseAddress$from = csl.BaseAddress.from_address(csl.Address.from_bech32(address))) == null ? void 0 : (_csl$BaseAddress$from2 = _csl$BaseAddress$from.payment_cred().to_keyhash()) == null ? void 0 : _csl$BaseAddress$from2.to_bytes();\n  if (addr) return toHex(addr);\n  return null;\n};\nvar getAddressKeyHash = function getAddressKeyHash(address) {\n  var _csl$BaseAddress$from3;\n\n  return (_csl$BaseAddress$from3 = csl.BaseAddress.from_address(csl.Address.from_bech32(address))) == null ? void 0 : _csl$BaseAddress$from3.payment_cred().to_keyhash();\n};\nvar plutusDataToHex = function plutusDataToHex(datum) {\n  return toHex(csl.hash_plutus_data(datum).to_bytes());\n};\n\nvar MIN_ADA_REQUIRED_WITH_ASSETS = 2000000;\nvar IPFS_PROVIDER = 'https://infura-ipfs.io/ipfs/';\nvar MakeTxError = {\n  NotEnoughLovelaceInput: 'Not enough lovelace to complete this transaction.',\n  NotEnoughAssetsInput: 'Not enough assets in the inputs to complete this transaction.',\n  InputNotEqualOutput: 'Input not equal to output',\n  LovelaceTooLittle: 'Lovelace must be greater than 1000000',\n  NoRecipientsAddress: 'Missing recipient address'\n};\n\nvar convertMetadataPropToString = function convertMetadataPropToString(src) {\n  if (typeof src === 'string') return src;else if (Array.isArray(src)) return src.join('');\n  return null;\n};\nvar linkToSrc = function linkToSrc(link, base64) {\n  if (base64 === void 0) {\n    base64 = false;\n  }\n\n  var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n  if (link.startsWith('https://')) return link;else if (link.startsWith('ipfs://')) return \"\" + IPFS_PROVIDER + link.split('ipfs://')[1].split('ipfs/').slice(-1)[0]; // IPFS_PROVIDER +\n  // '/' +\n  // link.split('ipfs://')[1].split('ipfs/').slice(-1)[0]\n  else if (link.startsWith('Qm') && link.length === 46 || link.startsWith('baf') && link.length === 59) {\n    // return IPFS_PROVIDER + '/' + link;\n    return \"\" + IPFS_PROVIDER + link;\n  } else if (base64 && base64regex.test(link)) return 'data:image/png;base64,' + link;else if (link.startsWith('data:image')) return link;\n  return null;\n};\n\nvar Wallet = /*#__PURE__*/function () {\n  function Wallet(_ref) {\n    var blockfrost = _ref.blockfrost;\n\n    this._init();\n\n    this._blockfrost = blockfrost;\n  }\n\n  var _proto = Wallet.prototype;\n\n  _proto._init = /*#__PURE__*/function () {\n    var _init2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function _init() {\n      return _init2.apply(this, arguments);\n    }\n\n    return _init;\n  }();\n\n  _proto._showDepreciating = function _showDepreciating() {\n    console.log(\"Depreciating.\");\n  }\n  /**\r\n   * Enable and connect wallet\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * let connected = await Mesh.enableWallet({ walletName: 'ccvault' });\r\n   * ```\r\n   *\r\n   * @param walletName - Available wallets are `ccvault`, `gerowallet` and `nami`\r\n   * @returns - True if wallet is connected\r\n   */\n  ;\n\n  _proto.enable =\n  /*#__PURE__*/\n  function () {\n    var _enable = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n      var walletName, _window$cardano, _window$cardano$ccvau, instance, _window$cardano2, _window$cardano2$gero, _instance, _window$cardano3, _window$cardano3$nami, _instance2;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              walletName = _ref2.walletName;\n\n              this._showDepreciating();\n\n              if (!(walletName === 'ccvault')) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 5;\n              return (_window$cardano = window.cardano) == null ? void 0 : (_window$cardano$ccvau = _window$cardano.ccvault) == null ? void 0 : _window$cardano$ccvau.enable();\n\n            case 5:\n              instance = _context2.sent;\n\n              if (!instance) {\n                _context2.next = 9;\n                break;\n              }\n\n              this._provider = instance;\n              return _context2.abrupt(\"return\", true);\n\n            case 9:\n              _context2.next = 27;\n              break;\n\n            case 11:\n              if (!(walletName === 'gerowallet')) {\n                _context2.next = 20;\n                break;\n              }\n\n              _context2.next = 14;\n              return (_window$cardano2 = window.cardano) == null ? void 0 : (_window$cardano2$gero = _window$cardano2.gerowallet) == null ? void 0 : _window$cardano2$gero.enable();\n\n            case 14:\n              _instance = _context2.sent;\n\n              if (!_instance) {\n                _context2.next = 18;\n                break;\n              }\n\n              this._provider = _instance;\n              return _context2.abrupt(\"return\", true);\n\n            case 18:\n              _context2.next = 27;\n              break;\n\n            case 20:\n              if (!(walletName === 'nami' || walletName === null)) {\n                _context2.next = 27;\n                break;\n              }\n\n              _context2.next = 23;\n              return (_window$cardano3 = window.cardano) == null ? void 0 : (_window$cardano3$nami = _window$cardano3.nami) == null ? void 0 : _window$cardano3$nami.enable();\n\n            case 23:\n              _instance2 = _context2.sent;\n\n              if (!_instance2) {\n                _context2.next = 27;\n                break;\n              }\n\n              this._provider = _instance2;\n              return _context2.abrupt(\"return\", true);\n\n            case 27:\n              return _context2.abrupt(\"return\", false);\n\n            case 28:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function enable(_x) {\n      return _enable.apply(this, arguments);\n    }\n\n    return enable;\n  }();\n\n  _proto.isEnabled = /*#__PURE__*/function () {\n    var _isEnabled = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this._provider !== undefined);\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function isEnabled() {\n      return _isEnabled.apply(this, arguments);\n    }\n\n    return isEnabled;\n  }()\n  /**\r\n   * Returns the network id of the currently connected account. 0 is testnet and 1 is mainnet but other networks can possibly be returned by wallets. Those other network ID values are not governed by this document.\r\n   * @returns 0 is testnet and 1 is mainnet\r\n   */\n  ;\n\n  _proto.getNetworkId =\n  /*#__PURE__*/\n  function () {\n    var _getNetworkId = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this._provider.getNetworkId();\n\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getNetworkId() {\n      return _getNetworkId.apply(this, arguments);\n    }\n\n    return getNetworkId;\n  }()\n  /**\r\n   * return a list of all UTXOs (unspent transaction outputs) controlled by the wallet\r\n   * @returns list of all UTXOs\r\n   */\n  // async getUtxos(options?: { returnAssets?: boolean }): Promise<any> {\n  //   let utxos = await this._provider.getUtxos();\n  //   if (options?.returnAssets && options.returnAssets) {\n  //     if (utxos === undefined) {\n  //       throw 'No utxos';\n  //     }\n  //     let utxosAssets: {}[] = [];\n  //     // TODO, lets get UTXOs like this as default https://docs.blockfrost.io/#tag/Cardano-Addresses/paths/~1addresses~1{address}~1utxos/get\n  //     utxos.map((u) => {\n  //       let thisUtxo: {\n  //         cbor: string; // TODO name `cbor` ok?\n  //         assets: { [assetId: string]: number };\n  //         paymentAddr: string;\n  //         txHash: string; // TODO to get?\n  //         outputIndex: number; // TODO to get?\n  //         dataHash?;\n  //       } = {\n  //         cbor: u,\n  //         assets: {},\n  //         paymentAddr: '',\n  //         txHash: '',\n  //         outputIndex: 0,\n  //       };\n  //       const utxo = csl.TransactionUnspentOutput.from_bytes(\n  //         Buffer.from(u, 'hex')\n  //       );\n  //       thisUtxo.paymentAddr = utxo.output().address().to_bech32();\n  //       valueToAssets(utxo.output().amount()).forEach((nnn) => {\n  //         const unit = nnn.unit;\n  //         const _policy = unit.slice(0, 56);\n  //         const _name = HexToAscii(unit.slice(56));\n  //         const assetId =\n  //           _policy == 'lovelace' ? 'lovelace' : `${_policy}.${_name}`;\n  //         thisUtxo.assets[assetId] = parseInt(nnn.quantity);\n  //       });\n  //       utxosAssets.push(thisUtxo);\n  //     });\n  //     return utxosAssets;\n  //   }\n  //   return utxos;\n  // }\n  ;\n\n  _proto.getUtxos =\n  /*#__PURE__*/\n  function () {\n    var _getUtxos = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var utxos, utxosAssets;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this._provider.getUtxos();\n\n            case 2:\n              utxos = _context5.sent;\n\n              if (!(utxos === undefined)) {\n                _context5.next = 5;\n                break;\n              }\n\n              throw 'No utxos';\n\n            case 5:\n              utxosAssets = []; // TODO, lets get UTXOs like this as default https://docs.blockfrost.io/#tag/Cardano-Addresses/paths/~1addresses~1{address}~1utxos/get\n\n              utxos.map(function (u) {\n                var thisUtxo = {\n                  cbor: u,\n                  assets: {},\n                  address: '',\n                  txHash: '',\n                  outputIndex: 0\n                };\n                var utxo = csl.TransactionUnspentOutput.from_bytes(Buffer.from(u, 'hex'));\n                thisUtxo.address = utxo.output().address().to_bech32(); // thisUtxo.txHash = utxo.output().data_hash()\n                //   ? toHex(utxo.output().data_hash()!.to_bytes())\n                //   : '';\n\n                valueToAssets(utxo.output().amount()).forEach(function (nnn) {\n                  var unit = nnn.unit;\n\n                  var _policy = unit.slice(0, 56);\n\n                  var _name = HexToAscii(unit.slice(56));\n\n                  var assetId = _policy == 'lovelace' ? 'lovelace' : _policy + \".\" + _name;\n                  thisUtxo.assets[assetId] = parseInt(nnn.quantity);\n                });\n                utxosAssets.push(thisUtxo);\n              });\n              return _context5.abrupt(\"return\", utxosAssets);\n\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getUtxos() {\n      return _getUtxos.apply(this, arguments);\n    }\n\n    return getUtxos;\n  }();\n\n  _proto.getBalance = /*#__PURE__*/function () {\n    var _getBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this._provider.getBalance();\n\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function getBalance() {\n      return _getBalance.apply(this, arguments);\n    }\n\n    return getBalance;\n  }()\n  /**\r\n   * Returns a list of all used (included in some on-chain transaction) addresses controlled by the wallet.\r\n   * @returns list of bech32 addresses\r\n   */\n  ;\n\n  _proto.getUsedAddresses =\n  /*#__PURE__*/\n  function () {\n    var _getUsedAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n      var usedAddresses;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this._provider.getUsedAddresses();\n\n            case 2:\n              usedAddresses = _context7.sent;\n              return _context7.abrupt(\"return\", usedAddresses.map(function (address) {\n                return csl.Address.from_bytes(fromHex(address)).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function getUsedAddresses() {\n      return _getUsedAddresses.apply(this, arguments);\n    }\n\n    return getUsedAddresses;\n  }();\n\n  _proto.getUnusedAddresses = /*#__PURE__*/function () {\n    var _getUnusedAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n      var unusedAddresses;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this._provider.getUnusedAddresses();\n\n            case 2:\n              unusedAddresses = _context8.sent;\n              return _context8.abrupt(\"return\", unusedAddresses.map(function (address) {\n                return csl.Address.from_bytes(fromHex(address)).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function getUnusedAddresses() {\n      return _getUnusedAddresses.apply(this, arguments);\n    }\n\n    return getUnusedAddresses;\n  }();\n\n  _proto.getChangeAddress = /*#__PURE__*/function () {\n    var _getChangeAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n      var changeAddress;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this._provider.getChangeAddress();\n\n            case 2:\n              changeAddress = _context9.sent;\n              return _context9.abrupt(\"return\", csl.Address.from_bytes(fromHex(changeAddress)).to_bech32());\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function getChangeAddress() {\n      return _getChangeAddress.apply(this, arguments);\n    }\n\n    return getChangeAddress;\n  }();\n\n  _proto.getCollateral = /*#__PURE__*/function () {\n    var _getCollateral = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this._provider.getCollateral();\n\n            case 2:\n              return _context10.abrupt(\"return\", _context10.sent);\n\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function getCollateral() {\n      return _getCollateral.apply(this, arguments);\n    }\n\n    return getCollateral;\n  }()\n  /**\r\n   * Returns the reward addresses owned by the wallet. This can return multiple addresses e.g. CIP-0018.\r\n   * @returns list of reward addresses\r\n   */\n  ;\n\n  _proto.getRewardAddresses =\n  /*#__PURE__*/\n  function () {\n    var _getRewardAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n      var unusedAddresses;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this._provider.getRewardAddresses();\n\n            case 2:\n              unusedAddresses = _context11.sent;\n              return _context11.abrupt(\"return\", unusedAddresses.map(function (address) {\n                return csl.Address.from_bytes(fromHex(address)).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function getRewardAddresses() {\n      return _getRewardAddresses.apply(this, arguments);\n    }\n\n    return getRewardAddresses;\n  }()\n  /**\r\n   * Requests that a user sign the unsigned portions of the supplied transaction. The wallet should ask the user for permission, and if given, try to sign the supplied body and return a signed transaction.\r\n   * @param tx - Transaction in CBOR\r\n   * @param partialSign - True if partial sign for multi-signature\r\n   * @returns signature\r\n   */\n  ;\n\n  _proto.signTx =\n  /*#__PURE__*/\n  function () {\n    var _signTx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(_ref3) {\n      var tx, _ref3$partialSign, partialSign;\n\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              tx = _ref3.tx, _ref3$partialSign = _ref3.partialSign, partialSign = _ref3$partialSign === void 0 ? false : _ref3$partialSign;\n              _context12.next = 3;\n              return this._provider.signTx(tx, partialSign);\n\n            case 3:\n              return _context12.abrupt(\"return\", _context12.sent);\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function signTx(_x2) {\n      return _signTx.apply(this, arguments);\n    }\n\n    return signTx;\n  }()\n  /**\r\n   * This endpoint utilizes the CIP-0008 signing spec for standardization/safety reasons. It allows the dApp to request the user to sign a payload conforming to said spec.\r\n   * @param payload - Nonce string\r\n   * @returns signature\r\n   */\n  ;\n\n  _proto.signData =\n  /*#__PURE__*/\n  function () {\n    var _signData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(_ref4) {\n      var payload, rewardAddress, coseSign1Hex;\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              payload = _ref4.payload;\n              _context13.next = 3;\n              return this.getRewardAddresses();\n\n            case 3:\n              rewardAddress = _context13.sent;\n              _context13.next = 6;\n              return this._provider.signData(rewardAddress[0], payload);\n\n            case 6:\n              coseSign1Hex = _context13.sent;\n              return _context13.abrupt(\"return\", coseSign1Hex);\n\n            case 8:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function signData(_x3) {\n      return _signData.apply(this, arguments);\n    }\n\n    return signData;\n  }();\n\n  _proto.submitTx = /*#__PURE__*/function () {\n    var _submitTx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_ref5) {\n      var tx;\n      return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              tx = _ref5.tx;\n              _context14.next = 3;\n              return this._provider.submitTx(tx);\n\n            case 3:\n              return _context14.abrupt(\"return\", _context14.sent);\n\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function submitTx(_x4) {\n      return _submitTx.apply(this, arguments);\n    }\n\n    return submitTx;\n  }()\n  /**\r\n   * These are helper functions\r\n   */\n\n  /**\r\n   * Get a list wallets installed on this browse\r\n   * @returns a list of available wallets\r\n   */\n  ;\n\n  _proto.getAvailableWallets =\n  /*#__PURE__*/\n  function () {\n    var _getAvailableWallets = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n      var availableWallets;\n      return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              availableWallets = [];\n\n              if (!(window.cardano === undefined)) {\n                _context15.next = 3;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", availableWallets);\n\n            case 3:\n              if (window.cardano.ccvault) {\n                availableWallets.push('ccvault');\n              }\n\n              if (window.cardano.gerowallet) {\n                availableWallets.push('gerowallet');\n              }\n\n              if (window.cardano.nami) {\n                availableWallets.push('nami');\n              }\n\n              return _context15.abrupt(\"return\", availableWallets);\n\n            case 7:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }));\n\n    function getAvailableWallets() {\n      return _getAvailableWallets.apply(this, arguments);\n    }\n\n    return getAvailableWallets;\n  }()\n  /**\r\n   * Return the first used address\r\n   * @returns first address in string\r\n   */\n  ;\n\n  _proto.getWalletAddress =\n  /*#__PURE__*/\n  function () {\n    var _getWalletAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n      return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.getUsedAddresses();\n\n            case 2:\n              return _context16.abrupt(\"return\", _context16.sent[0]);\n\n            case 3:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function getWalletAddress() {\n      return _getWalletAddress.apply(this, arguments);\n    }\n\n    return getWalletAddress;\n  }()\n  /**\r\n   * Return lovelace amount\r\n   * TODO: why get `underflow` error?\r\n   * @returns lovelance\r\n   */\n  ;\n\n  _proto.getLovelace =\n  /*#__PURE__*/\n  function () {\n    var _getLovelace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n      var lovelace, utxos, inputs;\n      return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              lovelace = 0;\n              _context17.next = 3;\n              return this.getUtxos();\n\n            case 3:\n              utxos = _context17.sent;\n\n              if (utxos !== undefined) {\n                // // v1\n                // const parsedUtxos = utxos.map((utxo) =>\n                //   csl.TransactionUnspentOutput.from_bytes(fromHex(utxo.cbor))\n                // );\n                // let countedValue = csl.Value.new(\n                //   csl.BigNum.from_str('0')\n                // );\n                // parsedUtxos.forEach(\n                //   (element: {\n                //     output: () => {\n                //       (): any;\n                //       new (): any;\n                //       amount: { (): Value; new (): any };\n                //     };\n                //   }) => {\n                //     countedValue = countedValue.checked_add(element.output().amount());\n                //   }\n                // );\n                // const minAda = csl.min_ada_required(\n                //   countedValue,\n                //   false,\n                //   csl.BigNum.from_str(MIN_ADA_REQUIRED.toString())\n                // );\n                // const availableAda = countedValue.coin().checked_sub(minAda);\n                // const lovelace = parseInt(availableAda.to_str());\n                // return lovelace;\n                // // v2\n                inputs = utxos.map(function (utxo) {\n                  return csl.TransactionUnspentOutput.from_bytes(Buffer.from(utxo.cbor, 'hex'));\n                });\n                inputs.forEach(function (nn) {\n                  valueToAssets(nn.output().amount()).forEach(function (nnn) {\n                    if (nnn.unit === 'lovelace') {\n                      lovelace += parseInt(nnn.quantity, 10);\n                    }\n                  });\n                });\n              }\n\n              return _context17.abrupt(\"return\", lovelace);\n\n            case 6:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function getLovelace() {\n      return _getLovelace.apply(this, arguments);\n    }\n\n    return getLovelace;\n  }()\n  /**\r\n   * Get a list of assets in connected wallet\r\n   * Note: includeOnchain requires `Mesh.blockfrost.init`\r\n   * @param policyId (optional) if provided will filter only assets in this policy\r\n   * @param includeOnchain (optional) if provided will get on-chain metadata\r\n   * @param limit (optional) if provided will limit the number of (random) assets returned\r\n   * @returns assets - List of asset\r\n   */\n  ;\n\n  _proto.getAssets =\n  /*#__PURE__*/\n  function () {\n    var _getAssets = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(options) {\n      var _this = this;\n\n      var valueCBOR, value, assets, _value$multiasset, multiAssets, j, _value$multiasset2, policy, policyAssets, assetNames, k, policyAsset, quantity, asset, _policy, _name, filteredAssets;\n\n      return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.getBalance();\n\n            case 2:\n              valueCBOR = _context19.sent;\n              value = csl.Value.from_bytes(fromHex(valueCBOR));\n              assets = [];\n\n              if (value.multiasset()) {\n                multiAssets = (_value$multiasset = value.multiasset()) == null ? void 0 : _value$multiasset.keys();\n\n                if (multiAssets) {\n                  for (j = 0; j < multiAssets.len(); j++) {\n                    policy = multiAssets.get(j);\n                    policyAssets = (_value$multiasset2 = value.multiasset()) == null ? void 0 : _value$multiasset2.get(policy);\n                    assetNames = policyAssets == null ? void 0 : policyAssets.keys();\n\n                    if (policyAssets && assetNames) {\n                      for (k = 0; k < assetNames.len(); k++) {\n                        policyAsset = assetNames.get(k);\n                        quantity = policyAssets.get(policyAsset);\n                        asset = toHex(policy.to_bytes()) + toHex(policyAsset.name());\n                        _policy = asset.slice(0, 56);\n                        _name = asset.slice(56);\n                        assets.push({\n                          unit: asset,\n                          quantity: parseInt(quantity.to_str()),\n                          policy: _policy,\n                          name: HexToAscii(_name)\n                        });\n                      }\n                    }\n                  }\n                }\n              } // if `policyId` is provided, return assets in this policy ID\n\n\n              if (options != null && options.policyId && options.policyId && (options == null ? void 0 : options.policyId.length) > 0) {\n                filteredAssets = assets.filter(function (el) {\n                  return el.unit.includes(options.policyId);\n                }).map(function (item) {\n                  return item;\n                });\n                assets = [].concat(filteredAssets);\n              } // if `limit` provided, pick the first `limit` number of assets\n\n\n              if (options != null && options.limit && options.limit > 0) {\n                assets = assets.slice(0, options.limit);\n              } // if blockfrost is loaded and `includeOnchain`, pull on-chain info\n\n\n              if (!(this._blockfrost.isLoaded() && options != null && options.includeOnchain)) {\n                _context19.next = 11;\n                break;\n              }\n\n              _context19.next = 11;\n              return Promise.all(assets.map( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(asset) {\n                  return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n                    while (1) {\n                      switch (_context18.prev = _context18.next) {\n                        case 0:\n                          _context18.next = 2;\n                          return _this._blockfrost.assetSpecificAsset({\n                            asset: asset.unit\n                          });\n\n                        case 2:\n                          asset.onchain = _context18.sent;\n                          asset.image = asset.onchain.onchain_metadata && asset.onchain.onchain_metadata.image && linkToSrc(convertMetadataPropToString(asset.onchain.onchain_metadata.image)) || '';\n\n                        case 4:\n                        case \"end\":\n                          return _context18.stop();\n                      }\n                    }\n                  }, _callee18);\n                }));\n\n                return function (_x6) {\n                  return _ref6.apply(this, arguments);\n                };\n              }()));\n\n            case 11:\n              return _context19.abrupt(\"return\", assets);\n\n            case 12:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function getAssets(_x5) {\n      return _getAssets.apply(this, arguments);\n    }\n\n    return getAssets;\n  }();\n\n  _proto.submitTransaction = /*#__PURE__*/function () {\n    var _submitTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(_ref7) {\n      var tx, witnesses, _ref7$metadata, metadata, transaction, txWitnesses, txVkeys, txScripts, totalVkeys, totalScripts, _iterator, _step, witness, addWitnesses, addVkeys, _i2, i, _i, totalWitnesses, aux, generalMetadata, signedTx, txHash;\n\n      return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              tx = _ref7.tx, witnesses = _ref7.witnesses, _ref7$metadata = _ref7.metadata, metadata = _ref7$metadata === void 0 ? undefined : _ref7$metadata;\n              transaction = csl.Transaction.from_bytes(Buffer.from(tx, 'hex'));\n              txWitnesses = transaction.witness_set();\n              txVkeys = txWitnesses.vkeys();\n              txScripts = txWitnesses.native_scripts();\n              totalVkeys = csl.Vkeywitnesses[\"new\"]();\n              totalScripts = csl.NativeScripts[\"new\"]();\n\n              for (_iterator = _createForOfIteratorHelperLoose(witnesses); !(_step = _iterator()).done;) {\n                witness = _step.value;\n                addWitnesses = csl.TransactionWitnessSet.from_bytes(Buffer.from(witness, 'hex'));\n                addVkeys = addWitnesses.vkeys();\n\n                if (addVkeys) {\n                  for (_i2 = 0; _i2 < addVkeys.len(); _i2++) {\n                    totalVkeys.add(addVkeys.get(_i2));\n                  }\n                }\n              }\n\n              if (txVkeys) {\n                for (i = 0; i < txVkeys.len(); i++) {\n                  totalVkeys.add(txVkeys.get(i));\n                }\n              }\n\n              if (txScripts) {\n                for (_i = 0; _i < txScripts.len(); _i++) {\n                  totalScripts.add(txScripts.get(_i));\n                }\n              }\n\n              totalWitnesses = csl.TransactionWitnessSet[\"new\"]();\n              totalWitnesses.set_vkeys(totalVkeys);\n              totalWitnesses.set_native_scripts(totalScripts);\n\n              if (metadata) {\n                aux = csl.AuxiliaryData[\"new\"]();\n                generalMetadata = csl.GeneralTransactionMetadata[\"new\"]();\n                Object.entries(metadata).map(function (_ref8) {\n                  var MetadataLabel = _ref8[0],\n                      Metadata = _ref8[1];\n                  generalMetadata.insert(csl.BigNum.from_str(MetadataLabel), csl.encode_json_str_to_metadatum(JSON.stringify(Metadata), 0));\n                });\n                aux.set_metadata(generalMetadata);\n              } else {\n                aux = transaction.auxiliary_data();\n              }\n\n              _context20.prev = 14;\n              _context20.next = 17;\n              return csl.Transaction[\"new\"](transaction.body(), totalWitnesses, aux);\n\n            case 17:\n              signedTx = _context20.sent;\n              _context20.next = 20;\n              return this.submitTx({\n                tx: toHex(signedTx.to_bytes())\n              });\n\n            case 20:\n              txHash = _context20.sent;\n              return _context20.abrupt(\"return\", txHash);\n\n            case 24:\n              _context20.prev = 24;\n              _context20.t0 = _context20[\"catch\"](14);\n              throw _context20.t0;\n\n            case 27:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this, [[14, 24]]);\n    }));\n\n    function submitTransaction(_x7) {\n      return _submitTransaction.apply(this, arguments);\n    }\n\n    return submitTransaction;\n  }();\n\n  return Wallet;\n}();\n\nvar Transaction = /*#__PURE__*/function () {\n  function Transaction(_ref) {\n    var wallet = _ref.wallet;\n\n    this._createTxOutput = function (_ref2) {\n      var address = _ref2.address,\n          value = _ref2.value,\n          datum = _ref2.datum;\n      var output;\n\n      if (datum) {\n        output = csl.TransactionOutputBuilder[\"new\"]().with_address(address).with_plutus_data(datum).with_data_hash(csl.hash_plutus_data(datum)).next().with_value(value).build();\n      } else {\n        output = csl.TransactionOutputBuilder[\"new\"]().with_address(address).next().with_value(value).build();\n      }\n\n      return output;\n    };\n\n    this.createTxUnspentOutput = function (address, utxo) {\n      var amount = {};\n\n      for (var i = 0; i < utxo.amount.length; i++) {\n        var thisAsset = utxo.amount[i];\n        amount[thisAsset.unit] = thisAsset.quantity;\n      }\n\n      try {\n        return csl.TransactionUnspentOutput[\"new\"](csl.TransactionInput[\"new\"](csl.TransactionHash.from_bytes(fromHex(utxo.tx_hash)), utxo.output_index), csl.TransactionOutput[\"new\"](address, assetsToValue(amount)));\n      } catch (error) {\n        console.error(\"Unexpected error in createTxUnspentOutput. [Message: \" + error + \"]\");\n        throw error;\n      }\n    };\n\n    this.wallet = wallet;\n    this._blockfrost = new Blockfrost();\n  }\n\n  var _proto = Transaction.prototype;\n\n  _proto._getTxBuilderConfig = /*#__PURE__*/function () {\n    var _getTxBuilderConfig2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _fromFloat, price_mem_numerator, price_mem_denominator, _fromFloat2, price_step_numerator, price_step_denominator, txBuilderConfig;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this._blockfrost.epochsLatestEpochProtocolParameters();\n\n            case 2:\n              this.protocolParameters = _context.sent;\n              _fromFloat = fromFloat(this.protocolParameters.price_mem.toString()), price_mem_numerator = _fromFloat.numerator, price_mem_denominator = _fromFloat.denominator;\n              _fromFloat2 = fromFloat(this.protocolParameters.price_step.toString()), price_step_numerator = _fromFloat2.numerator, price_step_denominator = _fromFloat2.denominator;\n              txBuilderConfig = csl.TransactionBuilderConfigBuilder[\"new\"]().coins_per_utxo_byte(csl.BigNum.from_str(this.protocolParameters.coins_per_utxo_word)).fee_algo(csl.LinearFee[\"new\"](csl.BigNum.from_str(this.protocolParameters.min_fee_a.toString()), csl.BigNum.from_str(this.protocolParameters.min_fee_b.toString()))).key_deposit(csl.BigNum.from_str(this.protocolParameters.key_deposit)).pool_deposit(csl.BigNum.from_str(this.protocolParameters.pool_deposit)).max_tx_size(this.protocolParameters.max_tx_size).max_value_size(parseInt(this.protocolParameters.max_val_size)).ex_unit_prices(csl.ExUnitPrices[\"new\"](csl.UnitInterval[\"new\"](csl.BigNum.from_str(price_mem_numerator), csl.BigNum.from_str(price_mem_denominator)), csl.UnitInterval[\"new\"](csl.BigNum.from_str(price_step_numerator), csl.BigNum.from_str(price_step_denominator)))).build();\n              return _context.abrupt(\"return\", txBuilderConfig);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function _getTxBuilderConfig() {\n      return _getTxBuilderConfig2.apply(this, arguments);\n    }\n\n    return _getTxBuilderConfig;\n  }();\n\n  _proto._buildTransaction = /*#__PURE__*/function () {\n    var _buildTransaction2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n      var txBuilder, txBody, witnesses, transaction, transactionBytes, transactionHex;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              txBuilder = _ref3.txBuilder;\n              txBody = txBuilder.build();\n              witnesses = csl.TransactionWitnessSet[\"new\"]();\n              transaction = csl.Transaction[\"new\"](txBody, witnesses);\n              transactionBytes = transaction.to_bytes();\n              transactionHex = toHex(transactionBytes);\n              return _context2.abrupt(\"return\", transactionHex);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function _buildTransaction(_x) {\n      return _buildTransaction2.apply(this, arguments);\n    }\n\n    return _buildTransaction;\n  }();\n\n  _proto._addChange = /*#__PURE__*/function () {\n    var _addChange2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref4) {\n      var txBuilder, changeAddress;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              txBuilder = _ref4.txBuilder, changeAddress = _ref4.changeAddress;\n\n              if (!(changeAddress == undefined)) {\n                _context3.next = 5;\n                break;\n              }\n\n              _context3.next = 4;\n              return this.wallet.getWalletAddress();\n\n            case 4:\n              changeAddress = _context3.sent;\n\n            case 5:\n              txBuilder.add_change_if_needed(StringToAddress(changeAddress));\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function _addChange(_x2) {\n      return _addChange2.apply(this, arguments);\n    }\n\n    return _addChange;\n  }();\n\n  _proto._addMetadata = /*#__PURE__*/function () {\n    var _addMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref5) {\n      var txBuilder, metadata, auxData, generalMetadata;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              txBuilder = _ref5.txBuilder, metadata = _ref5.metadata;\n              auxData = csl.AuxiliaryData[\"new\"]();\n              generalMetadata = csl.GeneralTransactionMetadata[\"new\"]();\n              generalMetadata.insert(csl.BigNum.from_str('100'), csl.encode_json_str_to_metadatum(JSON.stringify(metadata), 1));\n              auxData.set_metadata(generalMetadata);\n              txBuilder.set_auxiliary_data(auxData);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function _addMetadata(_x3) {\n      return _addMetadata2.apply(this, arguments);\n    }\n\n    return _addMetadata;\n  }() // helper function to sort the 2nd item in array\n  ;\n\n  _proto._sortDescendingArray = function _sortDescendingArray(array) {\n    array.sort(function (i, j) {\n      return j[1] - i[1];\n    });\n  };\n\n  _proto._selectUtxosForLovelace = function _selectUtxosForLovelace(_ref6) {\n    var utxosContainLovelaceArray = _ref6.utxosContainLovelaceArray,\n        remainingLovelace = _ref6.remainingLovelace;\n    var chosenUtxoCborStringList = [];\n\n    this._sortDescendingArray(utxosContainLovelaceArray);\n\n    for (var _iterator = _createForOfIteratorHelperLoose(utxosContainLovelaceArray), _step; !(_step = _iterator()).done;) {\n      var u = _step.value;\n      var cbor = u[0];\n      var amountLovelace = u[1];\n      chosenUtxoCborStringList.push(cbor);\n      remainingLovelace -= amountLovelace;\n\n      if (remainingLovelace < 0) {\n        break;\n      }\n    }\n\n    return {\n      chosenUtxoCborStringList: chosenUtxoCborStringList,\n      remainingLovelace: remainingLovelace\n    };\n  }\n  /**\r\n   * todos:\r\n   * get enough lovelace for fees, instead of hardcoded\r\n   * get enough lovelace for attached assets, instead of hardcoded\r\n   * improve: lets try to find the largest lovelace/asset utxo just enough to fulfill tx, instead of picking the largest\r\n   */\n  ;\n\n  _proto.selectUtxoInputs =\n  /*#__PURE__*/\n  function () {\n    var _selectUtxoInputs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(_ref7) {\n      var _this = this;\n\n      var outputs, _debug, chosenUtxoCborStringList, remainingLovelace, remainingAssets, utxoDictByCborKeys, utxos, _iterator2, _step2, output, _assetId2, _iterator3, _step3, utxo, _loop, assetId, _assetId, utxosContainLovelace, selectedLovelaceUtxos, _utxosContainLovelace;\n\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              outputs = _ref7.outputs;\n              _debug = false;\n              chosenUtxoCborStringList = []; // to return and to stop repeated utxo selected\n\n              remainingLovelace = 0; // to track lovelace\n\n              remainingAssets = {}; // to track assets\n\n              utxoDictByCborKeys = {}; // for quick look up\n\n              /**\r\n               * 1. prepare\r\n               */\n\n              _context5.next = 8;\n              return this.wallet.getUtxos();\n\n            case 8:\n              utxos = _context5.sent;\n\n              for (_iterator2 = _createForOfIteratorHelperLoose(outputs); !(_step2 = _iterator2()).done;) {\n                output = _step2.value;\n\n                for (_assetId2 in output.assets) {\n                  if (_assetId2 === 'lovelace') {\n                    remainingLovelace += output.assets[_assetId2];\n                  } else {\n                    if (!(_assetId2 in remainingAssets)) {\n                      remainingAssets[_assetId2] = 0;\n                    }\n\n                    remainingAssets[_assetId2] += output.assets[_assetId2];\n                    remainingLovelace += toLovelace(2); // todo: attached ADA for assets is hardcoded\n                  }\n                }\n              }\n\n              for (_iterator3 = _createForOfIteratorHelperLoose(utxos); !(_step3 = _iterator3()).done;) {\n                utxo = _step3.value;\n                utxoDictByCborKeys[utxo.cbor] = utxo;\n              }\n\n              remainingLovelace += toLovelace(1); // todo: hardcoded for fees\n\n              if (_debug) {\n                console.log('utxos', utxos);\n                console.log('assets requirements', remainingLovelace, remainingAssets);\n              }\n              /**\r\n               * 2. add assets UTXOs\r\n               */\n              // 2a. for each assets in remainingAssets, lets look for their utxos\n\n\n              _loop = function _loop(assetId) {\n                if (remainingAssets[assetId] > 0) {\n                  var utxosContainAsset = utxos.filter(function (utxo) {\n                    return !chosenUtxoCborStringList.includes(utxo.cbor) && assetId in utxo.assets;\n                  }).map(function (utxo) {\n                    return [utxo.cbor, utxo.assets[assetId], utxo];\n                  });\n\n                  _this._sortDescendingArray(utxosContainAsset);\n\n                  for (var _iterator4 = _createForOfIteratorHelperLoose(utxosContainAsset), _step4; !(_step4 = _iterator4()).done;) {\n                    var u = _step4.value;\n                    var cbor = u[0];\n                    var quantity = u[1];\n                    var _utxo = u[2];\n                    remainingAssets[assetId] -= quantity;\n                    chosenUtxoCborStringList.push(cbor);\n                    remainingLovelace -= _utxo.assets.lovelace;\n\n                    if (remainingAssets[assetId] <= 0) {\n                      break;\n                    }\n                  }\n                }\n              };\n\n              for (assetId in remainingAssets) {\n                _loop(assetId);\n              }\n\n              if (_debug) {\n                console.log('-------');\n                console.log('after assets selection', utxos.filter(function (utxo) {\n                  return chosenUtxoCborStringList.includes(utxo.cbor);\n                }));\n                console.log('assets remaining', remainingLovelace, remainingAssets);\n              } // 2b. if not enough to fulfill remainingAssets, throw error\n\n\n              _context5.t0 = _regeneratorRuntime().keys(remainingAssets);\n\n            case 17:\n              if ((_context5.t1 = _context5.t0()).done) {\n                _context5.next = 23;\n                break;\n              }\n\n              _assetId = _context5.t1.value;\n\n              if (!(remainingAssets[_assetId] > 0)) {\n                _context5.next = 21;\n                break;\n              }\n\n              throw MakeTxError.NotEnoughAssetsInput;\n\n            case 21:\n              _context5.next = 17;\n              break;\n\n            case 23:\n              if (!(remainingLovelace > 0)) {\n                _context5.next = 32;\n                break;\n              }\n\n              // 3a. lets try to find utxos that has only lovelace\n              utxosContainLovelace = utxos.filter(function (utxo) {\n                return !chosenUtxoCborStringList.includes(utxo.cbor) && Object.keys(utxo.assets).length === 1;\n              }).map(function (utxo) {\n                return [utxo.cbor, utxo.assets.lovelace];\n              });\n              selectedLovelaceUtxos = this._selectUtxosForLovelace({\n                utxosContainLovelaceArray: utxosContainLovelace,\n                remainingLovelace: remainingLovelace\n              });\n\n              if (_debug) {\n                console.log('-------');\n                console.log('after lovelace selection step 1', utxos.filter(function (utxo) {\n                  return selectedLovelaceUtxos.chosenUtxoCborStringList.includes(utxo.cbor);\n                }));\n                console.log('assets remaining', selectedLovelaceUtxos.remainingLovelace);\n              } // 3b. if cant find any or cant find enough lovelace, lets include utxos that also has assets\n\n\n              if (selectedLovelaceUtxos.remainingLovelace > 0) {\n                _utxosContainLovelace = utxos.filter(function (utxo) {\n                  return !chosenUtxoCborStringList.includes(utxo.cbor);\n                }).map(function (utxo) {\n                  return [utxo.cbor, utxo.assets.lovelace];\n                });\n                selectedLovelaceUtxos = this._selectUtxosForLovelace({\n                  utxosContainLovelaceArray: _utxosContainLovelace,\n                  remainingLovelace: remainingLovelace\n                });\n\n                if (_debug) {\n                  console.log('-------');\n                  console.log('after lovelace selection step 2', utxos.filter(function (utxo) {\n                    return selectedLovelaceUtxos.chosenUtxoCborStringList.includes(utxo.cbor);\n                  }));\n                  console.log('assets remaining', selectedLovelaceUtxos.remainingLovelace);\n                }\n              } // 3c. if still not enough lovelace to fulfill tx, throw error\n\n\n              if (!(selectedLovelaceUtxos.remainingLovelace > 0)) {\n                _context5.next = 30;\n                break;\n              }\n\n              throw MakeTxError.NotEnoughLovelaceInput;\n\n            case 30:\n              // 3d. if all is well with lovelace\n              chosenUtxoCborStringList.push.apply(chosenUtxoCborStringList, selectedLovelaceUtxos.chosenUtxoCborStringList);\n              remainingLovelace = selectedLovelaceUtxos.remainingLovelace;\n\n            case 32:\n              if (_debug) {\n                console.log('-------');\n                console.log('final utxos selection', utxos.filter(function (utxo) {\n                  return chosenUtxoCborStringList.includes(utxo.cbor);\n                }));\n                console.log('assets remaining', remainingLovelace, remainingAssets);\n              }\n\n              return _context5.abrupt(\"return\", chosenUtxoCborStringList);\n\n            case 34:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function selectUtxoInputs(_x4) {\n      return _selectUtxoInputs.apply(this, arguments);\n    }\n\n    return selectUtxoInputs;\n  }();\n\n  _proto._addInputUtxo = /*#__PURE__*/function () {\n    var _addInputUtxo2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref8) {\n      var inputs, outputs, txInputsBuilder, utxos;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              inputs = _ref8.inputs, outputs = _ref8.outputs;\n\n              if (!(inputs.length === 0)) {\n                _context6.next = 5;\n                break;\n              }\n\n              _context6.next = 4;\n              return this.selectUtxoInputs({\n                outputs: outputs\n              });\n\n            case 4:\n              inputs = _context6.sent;\n\n            case 5:\n              // end Version 3\n\n              /**\r\n               * from the inputs, create TxInputsBuilder\r\n               */\n              txInputsBuilder = csl.TxInputsBuilder[\"new\"]();\n              utxos = inputs.map(function (utxo) {\n                return csl.TransactionUnspentOutput.from_bytes(Buffer.from(utxo, 'hex'));\n              });\n              utxos.forEach(function (utxo) {\n                txInputsBuilder.add_input(utxo.output().address(), utxo.input(), utxo.output().amount());\n              });\n              return _context6.abrupt(\"return\", txInputsBuilder);\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function _addInputUtxo(_x5) {\n      return _addInputUtxo2.apply(this, arguments);\n    }\n\n    return _addInputUtxo;\n  }();\n\n  _proto._addPlutus = function _addPlutus(_ref9) {\n    _objectDestructuringEmpty(_ref9);\n  };\n\n  _proto._makeMultiAsset = function _makeMultiAsset(assets) {\n    var AssetsMap = {};\n\n    for (var _iterator5 = _createForOfIteratorHelperLoose(assets), _step5; !(_step5 = _iterator5()).done;) {\n      var _asset = _step5.value;\n      var unit = _asset.unit,\n          quantity = _asset.quantity;\n\n      var _unit$split = unit.split('.'),\n          _policy = _unit$split[0],\n          assetName = _unit$split[1];\n\n      if (!Array.isArray(AssetsMap[_policy])) {\n        AssetsMap[_policy] = [];\n      }\n\n      AssetsMap[_policy].push({\n        unit: Buffer.from(assetName, 'ascii').toString('hex'),\n        quantity: quantity\n      });\n    }\n\n    var multiAsset = csl.MultiAsset[\"new\"]();\n\n    for (var policy in AssetsMap) {\n      var ScriptHash = csl.ScriptHash.from_bytes(Buffer.from(policy, 'hex'));\n      var Assets = csl.Assets[\"new\"]();\n      var _assets = AssetsMap[policy];\n\n      for (var _iterator6 = _createForOfIteratorHelperLoose(_assets), _step6; !(_step6 = _iterator6()).done;) {\n        var asset = _step6.value;\n        var AssetName = csl.AssetName[\"new\"](Buffer.from(asset.unit, 'hex'));\n        var BigNum = csl.BigNum.from_str(asset.quantity.toString());\n        Assets.insert(AssetName, BigNum);\n      }\n\n      multiAsset.insert(ScriptHash, Assets);\n    }\n\n    return multiAsset;\n  };\n\n  _proto._addOutputs = /*#__PURE__*/function () {\n    var _addOutputs2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(_ref10) {\n      var _this2 = this;\n\n      var txBuilder, outputs, ownerAddressBech32, datumAssetsList, txOutputs, i;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              txBuilder = _ref10.txBuilder, outputs = _ref10.outputs, ownerAddressBech32 = _ref10.ownerAddressBech32, datumAssetsList = _ref10.datumAssetsList;\n              txOutputs = csl.TransactionOutputs[\"new\"]();\n              outputs.map(function (output) {\n                if (output.address === undefined || output.address.length === 0) {\n                  throw MakeTxError.NoRecipientsAddress;\n                } // add lovelace\n\n\n                var amountLovelace = output.assets.lovelace && output.assets.lovelace > MIN_ADA_REQUIRED_WITH_ASSETS ? output.assets.lovelace : MIN_ADA_REQUIRED_WITH_ASSETS; // TODO, cannot hardcode 2ADA. if too many assets, 2 ADA is not enough\n\n                var outputValue = csl.Value[\"new\"](csl.BigNum.from_str(amountLovelace.toString())); // if have native tokens\n\n                if (Object.keys(output.assets)) {\n                  var assets = [];\n                  Object.keys(output.assets).map( /*#__PURE__*/function () {\n                    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(assetId) {\n                      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                        while (1) {\n                          switch (_context7.prev = _context7.next) {\n                            case 0:\n                              if (assetId !== 'lovelace') {\n                                assets.push({\n                                  unit: assetId,\n                                  quantity: output.assets[assetId]\n                                });\n                              }\n\n                            case 1:\n                            case \"end\":\n                              return _context7.stop();\n                          }\n                        }\n                      }, _callee7);\n                    }));\n\n                    return function (_x7) {\n                      return _ref11.apply(this, arguments);\n                    };\n                  }());\n\n                  var multiAsset = _this2._makeMultiAsset(assets);\n\n                  outputValue.set_multiasset(multiAsset);\n                } // let datumHash: string | null = null;\n\n\n                var datum = null;\n\n                if (datumAssetsList) {\n                  datum = _this2.createDatum({\n                    ownerAddressBech32: ownerAddressBech32,\n                    assets: datumAssetsList\n                  }); // datumHash = plutusDataToHex(datum);\n                }\n\n                var thisOutput = _this2._createTxOutput({\n                  address: StringToAddress(output.address),\n                  value: outputValue,\n                  datum: datum\n                });\n\n                txOutputs.add( // csl.TransactionOutput.new(StringToAddress(output.address), outputValue)\n                thisOutput);\n              });\n\n              for (i = 0; i < txOutputs.len(); i++) {\n                txBuilder.add_output(txOutputs.get(i));\n              }\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function _addOutputs(_x6) {\n      return _addOutputs2.apply(this, arguments);\n    }\n\n    return _addOutputs;\n  }();\n\n  _proto.build = /*#__PURE__*/function () {\n    var _build = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(_ref12) {\n      var _ref12$inputs, inputs, outputs, ttl, changeAddress, metadata, plutusScripts, _ref12$hasDatum, hasDatum, blockfrostApiKey, network, txBuilder, txInputsBuilder, datumAssetsList, _iterator7, _step7, output, transactionHex;\n\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _ref12$inputs = _ref12.inputs, inputs = _ref12$inputs === void 0 ? [] : _ref12$inputs, outputs = _ref12.outputs, ttl = _ref12.ttl, changeAddress = _ref12.changeAddress, metadata = _ref12.metadata, plutusScripts = _ref12.plutusScripts, _ref12$hasDatum = _ref12.hasDatum, hasDatum = _ref12$hasDatum === void 0 ? false : _ref12$hasDatum, blockfrostApiKey = _ref12.blockfrostApiKey, network = _ref12.network;\n              // start: init\n              this._blockfrost = new Blockfrost();\n              _context9.next = 4;\n              return this._blockfrost.init({\n                blockfrostApiKey: blockfrostApiKey,\n                network: network\n              });\n\n            case 4:\n              _context9.t0 = csl.TransactionBuilder;\n              _context9.next = 7;\n              return this._getTxBuilderConfig();\n\n            case 7:\n              _context9.t1 = _context9.sent;\n              txBuilder = _context9.t0[\"new\"].call(_context9.t0, _context9.t1);\n\n              // end: init\n              if (ttl) {\n                txBuilder.set_ttl(ttl);\n              } // add inputs\n\n\n              _context9.next = 12;\n              return this._addInputUtxo({\n                inputs: inputs,\n                outputs: outputs\n              });\n\n            case 12:\n              txInputsBuilder = _context9.sent;\n              // if datum\n              datumAssetsList = null;\n\n              if (hasDatum) {\n                datumAssetsList = [];\n\n                for (_iterator7 = _createForOfIteratorHelperLoose(outputs); !(_step7 = _iterator7()).done;) {\n                  output = _step7.value;\n                  datumAssetsList = [].concat(Object.keys(output.assets));\n                  datumAssetsList = datumAssetsList.filter(function (el) {\n                    return el != 'lovelace';\n                  });\n                }\n\n                console.log('datumAssetsList', datumAssetsList); // [\"ds8dh9s8dhs.Pixel\"]\n              } // add outputs\n\n\n              _context9.t2 = this;\n              _context9.t3 = txBuilder;\n              _context9.t4 = outputs;\n              _context9.next = 20;\n              return this.wallet.getWalletAddress();\n\n            case 20:\n              _context9.t5 = _context9.sent;\n              _context9.t6 = datumAssetsList;\n              _context9.t7 = {\n                txBuilder: _context9.t3,\n                outputs: _context9.t4,\n                ownerAddressBech32: _context9.t5,\n                datumAssetsList: _context9.t6\n              };\n              _context9.next = 25;\n              return _context9.t2._addOutputs.call(_context9.t2, _context9.t7);\n\n            case 25:\n\n\n              if (!metadata) {\n                _context9.next = 29;\n                break;\n              }\n\n              _context9.next = 29;\n              return this._addMetadata({\n                txBuilder: txBuilder,\n                metadata: metadata\n              });\n\n            case 29:\n              if (!plutusScripts) {\n                _context9.next = 32;\n                break;\n              }\n\n              _context9.next = 32;\n              return this._addPlutus({});\n\n            case 32:\n              txBuilder.set_inputs(txInputsBuilder); // add change\n\n              _context9.next = 35;\n              return this._addChange({\n                txBuilder: txBuilder,\n                changeAddress: changeAddress\n              });\n\n            case 35:\n              _context9.next = 37;\n              return this._buildTransaction({\n                txBuilder: txBuilder\n              });\n\n            case 37:\n              transactionHex = _context9.sent;\n              return _context9.abrupt(\"return\", transactionHex);\n\n            case 39:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function build(_x8) {\n      return _build.apply(this, arguments);\n    }\n\n    return build;\n  }()\n  /**\r\n   * for smart contract\r\n   * this is for devt only, will need to refactor everything eventually\r\n   */\n  ;\n\n  _proto.finalizeTx =\n  /*#__PURE__*/\n  function () {\n    var _finalizeTx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(_ref13) {\n      var txBuilder, changeAddress;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              txBuilder = _ref13.txBuilder, changeAddress = _ref13.changeAddress;\n              console.log(txBuilder, changeAddress);\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    function finalizeTx(_x9) {\n      return _finalizeTx.apply(this, arguments);\n    }\n\n    return finalizeTx;\n  }();\n\n  _proto.createDatum = function createDatum(_ref14) {\n    var ownerAddressBech32 = _ref14.ownerAddressBech32,\n        assets = _ref14.assets;\n    var fields = csl.PlutusList[\"new\"]();\n\n    for (var _iterator8 = _createForOfIteratorHelperLoose(assets), _step8; !(_step8 = _iterator8()).done;) {\n      var asset = _step8.value;\n      var assetDetails = csl.PlutusList[\"new\"]();\n\n      var _asset$split = asset.split('.'),\n          policy = _asset$split[0],\n          assetName = _asset$split[1];\n\n      assetDetails.add(csl.PlutusData.new_bytes(fromHex(policy)));\n      assetDetails.add(csl.PlutusData.new_bytes(fromHex(toHex(assetName))));\n      fields.add(csl.PlutusData.new_constr_plutus_data(csl.ConstrPlutusData[\"new\"](csl.BigNum.from_str('0'), assetDetails)));\n    }\n\n    var owner = getAddressKeyHashHex(ownerAddressBech32);\n\n    if (owner) {\n      fields.add(csl.PlutusData.new_bytes(fromHex(owner)));\n    }\n\n    var datum = csl.PlutusData.new_constr_plutus_data(csl.ConstrPlutusData[\"new\"](csl.BigNum.from_str('0'), fields));\n    return datum;\n  };\n\n  _proto._addInputUtxoSC = /*#__PURE__*/function () {\n    var _addInputUtxoSC2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(_ref15) {\n      var _this3 = this;\n\n      var scriptAddress, asset, utxosFromBF, utxos, txInputsBuilder;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              scriptAddress = _ref15.scriptAddress, asset = _ref15.asset;\n              _context11.next = 3;\n              return this._blockfrost.addressesAddressUtxosAsset({\n                address: scriptAddress,\n                asset: asset\n              });\n\n            case 3:\n              utxosFromBF = _context11.sent;\n              console.log('utxosFromBF', utxosFromBF);\n              utxos = utxosFromBF.filter(function (utxo) {\n                return utxo.data_hash !== null;\n              }).map(function (utxoBF) {\n                var txoutput = _this3.createTxUnspentOutput(StringToAddress(scriptAddress), utxoBF);\n\n                return txoutput;\n              });\n              txInputsBuilder = csl.TxInputsBuilder[\"new\"](); // utxos.forEach((utxo: any) => {\n              //   txInputsBuilder.add_input(\n              //     utxo.output().address(),\n              //     utxo.input(),\n              //     utxo.output().amount()\n              //   );\n              // });\n\n              txInputsBuilder.add_input(utxos[0].output().address(), utxos[0].input(), utxos[0].output().amount());\n              return _context11.abrupt(\"return\", {\n                txInputsBuilder: txInputsBuilder,\n                utxoselected: utxos[0]\n              });\n\n            case 9:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function _addInputUtxoSC(_x10) {\n      return _addInputUtxoSC2.apply(this, arguments);\n    }\n\n    return _addInputUtxoSC;\n  }() // this is for devt only, will need to refactor everything eventually\n  ;\n\n  _proto.buildSC =\n  /*#__PURE__*/\n  function () {\n    var _buildSC = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(_ref16) {\n      var ownerAddress, scriptAddress, assets, blockfrostApiKey, network, txBuilder, datum, datumHash, outputs, asset, _asset$split2, policy, assetName, _yield$this$_addInput, txInputsBuilder, utxoselected, scriptWitness, transactionHex;\n\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              ownerAddress = _ref16.ownerAddress, scriptAddress = _ref16.scriptAddress, assets = _ref16.assets, blockfrostApiKey = _ref16.blockfrostApiKey, network = _ref16.network;\n              // start: init\n              this._blockfrost = new Blockfrost();\n              _context12.next = 4;\n              return this._blockfrost.init({\n                blockfrostApiKey: blockfrostApiKey,\n                network: network\n              });\n\n            case 4:\n              _context12.t0 = csl.TransactionBuilder;\n              _context12.next = 7;\n              return this._getTxBuilderConfig();\n\n            case 7:\n              _context12.t1 = _context12.sent;\n              txBuilder = _context12.t0[\"new\"].call(_context12.t0, _context12.t1);\n              // end: init\n              // prepare datum\n              datum = this.createDatum({\n                ownerAddressBech32: ownerAddress,\n                assets: assets\n              });\n              datumHash = plutusDataToHex(datum);\n              console.log('datumHash', datumHash); // outputs\n\n              outputs = [{\n                address: ownerAddress,\n                assets: {},\n                datum: datum\n              }];\n              asset = null;\n              assets.map(function (assetId) {\n                outputs[0].assets[assetId] = 1;\n                asset = assetId;\n              });\n              outputs[0].assets['lovelace'] = 3000000;\n              console.log(44, 'outputs', outputs);\n              _context12.next = 19;\n              return this._addOutputs({\n                txBuilder: txBuilder,\n                outputs: outputs\n              });\n\n            case 19:\n              // inputs\n              _asset$split2 = asset.split('.'), policy = _asset$split2[0], assetName = _asset$split2[1];\n              asset = \"\" + policy + toHex(assetName);\n              _context12.next = 23;\n              return this._addInputUtxoSC({\n                scriptAddress: scriptAddress,\n                asset: asset\n              });\n\n            case 23:\n              _yield$this$_addInput = _context12.sent;\n              txInputsBuilder = _yield$this$_addInput.txInputsBuilder;\n              utxoselected = _yield$this$_addInput.utxoselected;\n              console.log(22);\n              scriptWitness = this.getPlutusWitness(csl.PlutusScript[\"new\"](fromHex('4e4d01000033222220051200120011')), datum, this.unlock, utxoselected);\n              console.log(33);\n              txInputsBuilder.add_plutus_script_input(scriptWitness, utxoselected.input(), utxoselected.output().amount());\n              console.log(44);\n              txBuilder.set_inputs(txInputsBuilder);\n              console.log(44); // here to finalizeTx\n\n              txBuilder.calc_script_data_hash(csl.TxBuilderConstants.plutus_vasil_cost_models());\n              console.log(55);\n              _context12.next = 37;\n              return this._addChange({\n                txBuilder: txBuilder,\n                changeAddress: ownerAddress\n              });\n\n            case 37:\n              console.log(66);\n              _context12.next = 40;\n              return this._buildTransaction({\n                txBuilder: txBuilder\n              });\n\n            case 40:\n              transactionHex = _context12.sent;\n              console.log(77);\n              return _context12.abrupt(\"return\", transactionHex);\n\n            case 43:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function buildSC(_x11) {\n      return _buildSC.apply(this, arguments);\n    }\n\n    return buildSC;\n  }();\n\n  _proto.unlock = function unlock(index) {\n    var data = csl.PlutusData.new_constr_plutus_data(csl.ConstrPlutusData[\"new\"](csl.BigNum.from_str('0'), csl.PlutusList[\"new\"]()));\n    var redeemer = csl.Redeemer[\"new\"](csl.RedeemerTag.new_spend(), csl.BigNum.from_str(index), data, csl.ExUnits[\"new\"](csl.BigNum.from_str('7000000'), csl.BigNum.from_str('3000000000')));\n    return redeemer;\n  };\n\n  _proto.setCollateral = function setCollateral(txBuilder, utxos) {\n    var inputBuilder = csl.TxInputsBuilder[\"new\"]();\n    utxos.forEach(function (utxo) {\n      inputBuilder.add_input(utxo.output().address(), utxo.input(), utxo.output().amount());\n    });\n    txBuilder.set_collateral(inputBuilder);\n  };\n\n  _proto.getPlutusWitness = function getPlutusWitness(script, datum, redeemer, utxo) {\n    return csl.PlutusWitness[\"new\"](script, datum, redeemer(utxo.input().index().toString()));\n  };\n\n  _proto.getRequiredSigners = function getRequiredSigners(utxos, scriptInput, collateral) {\n    var inputs = [].concat(utxos, collateral);\n    var addresses = new Set();\n    inputs.forEach(function (utxo) {\n      addresses.add(utxo.output().address().to_bech32());\n    });\n    addresses[\"delete\"](scriptInput.output().address().to_bech32());\n    var requiredSigners = csl.Ed25519KeyHashes[\"new\"]();\n    addresses.forEach(function (address) {\n      var keyHash = getAddressKeyHash(address);\n\n      if (keyHash) {\n        requiredSigners.add(keyHash);\n      }\n    });\n    return requiredSigners;\n  };\n\n  _proto.getCollateral = /*#__PURE__*/function () {\n    var _getCollateral = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n      var collatUtxos, collateral, _iterator9, _step9, x, utxo;\n\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              collatUtxos = [];\n              _context13.next = 3;\n              return this.wallet.getCollateral();\n\n            case 3:\n              collateral = _context13.sent;\n\n              for (_iterator9 = _createForOfIteratorHelperLoose(collateral); !(_step9 = _iterator9()).done;) {\n                x = _step9.value;\n                utxo = csl.TransactionUnspentOutput.from_bytes(Buffer.from(x, 'hex'));\n                collatUtxos.push(utxo);\n              }\n\n              return _context13.abrupt(\"return\", collatUtxos);\n\n            case 6:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function getCollateral() {\n      return _getCollateral.apply(this, arguments);\n    }\n\n    return getCollateral;\n  }();\n\n  _proto.buildSCv2 = /*#__PURE__*/function () {\n    var _buildSCv = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_ref17) {\n      var ownerAddress, scriptAddress, blockfrostApiKey, network, txBuilder, scriptAddressObj, shelleyChangeAddress, assetName, assetNameHex, assetAmountToSend, assetPolicyIdHex, transactionIdLocked, lovelaceLocked, plutusScriptCborHex, transactionIndxLocked, manualFee, multiAsset, assets, scripts, txOutputBuilder, walletUtxos, utxos, transactionUnspentOutputs, txBody, collateral, inputs, datum, datumHash, datums, redeemers, data, redeemer, transactionWitnessSet, cost_model_vals, costModel, costModels, scriptDataHash, baseAddress, requiredSigners, transaction, transactionBytes, transactionHex;\n      return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              ownerAddress = _ref17.ownerAddress, scriptAddress = _ref17.scriptAddress, blockfrostApiKey = _ref17.blockfrostApiKey, network = _ref17.network;\n              // start: init\n              this._blockfrost = new Blockfrost();\n              _context14.next = 4;\n              return this._blockfrost.init({\n                blockfrostApiKey: blockfrostApiKey,\n                network: network\n              });\n\n            case 4:\n              _context14.t0 = csl.TransactionBuilder;\n              _context14.next = 7;\n              return this._getTxBuilderConfig();\n\n            case 7:\n              _context14.t1 = _context14.sent;\n              txBuilder = _context14.t0[\"new\"].call(_context14.t0, _context14.t1);\n              // end: init\n              scriptAddressObj = StringToAddress(scriptAddress);\n              shelleyChangeAddress = StringToAddress(ownerAddress);\n              assetName = 'SOCIETY';\n              assetNameHex = toHex(assetName);\n              assetAmountToSend = 1;\n              assetPolicyIdHex = 'f57f145fb8dd8373daff7cf55cea181669e99c4b73328531ebd4419a';\n              transactionIdLocked = '3c0fc4774e529432b2eaa654720231ad6c6d92ae2a4a7ab2544a93dcfa3c8561';\n              lovelaceLocked = 3000000;\n              plutusScriptCborHex = '4e4d01000033222220051200120011';\n              transactionIndxLocked = 0;\n              manualFee = 900000;\n              multiAsset = csl.MultiAsset[\"new\"]();\n              assets = csl.Assets[\"new\"]();\n              assets.insert(csl.AssetName[\"new\"](Buffer.from(assetNameHex, 'hex')), // Asset Name\n              csl.BigNum.from_str(assetAmountToSend.toString()) // How much to send\n              );\n              multiAsset.insert(csl.ScriptHash.from_bytes(Buffer.from(assetPolicyIdHex, 'hex')), // PolicyID\n              assets);\n              txBuilder.add_input(scriptAddressObj, csl.TransactionInput[\"new\"](csl.TransactionHash.from_bytes(Buffer.from(transactionIdLocked, 'hex')), transactionIndxLocked), csl.Value.new_from_assets(multiAsset)); // how much lovelace is at that UTXO\n\n              txBuilder.set_fee(csl.BigNum.from_str(Number(manualFee).toString()));\n              scripts = csl.PlutusScripts[\"new\"]();\n              scripts.add(csl.PlutusScript.from_bytes(Buffer.from(plutusScriptCborHex, 'hex'))); //from cbor of plutus script\n              // Add outputs\n\n              txOutputBuilder = csl.TransactionOutputBuilder[\"new\"]().with_address(shelleyChangeAddress).next().with_coin_and_asset(csl.BigNum.from_str(lovelaceLocked.toString()), multiAsset).build();\n              txBuilder.add_output(txOutputBuilder); // add utxos from user\n\n              _context14.next = 32;\n              return this.wallet.getUtxos();\n\n            case 32:\n              walletUtxos = _context14.sent;\n              utxos = walletUtxos.map(function (utxo) {\n                return csl.TransactionUnspentOutput.from_bytes(Buffer.from(utxo.cbor, 'hex'));\n              });\n              transactionUnspentOutputs = csl.TransactionUnspentOutputs[\"new\"]();\n              utxos.forEach(function (utxo) {\n                transactionUnspentOutputs.add(utxo);\n              });\n              txBuilder.add_inputs_from(transactionUnspentOutputs, csl.CoinSelectionStrategyCIP2.LargestFirstMultiAsset); //txBuilder.add_change_if_needed(shelleyChangeAddress);\n              // once the transaction is ready, we build it to get the tx body without witnesses\n\n              txBody = txBuilder.build();\n              _context14.next = 40;\n              return this.getCollateral();\n\n            case 40:\n              collateral = _context14.sent;\n              inputs = csl.TransactionInputs[\"new\"]();\n              collateral.forEach(function (utxo) {\n                inputs.add(utxo.input());\n              }); // make datum\n\n              datum = this.createDatum({\n                ownerAddressBech32: ownerAddress,\n                assets: [assetPolicyIdHex + \".\" + assetName]\n              });\n              datumHash = plutusDataToHex(datum);\n              console.log('datumHash', datumHash);\n              datums = csl.PlutusList[\"new\"](); // datums.add(PlutusData.from_bytes(Buffer.from(this.state.datumStr, \"utf8\")))\n\n              datums.add(datum);\n              redeemers = csl.Redeemers[\"new\"]();\n              data = csl.PlutusData.new_constr_plutus_data(csl.ConstrPlutusData[\"new\"](csl.BigNum.from_str('0'), csl.PlutusList[\"new\"]()));\n              redeemer = csl.Redeemer[\"new\"](csl.RedeemerTag.new_spend(), csl.BigNum.from_str('0'), data, csl.ExUnits[\"new\"](csl.BigNum.from_str('7000000'), csl.BigNum.from_str('3000000000')));\n              redeemers.add(redeemer); // Tx witness\n\n              transactionWitnessSet = csl.TransactionWitnessSet[\"new\"]();\n              transactionWitnessSet.set_plutus_scripts(scripts);\n              transactionWitnessSet.set_plutus_data(datums);\n              transactionWitnessSet.set_redeemers(redeemers); // Pre Vasil hard fork cost model\n              // const cost_model_vals = [197209, 0, 1, 1, 396231, 621, 0, 1, 150000, 1000, 0, 1, 150000, 32, 2477736, 29175, 4, 29773, 100, 29773, 100, 29773, 100, 29773, 100, 29773, 100, 29773, 100, 100, 100, 29773, 100, 150000, 32, 150000, 32, 150000, 32, 150000, 1000, 0, 1, 150000, 32, 150000, 1000, 0, 8, 148000, 425507, 118, 0, 1, 1, 150000, 1000, 0, 8, 150000, 112536, 247, 1, 150000, 10000, 1, 136542, 1326, 1, 1000, 150000, 1000, 1, 150000, 32, 150000, 32, 150000, 32, 1, 1, 150000, 1, 150000, 4, 103599, 248, 1, 103599, 248, 1, 145276, 1366, 1, 179690, 497, 1, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 148000, 425507, 118, 0, 1, 1, 61516, 11218, 0, 1, 150000, 32, 148000, 425507, 118, 0, 1, 1, 148000, 425507, 118, 0, 1, 1, 2477736, 29175, 4, 0, 82363, 4, 150000, 5000, 0, 1, 150000, 32, 197209, 0, 1, 1, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 3345831, 1, 1];\n\n              /*\r\n                  Post Vasil hard fork cost model\r\n                  If you need to make this code work on the Mainnnet, before Vasil hard-fork\r\n                  Then you need to comment this section below and uncomment the cost model above\r\n                  Otherwise it will give errors when redeeming from Scripts\r\n                  Sending assets and ada to Script addresses is unaffected by this cost model\r\n                   */\n\n              cost_model_vals = [205665, 812, 1, 1, 1000, 571, 0, 1, 1000, 24177, 4, 1, 1000, 32, 117366, 10475, 4, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 100, 100, 23000, 100, 19537, 32, 175354, 32, 46417, 4, 221973, 511, 0, 1, 89141, 32, 497525, 14068, 4, 2, 196500, 453240, 220, 0, 1, 1, 1000, 28662, 4, 2, 245000, 216773, 62, 1, 1060367, 12586, 1, 208512, 421, 1, 187000, 1000, 52998, 1, 80436, 32, 43249, 32, 1000, 32, 80556, 1, 57667, 4, 1000, 10, 197145, 156, 1, 197145, 156, 1, 204924, 473, 1, 208896, 511, 1, 52467, 32, 64832, 32, 65493, 32, 22558, 32, 16563, 32, 76511, 32, 196500, 453240, 220, 0, 1, 1, 69522, 11687, 0, 1, 60091, 32, 196500, 453240, 220, 0, 1, 1, 196500, 453240, 220, 0, 1, 1, 806990, 30482, 4, 1927926, 82523, 4, 265318, 0, 4, 0, 85931, 32, 205665, 812, 1, 1, 41182, 32, 212342, 32, 31220, 32, 32696, 32, 43357, 32, 32247, 32, 38314, 32, 9462713, 1021, 10];\n              costModel = csl.CostModel[\"new\"]();\n              cost_model_vals.forEach(function (x, i) {\n                return costModel.set(i, csl.Int.new_i32(x));\n              });\n              costModels = csl.Costmdls[\"new\"]();\n              costModels.insert(csl.Language.new_plutus_v1(), costModel);\n              scriptDataHash = csl.hash_script_data(redeemers, costModels, datums);\n              txBody.set_script_data_hash(scriptDataHash);\n              txBody.set_collateral(inputs);\n              baseAddress = csl.BaseAddress.from_address(shelleyChangeAddress);\n              requiredSigners = csl.Ed25519KeyHashes[\"new\"]();\n              requiredSigners.add(baseAddress == null ? void 0 : baseAddress.payment_cred().to_keyhash());\n              txBody.set_required_signers(requiredSigners);\n              transaction = csl.Transaction[\"new\"](txBody, csl.TransactionWitnessSet.from_bytes(transactionWitnessSet.to_bytes()));\n              transactionBytes = transaction.to_bytes();\n              transactionHex = toHex(transactionBytes);\n              return _context14.abrupt(\"return\", transactionHex);\n\n            case 72:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function buildSCv2(_x12) {\n      return _buildSCv.apply(this, arguments);\n    }\n\n    return buildSCv2;\n  }();\n\n  _proto._getAssetUtxo = /*#__PURE__*/function () {\n    var _getAssetUtxo2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(_ref18) {\n      var _this4 = this;\n\n      var scriptAddress, asset, utxosFromBF, utxos;\n      return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              scriptAddress = _ref18.scriptAddress, asset = _ref18.asset;\n              _context15.next = 3;\n              return this._blockfrost.addressesAddressUtxosAsset({\n                address: scriptAddress,\n                asset: asset\n              });\n\n            case 3:\n              utxosFromBF = _context15.sent;\n              console.log('utxosFromBF', utxosFromBF);\n              utxos = utxosFromBF.filter(function (utxo) {\n                // return utxo.data_hash !== null;\n                return utxo.data_hash == \"287bb96b1b2b86658cae7a5a2c10a8e6663f710a7e0aa9df7b439891be6ede8c\";\n              }).map(function (utxoBF) {\n                var txoutput = _this4.createTxUnspentOutput(StringToAddress(scriptAddress), utxoBF);\n\n                console.log('txoutput', txoutput);\n                return txoutput;\n              });\n              return _context15.abrupt(\"return\", utxos[0]);\n\n            case 7:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function _getAssetUtxo(_x13) {\n      return _getAssetUtxo2.apply(this, arguments);\n    }\n\n    return _getAssetUtxo;\n  }();\n\n  _proto.buildSCv3 = /*#__PURE__*/function () {\n    var _buildSCv2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(_ref19) {\n      var _assets2;\n\n      var ownerAddress, scriptAddress, blockfrostApiKey, network, txBuilder, assetName, assetNameHex, assetPolicyIdHex, assetUtxo, walletUtxos, utxos, transactionUnspentOutputs, inputs, outputs, plutusScripts, datum, datumHash, datums, txInputsBuilder, plutusWitness, collateral, requiredSigners, _transactionUnspentOutputs, tx, txVkeyWitnessesHex, txVkeyWitnesses, transactionWitnessSet, signedTx, txHex, txHash;\n\n      return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              ownerAddress = _ref19.ownerAddress, scriptAddress = _ref19.scriptAddress, blockfrostApiKey = _ref19.blockfrostApiKey, network = _ref19.network;\n              // start: init\n              this._blockfrost = new Blockfrost();\n              _context16.next = 4;\n              return this._blockfrost.init({\n                blockfrostApiKey: blockfrostApiKey,\n                network: network\n              });\n\n            case 4:\n              _context16.t0 = csl.TransactionBuilder;\n              _context16.next = 7;\n              return this._getTxBuilderConfig();\n\n            case 7:\n              _context16.t1 = _context16.sent;\n              txBuilder = _context16.t0[\"new\"].call(_context16.t0, _context16.t1);\n              assetName = 'SOCIETY';\n              assetNameHex = toHex(assetName);\n              assetPolicyIdHex = 'f57f145fb8dd8373daff7cf55cea181669e99c4b73328531ebd4419a'; // let transactionIdLocked =\n              //   '3c0fc4774e529432b2eaa654720231ad6c6d92ae2a4a7ab2544a93dcfa3c8561';\n\n              _context16.next = 14;\n              return this._getAssetUtxo({\n                scriptAddress: scriptAddress,\n                asset: \"\" + assetPolicyIdHex + assetNameHex\n              });\n\n            case 14:\n              assetUtxo = _context16.sent;\n              _context16.next = 17;\n              return this.wallet.getUtxos();\n\n            case 17:\n              walletUtxos = _context16.sent;\n              utxos = walletUtxos.map(function (utxo) {\n                return csl.TransactionUnspentOutput.from_bytes(Buffer.from(utxo.cbor, 'hex'));\n              });\n              transactionUnspentOutputs = csl.TransactionUnspentOutputs[\"new\"]();\n              utxos.forEach(function (utxo) {\n                transactionUnspentOutputs.add(utxo);\n              });\n              inputs = [].concat(utxos);\n\n              if (assetUtxo) {\n                inputs.push(assetUtxo);\n              } ////\n\n\n              outputs = [{\n                address: ownerAddress,\n                assets: (_assets2 = {}, _assets2[assetPolicyIdHex + \".\" + assetName] = 1, _assets2.lovelace = 3000000, _assets2)\n              }];\n\n              this._addOutputs({\n                txBuilder: txBuilder,\n                outputs: outputs,\n                ownerAddressBech32: ownerAddress\n              }); ////\n\n\n              plutusScripts = csl.PlutusScripts[\"new\"]();\n              plutusScripts.add(csl.PlutusScript.from_bytes(Buffer.from('4e4d01000033222220051200120011', 'hex'))); // make datum\n\n              datum = this.createDatum({\n                ownerAddressBech32: ownerAddress,\n                assets: [assetPolicyIdHex + \".\" + assetName]\n              });\n              datumHash = plutusDataToHex(datum);\n              console.log('datumHash', datumHash);\n              datums = csl.PlutusList[\"new\"]();\n              datums.add(datum);\n\n              if (!plutusScripts) {\n                _context16.next = 43;\n                break;\n              }\n\n              txInputsBuilder = csl.TxInputsBuilder[\"new\"]();\n              plutusWitness = this.getPlutusWitness(plutusScripts.get(0), datums.get(0), this.unlock, assetUtxo);\n              txInputsBuilder.add_plutus_script_input(plutusWitness, assetUtxo.input(), assetUtxo.output().amount());\n              _context16.next = 38;\n              return this.wallet.getCollateral();\n\n            case 38:\n              collateral = _context16.sent.map(function (utxo) {\n                return csl.TransactionUnspentOutput.from_bytes(fromHex(utxo));\n              }).slice(0, 1);\n              this.setCollateral(txBuilder, collateral);\n              requiredSigners = this.getRequiredSigners(inputs, assetUtxo, collateral);\n              txInputsBuilder.add_required_signers(requiredSigners);\n              txBuilder.set_inputs(txInputsBuilder);\n\n            case 43:\n              txBuilder.calc_script_data_hash(csl.TxBuilderConstants.plutus_vasil_cost_models());\n              _context16.prev = 44;\n              _transactionUnspentOutputs = csl.TransactionUnspentOutputs[\"new\"]();\n              inputs.forEach(function (utxo) {\n                _transactionUnspentOutputs.add(utxo);\n              });\n              txBuilder.add_inputs_from(_transactionUnspentOutputs, csl.CoinSelectionStrategyCIP2.LargestFirstMultiAsset);\n              txBuilder.add_change_if_needed(StringToAddress(ownerAddress));\n              _context16.next = 54;\n              break;\n\n            case 51:\n              _context16.prev = 51;\n              _context16.t2 = _context16[\"catch\"](44);\n              throw new Error(\"INPUTS_EXHAUSTED\");\n\n            case 54:\n              tx = txBuilder.build_tx();\n              _context16.next = 57;\n              return this.wallet.signTx({\n                tx: toHex(tx.to_bytes()),\n                partialSign: true\n              });\n\n            case 57:\n              txVkeyWitnessesHex = _context16.sent;\n              txVkeyWitnesses = csl.TransactionWitnessSet.from_bytes(fromHex(txVkeyWitnessesHex));\n              transactionWitnessSet = csl.TransactionWitnessSet.from_bytes(tx.witness_set().to_bytes());\n              transactionWitnessSet.set_vkeys(txVkeyWitnesses == null ? void 0 : txVkeyWitnesses.vkeys());\n              signedTx = csl.Transaction[\"new\"](tx.body(), transactionWitnessSet, tx.auxiliary_data());\n              txHex = toHex(signedTx.to_bytes());\n              _context16.next = 65;\n              return this.wallet.submitTx({\n                tx: txHex\n              });\n\n            case 65:\n              txHash = _context16.sent;\n              console.log('txHash', txHash);\n              return _context16.abrupt(\"return\", txHash);\n\n            case 68:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this, [[44, 51]]);\n    }));\n\n    function buildSCv3(_x14) {\n      return _buildSCv2.apply(this, arguments);\n    }\n\n    return buildSCv3;\n  }();\n\n  return Transaction;\n}();\n\nvar Axios = function Axios(_ref2) {\n  var _this = this;\n\n  var baseURL = _ref2.baseURL,\n      _ref2$headers = _ref2.headers,\n      headers = _ref2$headers === void 0 ? {} : _ref2$headers;\n\n  this._createAxiosInstance = function (_ref3) {\n    var baseURL = _ref3.baseURL,\n        headers = _ref3.headers;\n    return axios__WEBPACK_IMPORTED_MODULE_1__.create({\n      baseURL: baseURL,\n      headers: headers\n    });\n  };\n\n  this.post = function (_ref4) {\n    var endpoint = _ref4.endpoint,\n        data = _ref4.data,\n        _ref4$headers = _ref4.headers,\n        headers = _ref4$headers === void 0 ? {} : _ref4$headers;\n    return _this._instance.post(endpoint, data, {\n      headers: headers\n    });\n  };\n\n  this.get = function (_ref5) {\n    var endpoint = _ref5.endpoint;\n    return _this._instance.get(endpoint);\n  };\n\n  this._instance = this._createAxiosInstance({\n    baseURL: baseURL,\n    headers: headers\n  });\n};\n\nvar Infura = /*#__PURE__*/function () {\n  function Infura() {}\n\n  var _proto = Infura.prototype;\n\n  _proto.init = /*#__PURE__*/function () {\n    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n      var projectId, projectSecret, ipfsApiEndpoint, headers;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              projectId = _ref.projectId, projectSecret = _ref.projectSecret, ipfsApiEndpoint = _ref.ipfsApiEndpoint;\n              headers = {\n                auth: projectId + \":\" + projectSecret\n              };\n              this._instance = new Axios({\n                baseURL: ipfsApiEndpoint != null ? ipfsApiEndpoint : 'https://ipfs.infura.io:5001/api/v0',\n                headers: headers\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function init(_x) {\n      return _init.apply(this, arguments);\n    }\n\n    return init;\n  }()\n  /**\r\n   * Add a file or directory to IPFS.\r\n   * https://docs.infura.io/infura/networks/ipfs/http-api-methods/add\r\n   * @returns\r\n   */\n  ;\n\n  _proto.addFileIpfs =\n  /*#__PURE__*/\n  function () {\n    var _addFileIpfs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n      var formData;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              formData = _ref2.formData;\n              _context2.next = 3;\n              return this._instance.post({\n                endpoint: '/add?',\n                data: formData,\n                headers: {\n                  'Content-Type': 'multipart/form-data'\n                }\n              }).then(function (_ref3) {\n                var data = _ref3.data;\n                return data;\n              })[\"catch\"](function (error) {\n                throw error;\n              });\n\n            case 3:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function addFileIpfs(_x2) {\n      return _addFileIpfs.apply(this, arguments);\n    }\n\n    return addFileIpfs;\n  }();\n\n  return Infura;\n}();\n\nvar DEFAULT_PROTOCOL_PARAMETERS = {\n  coinsPerUTxOSize: '4310',\n  priceMem: 0.0577,\n  priceStep: 0.0000721,\n  minFeeA: 44,\n  minFeeB: 155381,\n  keyDeposit: '2000000',\n  maxTxSize: 16384,\n  maxValSize: '5000',\n  poolDeposit: '500000000'\n};\nvar POLICY_ID_LENGTH = 56;\n\nvar Trackable = function Trackable(constructor) {\n  return /*#__PURE__*/function (_constructor) {\n    _inheritsLoose(_class, _constructor);\n\n    function _class() {\n      var _this;\n\n      _this = _constructor.apply(this, arguments) || this;\n      _this.__visits = [];\n      return _this;\n    }\n\n    return _class;\n  }(constructor);\n};\nvar Checkpoint = function Checkpoint() {\n  return function (_target, propertyKey, descriptor) {\n    var method = descriptor.value;\n\n    descriptor.value = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var result = method.call.apply(method, [this].concat(args));\n      if (this.__visits) this.__visits.push(propertyKey);\n      return result;\n    };\n  };\n};\n\nvar deserializeAddress = function deserializeAddress(address) {\n  return csl.Address.from_bytes(toBytes(address));\n};\nvar deserializeDataHash = function deserializeDataHash(dataHash) {\n  return csl.DataHash.from_bytes(toBytes(dataHash));\n};\nvar deserializePlutusData = function deserializePlutusData(plutusData) {\n  return csl.PlutusData.from_bytes(toBytes(plutusData));\n};\nvar deserializeScriptRef = function deserializeScriptRef(scriptRef) {\n  return csl.ScriptRef.from_bytes(toBytes(scriptRef));\n};\nvar deserializeScriptHash = function deserializeScriptHash(scriptHash) {\n  return csl.ScriptHash.from_bytes(toBytes(scriptHash));\n};\nvar deserializeTx = function deserializeTx(tx) {\n  return csl.Transaction.from_bytes(toBytes(tx));\n};\nvar deserializeTxHash = function deserializeTxHash(txHash) {\n  return csl.TransactionHash.from_bytes(toBytes(txHash));\n};\nvar deserializeTxUnspentOutput = function deserializeTxUnspentOutput(txUnspentOutput) {\n  return csl.TransactionUnspentOutput.from_bytes(toBytes(txUnspentOutput));\n};\nvar deserializeTxWitnessSet = function deserializeTxWitnessSet(txWitnessSet) {\n  return csl.TransactionWitnessSet.from_bytes(toBytes(txWitnessSet));\n};\nvar deserializeValue = function deserializeValue(value) {\n  return csl.Value.from_bytes(toBytes(value));\n};\n\n/* -----------------[ ASCII ]----------------- */\n\nvar toASCII = function toASCII(hex) {\n  return Buffer.from(hex, 'hex').toString('ascii');\n};\n/* -----------------[ Address ]----------------- */\n\nvar toAddress = function toAddress(bech32) {\n  return csl.Address.from_bech32(bech32);\n};\n/* -----------------[ Bytes ]----------------- */\n\nvar fromBytes = function fromBytes(bytes) {\n  return Buffer.from(bytes).toString('hex');\n};\nvar toBytes = function toBytes(hex) {\n  return Buffer.from(hex, 'hex');\n};\n/* -----------------[ TransactionUnspentOutput ]----------------- */\n\nvar fromTxUnspentOutput = function fromTxUnspentOutput(txUnspentOutput) {\n  var _txUnspentOutput$outp, _txUnspentOutput$outp2, _txUnspentOutput$outp3;\n\n  var dataHash = txUnspentOutput.output().has_data_hash() ? fromBytes((_txUnspentOutput$outp = txUnspentOutput.output().data_hash()) == null ? void 0 : _txUnspentOutput$outp.to_bytes()) : undefined;\n  var plutusData = txUnspentOutput.output().has_plutus_data() ? fromBytes((_txUnspentOutput$outp2 = txUnspentOutput.output().plutus_data()) == null ? void 0 : _txUnspentOutput$outp2.to_bytes()) : undefined;\n  var scriptRef = txUnspentOutput.output().has_script_ref() ? fromBytes((_txUnspentOutput$outp3 = txUnspentOutput.output().script_ref()) == null ? void 0 : _txUnspentOutput$outp3.to_bytes()) : undefined;\n  return {\n    input: {\n      outputIndex: txUnspentOutput.input().index(),\n      txHash: fromBytes(txUnspentOutput.input().transaction_id().to_bytes())\n    },\n    output: {\n      address: txUnspentOutput.output().address().to_bech32(),\n      amount: fromValue(txUnspentOutput.output().amount()),\n      dataHash: dataHash,\n      plutusData: plutusData,\n      scriptRef: scriptRef\n    }\n  };\n};\nvar toTxUnspentOutput = function toTxUnspentOutput(utxo) {\n  var txInput = csl.TransactionInput[\"new\"](deserializeTxHash(utxo.input.txHash), utxo.input.outputIndex);\n  var txOutput = csl.TransactionOutput[\"new\"](toAddress(utxo.output.address), toValue(utxo.output.amount));\n\n  if (utxo.output.dataHash !== undefined) {\n    txOutput.set_data_hash(deserializeDataHash(utxo.output.dataHash));\n  }\n\n  if (utxo.output.plutusData !== undefined) {\n    txOutput.set_plutus_data(deserializePlutusData(utxo.output.plutusData));\n  }\n\n  if (utxo.output.scriptRef !== undefined) {\n    txOutput.set_script_ref(deserializeScriptRef(utxo.output.scriptRef));\n  }\n\n  return csl.TransactionUnspentOutput[\"new\"](txInput, txOutput);\n};\n/* -----------------[ UnitInterval ]----------------- */\n\nvar toUnitInterval = function toUnitInterval(_float) {\n  var decimal = _float.split('.')[1];\n\n  var numerator = \"\" + parseInt(decimal, 10);\n  var denominator = '1' + '0'.repeat(decimal.length);\n  return csl.UnitInterval[\"new\"](csl.BigNum.from_str(numerator), csl.BigNum.from_str(denominator));\n};\n/* -----------------[ Value ]----------------- */\n\nvar fromValue = function fromValue(value) {\n  var assets = [{\n    unit: 'lovelace',\n    quantity: value.coin().to_str()\n  }];\n  var multiasset = value.multiasset();\n\n  if (multiasset !== undefined) {\n    var policies = multiasset.keys();\n\n    for (var i = 0; i < policies.len(); i += 1) {\n      var policyId = policies.get(i);\n      var policyAssets = multiasset.get(policyId);\n\n      if (policyAssets !== undefined) {\n        var policyAssetNames = policyAssets.keys();\n\n        for (var j = 0; j < policyAssetNames.len(); j += 1) {\n          var _policyAssets$get;\n\n          var assetName = policyAssetNames.get(j);\n          var quantity = (_policyAssets$get = policyAssets.get(assetName)) != null ? _policyAssets$get : csl.BigNum.from_str('0');\n          var assetId = fromBytes(policyId.to_bytes()) + fromBytes(assetName.name());\n          assets.push({\n            unit: assetId,\n            quantity: quantity.to_str()\n          });\n        }\n      }\n    }\n  }\n\n  return assets;\n};\nvar toValue = function toValue(assets) {\n  var lovelace = assets.find(function (asset) {\n    return asset.unit === 'lovelace';\n  });\n  var policies = Array.from(new Set(assets.filter(function (asset) {\n    return asset.unit !== 'lovelace';\n  }).map(function (asset) {\n    return asset.unit.slice(0, POLICY_ID_LENGTH);\n  })));\n  var multiAsset = csl.MultiAsset[\"new\"]();\n  policies.forEach(function (policyId) {\n    var policyAssets = csl.Assets[\"new\"]();\n    assets.filter(function (asset) {\n      return asset.unit.slice(0, POLICY_ID_LENGTH) === policyId;\n    }).forEach(function (asset) {\n      policyAssets.insert(csl.AssetName[\"new\"](toBytes(asset.unit.slice(POLICY_ID_LENGTH))), csl.BigNum.from_str(asset.quantity));\n    });\n    multiAsset.insert(deserializeScriptHash(policyId), policyAssets);\n  });\n  var value = csl.Value[\"new\"](csl.BigNum.from_str(lovelace ? lovelace.quantity : '0'));\n\n  if (assets.length > 1 || !lovelace) {\n    value.set_multiasset(multiAsset);\n  }\n\n  return value;\n};\n\nvar resolveFingerprint = function resolveFingerprint(policyId, assetName) {\n  return \"\" + policyId + assetName; // TODO: CIP 14 - User-Facing Asset Fingerprint\n};\n\nvar TransactionService_1;\n\nvar TransactionService = TransactionService_1 = /*#__PURE__*/function () {\n  function TransactionService(_walletService, parameters) {\n    this._walletService = _walletService;\n    this._txBuilder = TransactionService_1.createTxBuilder(parameters);\n  }\n\n  var _proto = TransactionService.prototype;\n\n  _proto.build = /*#__PURE__*/function () {\n    var _build = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return this.addTxInputsIfNeeded();\n\n            case 3:\n              _context.next = 5;\n              return this.addChangeAddressIfNeeded();\n\n            case 5:\n              return _context.abrupt(\"return\", fromBytes(this._txBuilder.build_tx().to_bytes()));\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              throw _context.t0;\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 8]]);\n    }));\n\n    function build() {\n      return _build.apply(this, arguments);\n    }\n\n    return build;\n  }();\n\n  _proto.sendLovelace = function sendLovelace(address, lovelace) {\n    var txOutput = csl.TransactionOutputBuilder[\"new\"]().with_address(toAddress(address)).next().with_coin(csl.BigNum.from_str(lovelace)).build();\n\n    this._txBuilder.add_output(txOutput);\n\n    return this;\n  };\n\n  _proto.sendAssets = function sendAssets(address, assets, coinsPerByte) {\n    if (coinsPerByte === void 0) {\n      coinsPerByte = DEFAULT_PROTOCOL_PARAMETERS.coinsPerUTxOSize;\n    }\n\n    var amount = toValue(assets);\n    var multiasset = amount.multiasset();\n\n    if (amount.is_zero() || multiasset === undefined) {\n      return this;\n    }\n\n    var txOutput = csl.TransactionOutputBuilder[\"new\"]().with_address(toAddress(address)).next().with_asset_and_min_required_coin_by_utxo_cost(multiasset, csl.DataCost.new_coins_per_byte(csl.BigNum.from_str(coinsPerByte))).build();\n\n    this._txBuilder.add_output(txOutput);\n\n    return this;\n  };\n\n  _proto.setChangeAddress = function setChangeAddress(address) {\n    this._txBuilder.add_change_if_needed(toAddress(address));\n\n    return this;\n  };\n\n  _proto.setMetadata = function setMetadata(key, value) {\n    this._txBuilder.add_json_metadatum_with_schema(csl.BigNum.from_str(key.toString()), JSON.stringify(value), csl.MetadataJsonSchema.DetailedSchema);\n\n    return this;\n  };\n\n  _proto.setTimeToLive = function setTimeToLive(slot) {\n    this._txBuilder.set_ttl_bignum(csl.BigNum.from_str(slot));\n\n    return this;\n  };\n\n  _proto.setTxInputs = function setTxInputs(inputs) {\n    var txInputsBuilder = csl.TxInputsBuilder[\"new\"]();\n    inputs.map(function (input) {\n      return toTxUnspentOutput(input);\n    }).forEach(function (utxo) {\n      txInputsBuilder.add_input(utxo.output().address(), utxo.input(), utxo.output().amount());\n    });\n\n    this._txBuilder.set_inputs(txInputsBuilder);\n\n    return this;\n  };\n\n  TransactionService.createTxBuilder = function createTxBuilder(parameters) {\n    if (parameters === void 0) {\n      parameters = DEFAULT_PROTOCOL_PARAMETERS;\n    }\n\n    var txBuilderConfig = csl.TransactionBuilderConfigBuilder[\"new\"]().coins_per_utxo_byte(csl.BigNum.from_str(parameters.coinsPerUTxOSize)).ex_unit_prices(csl.ExUnitPrices[\"new\"](toUnitInterval(parameters.priceMem.toString()), toUnitInterval(parameters.priceStep.toString()))).fee_algo(csl.LinearFee[\"new\"](csl.BigNum.from_str(parameters.minFeeA.toString()), csl.BigNum.from_str(parameters.minFeeB.toString()))).key_deposit(csl.BigNum.from_str(parameters.keyDeposit)).max_tx_size(parameters.maxTxSize).max_value_size(parseInt(parameters.maxValSize)).pool_deposit(csl.BigNum.from_str(parameters.poolDeposit)).build();\n    return csl.TransactionBuilder[\"new\"](txBuilderConfig);\n  };\n\n  _proto.addChangeAddressIfNeeded = /*#__PURE__*/function () {\n    var _addChangeAddressIfNeeded = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var changeAddress;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.notReached('setChangeAddress')) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 3;\n              return this._walletService.getChangeAddress();\n\n            case 3:\n              changeAddress = _context2.sent;\n\n              this._txBuilder.add_change_if_needed(toAddress(changeAddress));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function addChangeAddressIfNeeded() {\n      return _addChangeAddressIfNeeded.apply(this, arguments);\n    }\n\n    return addChangeAddressIfNeeded;\n  }();\n\n  _proto.addTxInputsIfNeeded = /*#__PURE__*/function () {\n    var _addTxInputsIfNeeded = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var walletUtxos, coinSelectionStrategy;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!this.notReached('setTxInputs')) {\n                _context3.next = 6;\n                break;\n              }\n\n              _context3.next = 3;\n              return this.getWalletUtxos();\n\n            case 3:\n              walletUtxos = _context3.sent;\n              coinSelectionStrategy = !this.notReached('sendAssets') ? csl.CoinSelectionStrategyCIP2.LargestFirstMultiAsset : csl.CoinSelectionStrategyCIP2.LargestFirst;\n\n              this._txBuilder.add_inputs_from(walletUtxos, coinSelectionStrategy);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function addTxInputsIfNeeded() {\n      return _addTxInputsIfNeeded.apply(this, arguments);\n    }\n\n    return addTxInputsIfNeeded;\n  }();\n\n  _proto.getWalletUtxos = /*#__PURE__*/function () {\n    var _getWalletUtxos = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var txUnspentOutputs, walletUtxos;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              txUnspentOutputs = csl.TransactionUnspentOutputs[\"new\"]();\n              _context4.next = 3;\n              return this._walletService.getDeserializedUtxos();\n\n            case 3:\n              walletUtxos = _context4.sent;\n              walletUtxos.forEach(function (utxo) {\n                txUnspentOutputs.add(utxo);\n              });\n              return _context4.abrupt(\"return\", txUnspentOutputs);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getWalletUtxos() {\n      return _getWalletUtxos.apply(this, arguments);\n    }\n\n    return getWalletUtxos;\n  }();\n\n  _proto.notReached = function notReached(checkpoint) {\n    return this.__visits.includes(checkpoint) === false;\n  };\n\n  return TransactionService;\n}();\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([Checkpoint()], TransactionService.prototype, \"sendAssets\", null);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([Checkpoint()], TransactionService.prototype, \"setChangeAddress\", null);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([Checkpoint()], TransactionService.prototype, \"setTxInputs\", null);\n\nTransactionService = TransactionService_1 = /*#__PURE__*/(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([Trackable], TransactionService);\n\nvar WalletService = /*#__PURE__*/function () {\n  function WalletService(_walletInstance) {\n    this._walletInstance = _walletInstance;\n  }\n\n  WalletService.getInstalledWallets = function getInstalledWallets() {\n    if (window.cardano === undefined) return [];\n    return WalletService.supportedWallets.filter(function (sw) {\n      return window.cardano[sw] !== undefined;\n    }).map(function (sw) {\n      return {\n        name: window.cardano[sw].name,\n        icon: window.cardano[sw].icon,\n        version: window.cardano[sw].apiVersion\n      };\n    });\n  };\n\n  WalletService.enable = /*#__PURE__*/function () {\n    var _enable = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(walletName) {\n      var walletInstance;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return WalletService.resolveInstance(walletName);\n\n            case 3:\n              walletInstance = _context.sent;\n\n              if (!(walletInstance !== undefined)) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", new WalletService(walletInstance));\n\n            case 6:\n              throw new Error(\"Couldn't create an instance of wallet: \" + walletName + \".\");\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              throw _context.t0;\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    function enable(_x) {\n      return _enable.apply(this, arguments);\n    }\n\n    return enable;\n  }();\n\n  var _proto = WalletService.prototype;\n\n  _proto.getBalance = /*#__PURE__*/function () {\n    var _getBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var balance;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this._walletInstance.getBalance();\n\n            case 2:\n              balance = _context2.sent;\n              return _context2.abrupt(\"return\", fromValue(deserializeValue(balance)));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getBalance() {\n      return _getBalance.apply(this, arguments);\n    }\n\n    return getBalance;\n  }();\n\n  _proto.getChangeAddress = /*#__PURE__*/function () {\n    var _getChangeAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var changeAddress;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this._walletInstance.getChangeAddress();\n\n            case 2:\n              changeAddress = _context3.sent;\n              return _context3.abrupt(\"return\", deserializeAddress(changeAddress).to_bech32());\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getChangeAddress() {\n      return _getChangeAddress.apply(this, arguments);\n    }\n\n    return getChangeAddress;\n  }();\n\n  _proto.getCollateral = /*#__PURE__*/function () {\n    var _getCollateral = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var deserializedCollateral;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.getDeserializedCollateral();\n\n            case 2:\n              deserializedCollateral = _context4.sent;\n              return _context4.abrupt(\"return\", deserializedCollateral.map(function (dc) {\n                return fromTxUnspentOutput(dc);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getCollateral() {\n      return _getCollateral.apply(this, arguments);\n    }\n\n    return getCollateral;\n  }();\n\n  _proto.getDeserializedCollateral = /*#__PURE__*/function () {\n    var _getDeserializedCollateral = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var _yield$this$_walletIn;\n\n      var collateral;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this._walletInstance.experimental.getCollateral();\n\n            case 2:\n              _context5.t0 = _yield$this$_walletIn = _context5.sent;\n\n              if (!(_context5.t0 != null)) {\n                _context5.next = 7;\n                break;\n              }\n\n              _context5.t1 = _yield$this$_walletIn;\n              _context5.next = 8;\n              break;\n\n            case 7:\n              _context5.t1 = [];\n\n            case 8:\n              collateral = _context5.t1;\n              return _context5.abrupt(\"return\", collateral.map(function (c) {\n                return deserializeTxUnspentOutput(c);\n              }));\n\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getDeserializedCollateral() {\n      return _getDeserializedCollateral.apply(this, arguments);\n    }\n\n    return getDeserializedCollateral;\n  }();\n\n  _proto.getNetworkId = function getNetworkId() {\n    return this._walletInstance.getNetworkId();\n  };\n\n  _proto.getRewardAddresses = /*#__PURE__*/function () {\n    var _getRewardAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      var rewardAddresses;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this._walletInstance.getRewardAddresses();\n\n            case 2:\n              rewardAddresses = _context6.sent;\n              return _context6.abrupt(\"return\", rewardAddresses.map(function (ra) {\n                return deserializeAddress(ra).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function getRewardAddresses() {\n      return _getRewardAddresses.apply(this, arguments);\n    }\n\n    return getRewardAddresses;\n  }();\n\n  _proto.getUnusedAddresses = /*#__PURE__*/function () {\n    var _getUnusedAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n      var unusedAddresses;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this._walletInstance.getUnusedAddresses();\n\n            case 2:\n              unusedAddresses = _context7.sent;\n              return _context7.abrupt(\"return\", unusedAddresses.map(function (una) {\n                return deserializeAddress(una).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function getUnusedAddresses() {\n      return _getUnusedAddresses.apply(this, arguments);\n    }\n\n    return getUnusedAddresses;\n  }();\n\n  _proto.getUsedAddresses = /*#__PURE__*/function () {\n    var _getUsedAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n      var usedAddresses;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this._walletInstance.getUsedAddresses();\n\n            case 2:\n              usedAddresses = _context8.sent;\n              return _context8.abrupt(\"return\", usedAddresses.map(function (usa) {\n                return deserializeAddress(usa).to_bech32();\n              }));\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function getUsedAddresses() {\n      return _getUsedAddresses.apply(this, arguments);\n    }\n\n    return getUsedAddresses;\n  }();\n\n  _proto.getUtxos = /*#__PURE__*/function () {\n    var _getUtxos = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n      var deserializedUtxos;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.getDeserializedUtxos();\n\n            case 2:\n              deserializedUtxos = _context9.sent;\n              return _context9.abrupt(\"return\", deserializedUtxos.map(function (du) {\n                return fromTxUnspentOutput(du);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function getUtxos() {\n      return _getUtxos.apply(this, arguments);\n    }\n\n    return getUtxos;\n  }();\n\n  _proto.getDeserializedUtxos = /*#__PURE__*/function () {\n    var _getDeserializedUtxos = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n      var _yield$this$_walletIn2;\n\n      var utxos;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this._walletInstance.getUtxos();\n\n            case 2:\n              _context10.t0 = _yield$this$_walletIn2 = _context10.sent;\n\n              if (!(_context10.t0 != null)) {\n                _context10.next = 7;\n                break;\n              }\n\n              _context10.t1 = _yield$this$_walletIn2;\n              _context10.next = 8;\n              break;\n\n            case 7:\n              _context10.t1 = [];\n\n            case 8:\n              utxos = _context10.t1;\n              return _context10.abrupt(\"return\", utxos.map(function (u) {\n                return deserializeTxUnspentOutput(u);\n              }));\n\n            case 10:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function getDeserializedUtxos() {\n      return _getDeserializedUtxos.apply(this, arguments);\n    }\n\n    return getDeserializedUtxos;\n  }();\n\n  _proto.signData = /*#__PURE__*/function () {\n    var _signData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(payload) {\n      var changeAddress;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this._walletInstance.getChangeAddress();\n\n            case 2:\n              changeAddress = _context11.sent;\n              return _context11.abrupt(\"return\", this._walletInstance.signData(changeAddress, payload));\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function signData(_x2) {\n      return _signData.apply(this, arguments);\n    }\n\n    return signData;\n  }();\n\n  _proto.signTx = /*#__PURE__*/function () {\n    var _signTx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(unsignedTx, partialSign) {\n      var tx, txWitnessSet, walletWitnessSet, walletVerificationKeys, signedTx;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (partialSign === void 0) {\n                partialSign = false;\n              }\n\n              _context12.prev = 1;\n              tx = deserializeTx(unsignedTx);\n              txWitnessSet = deserializeTxWitnessSet(fromBytes(tx.witness_set().to_bytes()));\n              _context12.next = 6;\n              return this._walletInstance.signTx(unsignedTx, partialSign);\n\n            case 6:\n              walletWitnessSet = _context12.sent;\n              walletVerificationKeys = deserializeTxWitnessSet(walletWitnessSet).vkeys();\n              if (walletVerificationKeys !== undefined) txWitnessSet.set_vkeys(walletVerificationKeys);\n              signedTx = fromBytes(csl.Transaction[\"new\"](tx.body(), txWitnessSet, tx.auxiliary_data()).to_bytes());\n              return _context12.abrupt(\"return\", signedTx);\n\n            case 13:\n              _context12.prev = 13;\n              _context12.t0 = _context12[\"catch\"](1);\n              throw _context12.t0;\n\n            case 16:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this, [[1, 13]]);\n    }));\n\n    function signTx(_x3, _x4) {\n      return _signTx.apply(this, arguments);\n    }\n\n    return signTx;\n  }();\n\n  _proto.submitTx = function submitTx(tx) {\n    return this._walletInstance.submitTx(tx);\n  };\n\n  _proto.getAssets = /*#__PURE__*/function () {\n    var _getAssets = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n      var balance;\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.getBalance();\n\n            case 2:\n              balance = _context13.sent;\n              return _context13.abrupt(\"return\", balance.filter(function (v) {\n                return v.unit !== 'lovelace';\n              }).map(function (v) {\n                var policyId = v.unit.slice(0, POLICY_ID_LENGTH);\n                var assetName = v.unit.slice(POLICY_ID_LENGTH);\n                var fingerprint = resolveFingerprint(policyId, assetName);\n                return {\n                  unit: v.unit,\n                  policyId: policyId,\n                  assetName: toASCII(assetName),\n                  fingerprint: fingerprint,\n                  quantity: v.quantity\n                };\n              }));\n\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function getAssets() {\n      return _getAssets.apply(this, arguments);\n    }\n\n    return getAssets;\n  }();\n\n  _proto.getLovelace = /*#__PURE__*/function () {\n    var _getLovelace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n      var balance, nativeAsset;\n      return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.getBalance();\n\n            case 2:\n              balance = _context14.sent;\n              nativeAsset = balance.find(function (v) {\n                return v.unit === 'lovelace';\n              });\n              return _context14.abrupt(\"return\", nativeAsset !== undefined ? nativeAsset.quantity : '0');\n\n            case 5:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function getLovelace() {\n      return _getLovelace.apply(this, arguments);\n    }\n\n    return getLovelace;\n  }();\n\n  _proto.getPolicyIdAssets = /*#__PURE__*/function () {\n    var _getPolicyIdAssets = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(policyId) {\n      var assets;\n      return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return this.getAssets();\n\n            case 2:\n              assets = _context15.sent;\n              return _context15.abrupt(\"return\", assets.filter(function (v) {\n                return v.policyId === policyId;\n              }));\n\n            case 4:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function getPolicyIdAssets(_x5) {\n      return _getPolicyIdAssets.apply(this, arguments);\n    }\n\n    return getPolicyIdAssets;\n  }();\n\n  _proto.getPolicyIds = /*#__PURE__*/function () {\n    var _getPolicyIds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n      var balance;\n      return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.getBalance();\n\n            case 2:\n              balance = _context16.sent;\n              return _context16.abrupt(\"return\", Array.from(new Set(balance.map(function (v) {\n                return v.unit.slice(0, POLICY_ID_LENGTH);\n              }))).filter(function (p) {\n                return p !== 'lovelace';\n              }));\n\n            case 4:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function getPolicyIds() {\n      return _getPolicyIds.apply(this, arguments);\n    }\n\n    return getPolicyIds;\n  }();\n\n  WalletService.resolveInstance = function resolveInstance(walletName) {\n    if (window.cardano === undefined) return undefined;\n    var wallet = WalletService.supportedWallets.map(function (sw) {\n      return window.cardano[sw];\n    }).filter(function (sw) {\n      return sw !== undefined;\n    }).find(function (sw) {\n      return sw.name === walletName;\n    });\n    return wallet == null ? void 0 : wallet.enable();\n  };\n\n  return WalletService;\n}();\nWalletService.supportedWallets = ['flint', 'nami', 'eternl', 'nufi'];\n\nvar Mesh = function Mesh() {\n  this.blockfrost = new Blockfrost();\n  this.infura = new Infura();\n  this.wallet = new Wallet({\n    blockfrost: this.blockfrost\n  });\n  this.transaction = new Transaction({\n    wallet: this.wallet\n  });\n};\n\nvar index = /*#__PURE__*/new Mesh();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);\n\n//# sourceMappingURL=mesh.esm.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@martifylabs/mesh/dist/mesh.esm.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/index.tsx"));
module.exports = __webpack_exports__;

})();